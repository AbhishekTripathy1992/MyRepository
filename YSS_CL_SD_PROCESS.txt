
FETCH_SO_LIST
item
METHOD fetch_so_list.
"*------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  : Zareena Begum
* Created on  :
* Description : Generic method to Fetch the salesorder list
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
DATA: lt_r_date    TYPE yss_cl_type_pool=>yss_r_date,
lt_r_vbeln   TYPE RANGE OF vbeln,
lt_r_lfgsk   TYPE RANGE OF lkgsk,
lt_r_kunnr   TYPE yss_cl_type_pool=>yss_r_kunnr,
lt_r_vkorg   TYPE rsdsselopt_t,
*          ls_sales_area TYPE yss_s_sales_area,
*          ls_records    TYPE yss_cl_type_pool=>yss_s_index,
lr_selopt    TYPE STANDARD TABLE OF rsdsselopt,
ls_selopt    TYPE rsdsselopt,
lo_exception TYPE REF TO ycx_ss_exception.
FIELD-SYMBOLS: <lfs_date>  TYPE LINE OF yss_cl_type_pool=>yss_r_date
<lfs_kunnr> TYPE LINE OF yss_cl_type_pool=>yss_r_kunn

TYPES : BEGIN OF lty_vbak,
vbeln TYPE vbeln_va,
audat TYPE audat,
vdatu TYPE edatu_vbak,
bstnk TYPE bstnk,
bstdk TYPE bstdk,
auart TYPE auart,
vbtyp TYPE vbtyp,
END OF lty_vbak,

BEGIN OF lty_vbpa,
vbeln TYPE vbeln_va,
parvw TYPE parvw,
kunnr TYPE kunnr,
adrnr TYPE adrnr,
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
name2      TYPE ad_name2,
END OF lty_adrc,

BEGIN OF lty_vbuk,
vbeln TYPE vbeln,
lfgsk TYPE lkgsk,
*              gbstk TYPE gbstk,
END OF lty_vbuk,

BEGIN OF lty_vbap,
vbeln TYPE vbeln,
posnr TYPE posnr_va,
netwr TYPE netwr_ap,
mwsbp TYPE mwsbp,
END OF lty_vbap,

BEGIN OF lty_vbfa,
vbelv   TYPE vbeln_von,
posnv   TYPE posnr_von,
vbeln   TYPE vbeln_nach,
posnn   TYPE posnr_nach,
vbtyp_n TYPE vbtyp_n,
END OF lty_vbfa.

DATA : lt_vbak      TYPE STANDARD TABLE OF lty_vbak,
lwa_vbak     TYPE lty_vbak,
lt_vbpa      TYPE STANDARD TABLE OF lty_vbpa,
lwa_vbpa     TYPE lty_vbpa,
lt_adrc      TYPE STANDARD TABLE OF lty_adrc,
lwa_adrc     TYPE lty_adrc,
lt_vbuk      TYPE STANDARD TABLE OF lty_vbuk,
lwa_vbuk     TYPE lty_vbuk,
lt_vbap      TYPE STANDARD TABLE OF lty_vbap,
lwa_vbap     TYPE lty_vbap,
lt_vbfa      TYPE STANDARD TABLE OF lty_vbfa,
lt_tvakt     TYPE STANDARD TABLE OF tvakt,
lwa_tvakt    TYPE tvakt,
lwa_vbfa     TYPE lty_vbfa,
lv_index     TYPE i,
lv_status    TYPE flag,
lt_tvarvc    TYPE rsdsselopt_t,
lwa_tvarvc   TYPE LINE OF rsdsselopt_t,
lv_from_date TYPE sy-datum,
lwa_so_list  TYPE yss_s_so_list.

* To fill lt_r_date
IF im_date IS INITIAL.
*If im_date is initial, Get no. of days from TVARVC table
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_c_days
IMPORTING
ex_range       = lt_tvarvc.
READ TABLE lt_tvarvc INTO lwa_tvarvc INDEX 1.
IF sy-subrc EQ 0.
lv_from_date = sy-datum - lwa_tvarvc-low.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = lv_from_date.
<lfs_date>-high = sy-datum.
ENDIF.
ELSEIF im_date-low IS NOT INITIAL AND im_date-high IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = im_date-low.
<lfs_date>-high = im_date-high.
ELSEIF im_date-low IS NOT INITIAL AND im_date-high IS INITIAL.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'EQ'.
<lfs_date>-low = im_date-low.
ELSEIF im_date-low IS INITIAL AND im_date-high IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'EQ'.
<lfs_date>-low = im_date-high.
ENDIF.

* Fill lt_r_kunnr if im_clientid is provided
IF im_clientid IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_kunnr ASSIGNING <lfs_kunnr>.
<lfs_kunnr>-sign = 'I'.
<lfs_kunnr>-option = 'EQ'.
<lfs_kunnr>-low = im_clientid.
ENDIF.

*** To get the sales area
*    TRY .
*        CALL METHOD yss_cl_sd_process=>get_sales_area
*          EXPORTING
*            im_kunnr      = im_clientid
*            im_vwerk      = im_werks
*          IMPORTING
*            ex_sales_area = ls_sales_area.
*      CATCH ycx_ss_exception INTO lo_exception.
*        lo_exception->log_exception( ).
*        RETURN.
*    ENDTRY.
* Get the sales organizations from tvarvc entries
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_sales_org
IMPORTING
ex_range       = lt_r_vkorg.

* To get the sales orders from VBAK
SELECT vbeln
audat
vdatu
bstnk
bstdk
auart
vbtyp FROM vbak
INTO TABLE lt_vbak         "UP TO 100 ROWS
WHERE erdat IN lt_r_date
AND kunnr IN lt_r_kunnr
*                  AND bstzd EQ ls_sales_area-vwerk
AND bstzd EQ im_werks
AND vkorg IN lt_r_vkorg
*                  AND vkorg EQ ls_sales_area-vkorg
*                  AND vtweg EQ ls_sales_area-vtweg
*                  AND spart EQ ls_sales_area-spart
ORDER BY erdat DESCENDING erzet DESCENDING
%_HINTS ORACLE 'INDEX("VBAK" "VBAK~YSS")' .
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
*      RETURN.
ENDIF.

IF lt_vbak[] IS NOT INITIAL.
* Get SalesOrder status from vbuk
IF im_status IS NOT INITIAL.                                "IM_ST
APPEND INITIAL LINE TO lt_r_lfgsk ASSIGNING FIELD-SYMBOL(<lfs_lf
<lfs_lfgsk>-sign = 'I'.
<lfs_lfgsk>-option = 'EQ'.
<lfs_lfgsk>-low = im_status.
ENDIF.
SELECT vbeln lfgsk FROM vbuk
INTO TABLE lt_vbuk
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln AND
lfgsk IN lt_r_lfgsk.
IF sy-subrc EQ 0.
SORT lt_vbuk BY vbeln.
*  If im_status is given, Delete vbeln which are not in vbuk, inorder to
IF im_status IS NOT INITIAL.
LOOP AT lt_vbak INTO lwa_vbak.
READ TABLE lt_vbuk TRANSPORTING NO FIELDS WITH KEY vbeln = l
IF sy-subrc NE 0.
DELETE TABLE lt_vbak FROM lwa_vbak.
ENDIF.
ENDLOOP.
ENDIF.
ELSEIF im_status IS NOT INITIAL.
LOOP AT lt_vbak INTO lwa_vbak .
DELETE lt_vbak.
ENDLOOP.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_data_with_the_given_status.
ENDIF.

*    Fetch the customer partner details
ls_selopt-sign = 'I'.
ls_selopt-option = 'EQ'.
ls_selopt-low = yss_cl_type_pool=>yss_c_ag. APPEND ls_selopt TO lr
ls_selopt-low = yss_cl_type_pool=>yss_c_we. APPEND ls_selopt TO lr
ls_selopt-low = yss_cl_type_pool=>yss_c_z1. APPEND ls_selopt TO lr
ls_selopt-low = yss_cl_type_pool=>yss_c_z2. APPEND ls_selopt TO lr
SELECT vbeln parvw kunnr adrnr FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND parvw IN lr_selopt.
IF sy-subrc EQ 0.
SORT lt_vbpa BY vbeln parvw.
*  Fetch the partner names
SELECT addrnumber name1 name2 FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.

* Get sales order item price details.
SELECT vbeln posnr netwr mwsbp FROM vbap
INTO TABLE lt_vbap
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbap BY vbeln.
ENDIF.

*Get Delivery order and billing order for the corresponding SO
SELECT vbelv
posnv
vbeln
posnn
vbtyp_n FROM vbfa
INTO TABLE lt_vbfa
FOR ALL ENTRIES IN lt_vbak
WHERE vbelv EQ lt_vbak-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbfa BY vbelv.
ENDIF.

*  Fetch the sales document type text
SELECT * FROM tvakt
INTO TABLE lt_tvakt
FOR ALL ENTRIES IN lt_vbak
WHERE auart = lt_vbak-auart AND
spras = sy-langu.
IF sy-subrc EQ 0.
SORT lt_tvakt BY auart.
ENDIF.
ENDIF.

*To populate ex_so_list
LOOP AT lt_vbak INTO lwa_vbak.
lwa_so_list-sales_doc = lwa_vbak-vbeln.
lwa_so_list-doc_date = lwa_vbak-audat.
lwa_so_list-req_del_date = lwa_vbak-vdatu.
lwa_so_list-po_num = lwa_vbak-bstnk.
lwa_so_list-po_date = lwa_vbak-bstdk.
lwa_so_list-doc_type = lwa_vbak-auart.
IF lwa_vbak-vbtyp = yss_cl_type_pool=>yss_c_c.     " C - Order
lwa_so_list-doc_category = 'Order'(030).
ELSEIF lwa_vbak-vbtyp = yss_cl_type_pool=>yss_c_h.    " H - Return
lwa_so_list-doc_category =  'Returns'(031).
ENDIF.

*Read sales document type text
READ TABLE lt_tvakt INTO lwa_tvakt WITH KEY auart = lwa_vbak-auart
IF sy-subrc EQ 0.
lwa_so_list-doc_type_desc = lwa_tvakt-bezei.
ENDIF.
* Read Sold to party details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss
IF sy-subrc EQ 0.
lwa_so_list-sold_to_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE lwa_adrc-name1 lwa_adrc-name2 INTO
lwa_so_list-sold_to_name.
ENDIF.
ENDIF.

* Read ship to party details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss
IF sy-subrc EQ 0.
lwa_so_list-ship_to_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE lwa_adrc-name1 lwa_adrc-name2 INTO
lwa_so_list-ship_to_name SEPARATED
ENDIF.
ENDIF.

* Read Sales person1 details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss_
IF sy-subrc EQ 0.
lwa_so_list-sales_pers_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
lwa_so_list-sales_pers_name = lwa_adrc-name1 .
ENDIF.
ENDIF.

* Read Sales person2 details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss_
IF sy-subrc EQ 0.
lwa_so_list-sales_pers_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE lwa_so_list-sales_pers_name '/' lwa_adrc-name1 INT
lwa_so_list-sales_pers_name.
SHIFT lwa_so_list-sales_pers_name LEFT DELETING LEADING '/'.
ENDIF.
ENDIF.

* Get the total amount from item table
READ TABLE lt_vbap WITH KEY vbeln = lwa_vbak-vbeln TRANSPORTING
NO FIELDS BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index.
lv_index = sy-tabix.
LOOP AT lt_vbap INTO lwa_vbap FROM lv_index.
IF lwa_vbap-vbeln NE lwa_vbak-vbeln.
EXIT.
ENDIF.
lwa_so_list-total_amt = lwa_so_list-total_amt + lwa_vbap-netwr
lwa_vbap-mwsbp.
lwa_so_list-net_amount = lwa_so_list-net_amount + lwa_vbap-net
CLEAR :lwa_vbap.
ENDLOOP.
ENDIF.
* Get Del. order and Bill. Order for the corresponding SO number
READ TABLE lt_vbfa INTO lwa_vbfa WITH KEY vbelv = lwa_vbak-vbeln B
IF sy-subrc EQ 0.
IF lwa_vbfa-vbtyp_n = yss_cl_type_pool=>yss_c_j.
lwa_so_list-del_order = lwa_vbfa-vbeln.
ELSEIF lwa_vbfa-vbtyp_n = yss_cl_type_pool=>yss_c_m.
lwa_so_list-bill_order = lwa_vbfa-vbeln.
ENDIF.
ENDIF.
* Get the salesorder status details.
READ TABLE lt_vbuk INTO lwa_vbuk WITH KEY vbeln = lwa_vbak-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
*        IF lwa_vbuk-gbstk EQ yss_cl_type_pool=>yss_c_c.
*          lwa_so_list-status = 'Billed'(005).
*          lwa_so_list-status_key = yss_cl_type_pool=>yss_c_d.         "
*        ELSEIF lwa_vbuk-lfgsk = yss_cl_type_pool=>yss_c_c.
IF lwa_vbuk-lfgsk = yss_cl_type_pool=>yss_c_c.                 "
lwa_so_list-status = 'Delivery Initiated'(006).
lwa_so_list-status_key = yss_cl_type_pool=>yss_c_c.
ELSEIF lwa_vbuk-lfgsk = yss_cl_type_pool=>yss_c_b.             "
lwa_so_list-status = 'Partial delivery Initiated'(007).
lwa_so_list-status_key = yss_cl_type_pool=>yss_c_b.
ELSEIF lwa_vbuk-lfgsk = yss_cl_type_pool=>yss_c_a.             "
lwa_so_list-status = 'Pending'(008).
lwa_so_list-status_key = yss_cl_type_pool=>yss_c_a.
ENDIF.
ENDIF.
APPEND lwa_so_list TO ex_so_list.
CLEAR lwa_so_list.
ENDLOOP.
ENDMETHOD.
FETCH_SO_DETAILS
item
METHOD fetch_so_details.
"*------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
TYPES : BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name_co    TYPE ad_name_co,
city2      TYPE ad_city2,
home_city  TYPE ad_city3,
END OF lty_adrc.
*Data Declarations
DATA: ls_order_view      TYPE order_view,
*          ls_sales_area    TYPE yss_s_sales_area,
lt_so_header       TYPE yss_cl_type_pool=>yss_tt_bapisdhd,
lwa_so_header      TYPE bapisdhd,
ls_lines           TYPE TABLE OF tline,
lt_vbeln           TYPE yss_tt_vbeln,
lwa_vbeln          TYPE LINE OF yss_tt_vbeln,
lt_so_items        TYPE yss_cl_type_pool=>yss_tt_bapisdit,
lt_partners        TYPE yss_cl_type_pool=>yss_tt_bapisdpart,
lt_conditions      TYPE yss_cl_type_pool=>yss_tt_bapisdcond,
lt_status_header   TYPE yss_cl_type_pool=>yss_tt_bapisdhdst,
lt_status_items    TYPE yss_cl_type_pool=>yss_tt_bapisditst,
*          lt_text_header TYPE yss_cl_type_pool=>YSS_TT_BAPISDTEHD,
lt_textlines       TYPE yss_cl_type_pool=>yss_tt_bapitextli,
lt_business        TYPE yss_tt_bapisdbusi,
lt_address         TYPE yss_tt_bapisdcoad,
lt_adrc            TYPE STANDARD TABLE OF lty_adrc,
lt_order_flows_out TYPE yss_tt_bapisdflow,
lt_r_vkorg         TYPE rsdsselopt_t.
*
LOOP AT im_vbeln INTO lwa_vbeln.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = lwa_vbeln
IMPORTING
output = lwa_vbeln.
APPEND lwa_vbeln TO lt_vbeln.
ENDLOOP.

** Get Sales Area
*    CALL METHOD yss_cl_sd_process=>get_sales_area
*      EXPORTING
**       im_kunnr      =
*        im_vwerk      = im_req_params-werks
*      IMPORTING
*        ex_sales_area = ls_sales_area.

* Get the sales organizations from tvarvc entries
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_sales_org
IMPORTING
ex_range       = lt_r_vkorg.

ls_order_view-header = 'X'.
ls_order_view-item = 'X'.
ls_order_view-partner = 'X'.
ls_order_view-sdcond = 'X'.
ls_order_view-text = 'X'.
ls_order_view-business = 'X'.
ls_order_view-address = 'X'.
ls_order_view-status_h = 'X'.
ls_order_view-status_i = 'X'.
ls_order_view-flow = 'X'.

* Call BAPI to get Header & Items data
CALL FUNCTION 'BAPISDORDER_GETDETAILEDLIST'
EXPORTING
i_bapi_view             = ls_order_view
*       I_MEMORY_READ           =
TABLES
sales_documents         = lt_vbeln
order_headers_out       = lt_so_header
order_items_out         = lt_so_items
order_partners_out      = lt_partners
order_conditions_out    = lt_conditions
order_statusheaders_out = lt_status_header
order_statusitems_out   = lt_status_items
*       ORDER_TEXTHEADERS_out   = lt_text_header
order_textlines_out     = lt_textlines
order_business_out      = lt_business
order_address_out       = lt_address
order_flows_out         = lt_order_flows_out.    "VBFA

* Delete inactive conditions
DELETE lt_conditions WHERE cond_type = 'ZPRO' AND condisacti = yss_c
READ TABLE lt_so_header INTO lwa_so_header INDEX 1.
*    IF sy-subrc EQ 0 AND lwa_so_header-sales_org EQ ls_sales_area-vkorg
*                         lwa_so_header-distr_chan EQ ls_sales_area-vtwe
*                         lwa_so_header-division EQ ls_sales_area-spart.
IF sy-subrc EQ 0 AND lwa_so_header-po_supplem = im_req_params-werks
IF lt_address IS NOT INITIAL.
SELECT addrnumber name_co city2 home_city FROM adrc INTO TABLE l
FOR ALL ENTRIES IN lt_address WHERE addrnumber EQ lt_address-a
IF sy-subrc EQ 0.

ENDIF.
LOOP AT lt_address ASSIGNING FIELD-SYMBOL(<lfs_address>).
READ TABLE lt_adrc INTO DATA(lwa_adrc) WITH KEY addrnumber = <
IF sy-subrc EQ 0.
<lfs_address>-name_3 = lwa_adrc-name_co.
<lfs_address>-name_4 = lwa_adrc-home_city.
ENDIF.
ENDLOOP.
ENDIF.
ex_so_header = lt_so_header.
ex_so_items = lt_so_items.
ex_partners = lt_partners.
ex_conditions = lt_conditions.
ex_textlines = lt_textlines.
ex_business = lt_business.
ex_address = lt_address.
ex_status_header = lt_status_header.
ex_status_items = lt_status_items.
ex_order_flows_out = lt_order_flows_out.
**********************************************************************Ab

*              BEGIN OF lty_billing_status,
*                vbeln    TYPE vbeln_va,
*                posnr    TYPE posnr_va,
*                billstat TYPE fksta,
*              END OF lty_billing_status,
TYPES : BEGIN OF lty_vbup,
vbeln TYPE  vbeln,
posnr TYPE posnr,
lfgsa TYPE lfgsa,
fksta TYPE fksta,
END OF lty_vbup,
BEGIN OF lty_lips,
vbeln TYPE vbeln,
posnr TYPE posnr,
vgbel TYPE vgbel,
vgpos TYPE vgpos,
END OF lty_lips.

DATA : lt_billing_status TYPE TABLE OF yss_s_sd_billing_status,
lt_vbup           TYPE TABLE OF lty_vbup,
lt_vbup_1         TYPE TABLE OF lty_vbup,
lt_lips           TYPE TABLE OF lty_lips.
IF ex_status_items IS NOT INITIAL.
SELECT vbeln
posnr
lfgsa
fksta
FROM vbup
INTO TABLE lt_vbup
FOR ALL ENTRIES IN ex_status_items
WHERE vbeln = ex_status_items-sd_doc
AND posnr = ex_status_items-itm_number AND lfgsa NE 'A'.
IF sy-subrc EQ 0.
SORT lt_vbup BY vbeln posnr.
IF lt_vbup IS NOT INITIAL.
SELECT vbeln
posnr
vgbel
vgpos
FROM lips
INTO TABLE lt_lips
FOR ALL ENTRIES IN lt_vbup
WHERE vgbel = lt_vbup-vbeln AND
vgpos = lt_vbup-posnr AND lfimg NE 0.
IF sy-subrc EQ 0.
SORT lt_lips BY vgbel vgpos.
SELECT vbeln
posnr
lfgsa
fksta
FROM vbup
INTO TABLE lt_vbup_1
FOR ALL ENTRIES IN lt_lips
WHERE vbeln = lt_lips-vbeln
AND posnr = lt_lips-posnr.
IF sy-subrc EQ 0.
DELETE lt_vbup_1 WHERE fksta EQ 'A'.
SORT lt_vbup_1 BY vbeln posnr.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
LOOP AT lt_lips ASSIGNING FIELD-SYMBOL(<lfs_lips>).
READ TABLE lt_vbup_1 ASSIGNING FIELD-SYMBOL(<lfs_vbup_1>) WITH

IF sy-subrc NE 0.
DELETE lt_lips.
ENDIF.
ENDLOOP.
LOOP AT ex_status_items ASSIGNING FIELD-SYMBOL(<lfs_stat_item>).
APPEND INITIAL LINE TO lt_billing_status ASSIGNING FIELD-SYMBO
<lfs_bill_status>-vbeln = <lfs_stat_item>-sd_doc.
<lfs_bill_status>-posnr = <lfs_stat_item>-itm_number.
READ TABLE lt_vbup ASSIGNING FIELD-SYMBOL(<lfs_vbup>) WITH KEY

IF sy-subrc EQ 0.
<lfs_bill_status>-delvstat = <lfs_vbup>-lfgsa.
READ TABLE lt_lips ASSIGNING <lfs_lips> WITH KEY vgbel = <lf

IF sy-subrc EQ 0.
READ TABLE lt_vbup_1 ASSIGNING <lfs_vbup_1> WITH KEY vbeln

IF sy-subrc EQ 0.
<lfs_bill_status>-billstat = <lfs_vbup_1>-fksta.
ENDIF.
*            ELSE.
*              <lfs_bill_status>-billstat =  <lfs_vbup>-fksta.
ENDIF.

ENDIF.
ENDLOOP.
ex_item_billing_status = lt_billing_status.
ENDIF.
**********************************************************************Ab
ELSE.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>invalid_request.
ENDIF.

ENDMETHOD.
GET_DIST_CHANNEL
item
METHOD get_dist_channel.
"*------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
* If WERKS starts with 'S' then distribution channel is 'DS' else 'DH'
CLEAR ex_vtweg.
IF im_werks(1) EQ yss_cl_type_pool=>yss_c_s.
ex_vtweg = yss_cl_type_pool=>yss_c_ds.
ELSEIF im_werks(1) EQ yss_cl_type_pool=>yss_c_k.
ex_vtweg = yss_cl_type_pool=>yss_c_dh.
ENDIF.

IF ex_vtweg IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>distribution_channel_not_found
msgv1  = ycx_ss_exception=>format( im_werks ).
ENDIF.
ENDMETHOD.
FIND_CUSTOMERS
item
METHOD find_customers.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* Narayana Raju   22.01.2019     Narayana.020119
* Narayana Raju   05.03.2019     Narayana.050319
* <Description of change>
*  Adding Plant with in the region customer data to output.
*  Changes to solve Customer name Fetching Problem in Portal Side
*-----------------------------------------------------------------------

*Local type declaration
TYPES:BEGIN OF lty_customer,
kunnr TYPE kunnr,
END OF lty_customer,
"+++Start  +++changed Narayana Raju 22.01.2019
BEGIN OF lty_customer1,
kunnr TYPE kunnr,           "Customer Number
vwerk TYPE dwerk_ext,       "Plant
END OF lty_customer1,

BEGIN OF lty_kna1,
cust_id   TYPE kunnr,       "Customer Number
land1     TYPE land1,       "Country Key
cust_name TYPE char100,       "Customer Name
regio     TYPE regio,       "Region
cust_city TYPE ort01,       "City
adrnr     TYPE adrnr,           "address number
END OF lty_kna1,

BEGIN OF lty_werks,
werks TYPE werks_d,         "Plant
land1 TYPE land1,           "Country Key
regio TYPE regio,           "Region
END OF lty_werks,

BEGIN OF lty_cust,
werks TYPE werks_d,         "Plant
kunnr TYPE kunnr,           "Customer Number
END OF lty_cust,

BEGIN OF lty_cust_op,
cust_id   TYPE kunnr,
cust_name TYPE char100,
cust_city TYPE ort01,
adrnr     TYPE adrnr,
END OF lty_cust_op,

BEGIN OF lty_adrc ,
adrnr TYPE ad_addrnum,
name1 TYPE ad_name1,
END OF lty_adrc,

"+++End +++changed Narayana Raju 22.01.2019
lty_t_customer TYPE STANDARD TABLE OF lty_customer.

*Data Declarations
DATA:lv_cust       TYPE char100,
lv_cust_temp  TYPE char100,
lv_cust_temp1 TYPE char100,
lv_cond       TYPE char100,
lv_length     TYPE i,
lv_vtweg      TYPE vtweg,
lt_customer   TYPE lty_t_customer,
*       ++Start   +++changed Narayana Raju 22.01.2019
lt_customer1  TYPE STANDARD TABLE OF lty_customer1,
lt_kna1       TYPE STANDARD TABLE OF lty_kna1,
lt_t001w      TYPE STANDARD TABLE OF lty_werks,
lt_cust_act   TYPE STANDARD TABLE OF lty_cust,
ex_cust_list1 TYPE STANDARD TABLE OF lty_cust_op, " chainges sa
lt_cust_list1 TYPE STANDARD TABLE OF lty_cust_op, " chainges sa
lt_adrc       TYPE STANDARD TABLE OF lty_adrc,
lt_adrc1      TYPE STANDARD TABLE OF lty_adrc,
ls_adrc       TYPE lty_adrc,
ls_cust_list1 TYPE lty_cust_op,
lt_cust_list  TYPE yss_tt_cust,
ls_kna1       TYPE lty_kna1,
ls_t001w      TYPE lty_werks,
ls_cust_act   TYPE lty_cust,
ls_cust_list  TYPE yss_s_cust,
lv_werks      TYPE werks_d,
lv_active     TYPE xfeld,
lt_name_city  TYPE char100,
*       ++End   +++changed Narayana Raju 22.01.2019
*         lv_status     TYPE char1,
lo_exception  TYPE REF TO ycx_ss_exception.


**Field-Symbol
FIELD-SYMBOLS : <lfs_ex> TYPE yss_s_cust.
CLEAR: ex_cust_list.
"<<<Start 25/04/19 Abhishek
DATA(lv_customer) = im_customer.

IF strlen( lv_customer ) > 18.   "like operator can hold maximum upt
lv_customer = lv_customer+0(18).
ENDIF.
">>>>>>>End 25/04/19 Abhishek
CONCATENATE '%' lv_customer '%' INTO lv_cust.

* Get the distribution channel based on the WERKS
CALL METHOD get_dist_channel
EXPORTING
im_werks = im_req_params-werks
IMPORTING
ex_vtweg = lv_vtweg.
IF lv_vtweg IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>distribution_channel_not_found
msgv1  = ycx_ss_exception=>format( im_req_params-werks ).
ENDIF.

IF lv_customer CA '123456789'.
lv_cust_temp1 = lv_customer.
* "Incase the input contains zeroes first
SHIFT lv_cust_temp1 LEFT DELETING LEADING '0'.
lv_length = strlen( lv_cust_temp1 ).
**Get list of customers based on customer no
SELECT DISTINCT kunnr
FROM knvv
INTO TABLE lt_customer
WHERE kunnr LIKE lv_cust
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg EQ lv_vtweg
AND spart EQ yss_cl_type_pool=>yss_c_md
AND vwerk EQ im_req_params-werks.
IF sy-subrc EQ 0.
LOOP AT lt_customer INTO lv_cust.
lv_cust_temp = lv_cust.
SHIFT lv_cust_temp LEFT DELETING LEADING '0'.
IF lv_cust_temp+0(lv_length) NE lv_cust_temp1.
DELETE lt_customer WHERE kunnr = lv_cust.
CLEAR lv_cust.
MODIFY lt_customer FROM lv_cust.
ENDIF.
CLEAR : lv_cust_temp.
ENDLOOP.
DELETE lt_customer WHERE kunnr EQ space.
lv_cond = 'kunnr EQ lt_customer-kunnr'(010).
ENDIF.
ELSE.
lv_cust_temp = lv_customer.
TRANSLATE lv_cust_temp TO UPPER CASE.
IF lv_cust_temp CA sy-abcde.
**Get list of customers based on name
SELECT DISTINCT kunnr
FROM knvv
INTO TABLE lt_customer
WHERE vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg  EQ lv_vtweg
AND spart EQ yss_cl_type_pool=>yss_c_md
AND vwerk EQ im_req_params-werks.
IF sy-subrc EQ 0 AND lt_customer IS NOT INITIAL.
TRANSLATE lv_cust TO UPPER CASE.
lv_cond = 'kunnr = lt_customer-kunnr and ( mcod1 like lv_cust
ENDIF.
ENDIF.
ENDIF.

IF lt_customer IS NOT INITIAL.
SELECT kunnr
name1
ort01 "+++changed Sai Kiran 21.02.2019
adrnr
FROM kna1
INTO TABLE ex_cust_list1
FOR ALL ENTRIES IN lt_customer
WHERE (lv_cond).
IF sy-subrc EQ 0.
*       Fetching name in adrc table because full name is not updated in
SELECT addrnumber
name1
FROM adrc
INTO TABLE lt_adrc1
FOR ALL ENTRIES IN ex_cust_list1
WHERE addrnumber = ex_cust_list1-adrnr.
IF sy-subrc EQ 0.
SORT : lt_adrc1 BY adrnr.     "+++ Changed 05.03.2018
ENDIF.
ENDIF.
ENDIF.

*** >>> Start +++changed Sai kiran 21.02.2019
LOOP AT ex_cust_list1 INTO ls_cust_list1.
APPEND INITIAL LINE TO ex_cust_list ASSIGNING <lfs_ex>.
<lfs_ex>-cust_id = ls_cust_list1-cust_id.

READ TABLE lt_adrc1 INTO ls_adrc
WITH KEY adrnr = ls_cust_list1-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE
ls_adrc-name1 '-' ls_cust_list1-cust_city
INTO <lfs_ex>-cust_name.
CONDENSE <lfs_ex>-cust_name.
ENDIF.
ENDLOOP.
*** >>> end +++changed Sai kiran 21.02.2019

*** >>> Start +++changed Narayana Raju 22.01.2019
*   Fetching customers based on plant value
SELECT DISTINCT kunnr
vwerk
FROM knvv
INTO TABLE lt_customer1
WHERE vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg EQ lv_vtweg
AND spart EQ yss_cl_type_pool=>yss_c_md
AND vwerk NE im_req_params-werks.

IF sy-subrc EQ 0.
SORT lt_customer1 BY kunnr
vwerk.
ENDIF.

*   Fetch Plant details
SELECT werks             "Plant
land1             "Country Key
regio             "Region
FROM t001w
INTO TABLE lt_t001w
WHERE werks = im_req_params-werks.
IF sy-subrc EQ 0.
SORT lt_t001w BY werks
land1.
READ TABLE lt_t001w INTO ls_t001w INDEX 1.
ENDIF.

IF lt_customer1 IS NOT INITIAL AND ls_t001w-regio IS NOT INITIAL.

*     Fetch customer details
SELECT kunnr                     "Customer Number
land1                     "Country Key
name1                     "Customer Name
regio                     "Region
ort01                     "City
adrnr                     "Address Number
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_customer1
WHERE kunnr = lt_customer1-kunnr
AND regio = ls_t001w-regio.
IF sy-subrc EQ 0.
SORT lt_kna1 BY cust_id
land1.
*       Fetching name in adrc table because full name is not updated in
SELECT addrnumber
name1
FROM adrc INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_kna1
WHERE addrnumber = lt_kna1-adrnr.
IF sy-subrc EQ 0.
SORT : lt_adrc BY adrnr.
ENDIF.
ENDIF.
ENDIF.

*   Fetching data to include the plant region data.
SELECT SINGLE werks                "Plant
active               "Mark as Active
FROM yss_cust_region
INTO (lv_werks , lv_active)
WHERE werks = im_req_params-werks.
IF sy-subrc NE 0.
CLEAR: lv_werks,
lv_active.
ENDIF.

*   Fetching data to avoid from output.
SELECT werks                       "Plant
kunnr                       "Customer
FROM yss_cust_act
INTO TABLE lt_cust_act
WHERE werks = im_req_params-werks.
IF sy-subrc EQ 0.
SORT lt_cust_act BY werks
kunnr.
ENDIF.


IF lv_werks EQ im_req_params-werks
AND lv_active = abap_true
AND ls_t001w-land1 = 'IN'.
*     Validating search keyword in internal table.
IF lv_customer CA '1234567890'.
LOOP AT lt_kna1 INTO ls_kna1.
IF ls_kna1-cust_id CS lv_customer.
ls_cust_list-cust_id    =  ls_kna1-cust_id.
READ TABLE lt_adrc INTO ls_adrc WITH KEY adrnr = ls_kna1-adr
IF sy-subrc EQ 0.
*            ls_cust_list-cust_name  =  ls_kna1-cust_name.
CONCATENATE ls_adrc-name1 '-' ls_kna1-cust_city INTO ls_cu
CONDENSE ls_cust_list-cust_name.
ENDIF.
APPEND ls_cust_list TO lt_cust_list.
ENDIF.
ENDLOOP.
ELSE.
LOOP AT lt_kna1 INTO ls_kna1.
IF ls_kna1-cust_name CS lv_customer.
ls_cust_list-cust_id    =  ls_kna1-cust_id.
READ TABLE lt_adrc INTO ls_adrc WITH KEY adrnr = ls_kna1-adr
IF sy-subrc EQ 0.
*            ls_cust_list-cust_name  =  ls_kna1-cust_name.
CONCATENATE ls_adrc-name1 '-' ls_kna1-cust_city INTO ls_cu
CONDENSE ls_cust_list-cust_name.
ENDIF.
APPEND ls_cust_list TO lt_cust_list.
ENDIF.
ENDLOOP.
ENDIF.
ENDIF.
APPEND LINES OF lt_cust_list TO ex_cust_list.
*   To exclude the customer data present in yss_cust_act table
LOOP AT lt_cust_act INTO ls_cust_act.
DELETE ex_cust_list WHERE cust_id = ls_cust_act-kunnr.
ENDLOOP.

*   Deleting duplicate entries
IF ex_cust_list IS NOT INITIAL.
SORT ex_cust_list BY cust_id.
DELETE ADJACENT DUPLICATES FROM ex_cust_list COMPARING cust_id.
ENDIF.
*** <<< End +++changed Narayana Raju 22.01.2019

IF ex_cust_list IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>customer_details_not_found.
ENDIF.
ENDMETHOD.
VALIDATE_CUSTOMER
item
METHOD validate_customer.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
* Local data declarations
DATA : lv_vtweg          TYPE vtweg,
lr_range_sale_org TYPE rsdsselopt_t,
lr_range_div      TYPE rsdsselopt_t,
lo_exception      TYPE REF TO ycx_ss_exception.

*Get TVARVC entry for sales organization (eg : RMSS/RMSD)
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_sales_org            "Rev
IMPORTING
ex_range       = lr_range_sale_org.
*Get TVARVC entry for  division (eg : MD)
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_c_div_so            "Revi
IMPORTING
ex_range       = lr_range_div.

* Validate whether the customer exists in the same sales area plant id
SELECT vkorg
vtweg
spart
vwerk
FROM knvv
INTO TABLE ex_sales_area
WHERE kunnr EQ im_customer
AND vkorg IN lr_range_sale_org
AND spart IN lr_range_div
AND vwerk EQ im_werks.
IF sy-subrc EQ 0.
ex_status = yss_cl_type_pool=>yss_c_s.
ELSE.
ex_status = yss_cl_type_pool=>yss_c_e.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>invalid_customer
msgv1  = ycx_ss_exception=>format( im_customer ).
ENDIF.
ENDMETHOD.
GET_SALES_AREA
item
METHOD get_sales_area.
*---------------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*---------------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited            *
* Created by  : Abhishek T                                            *
* Created on  : 17-Feb-2018                                           *
* Description : Method to get sales area,
*               distb. channel,division and plant                     *
*---------------------------------------------------------------------*
*                       C H A N G E    L O G
*---------------------------------------------------------------------*
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*---------------------------------------------------------------------*
DATA :  lv_status TYPE char1,
lv_vtweg  TYPE vtweg.
CLEAR ex_sales_area.
*Fetch Sales area details

IF im_kunnr IS NOT INITIAL.
CLEAR ex_sales_area.
*Validate customer
CALL METHOD yss_cl_sd_process=>validate_customer
EXPORTING
im_customer   = im_kunnr
im_werks      = im_vwerk
IMPORTING
ex_sales_area = ex_sales_area_t
ex_status     = lv_status.
IF lv_status EQ yss_cl_type_pool=>yss_c_e.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>salesarea_not_found
msgv1  = ycx_ss_exception=>format( im_vwerk ).
ENDIF.
ENDIF.

*Get default distribution channel
CALL METHOD yss_cl_sd_process=>get_dist_channel
EXPORTING
im_werks = im_vwerk
IMPORTING
ex_vtweg = lv_vtweg.                     "Disptribution channel

IF ex_sales_area_t IS NOT INITIAL.
READ TABLE ex_sales_area_t INTO ex_sales_area WITH KEY vtweg = lv_
IF sy-subrc NE 0.
READ TABLE ex_sales_area_t INTO ex_sales_area INDEX 1.
ENDIF.
ENDIF.

* Set plant specifivc default sales area
IF lv_vtweg IS NOT INITIAL AND ex_sales_area IS INITIAL.
ex_sales_area-vkorg = yss_cl_type_pool=>yss_c_rmss.   "Sales organ
ex_sales_area-spart = yss_cl_type_pool=>yss_c_md.     "Division
ex_sales_area-vtweg = lv_vtweg.                       " Distributi
ex_sales_area-vwerk = im_vwerk.                       "Plant
ENDIF.

* Raise exception if no sales area is determined
IF ex_sales_area IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>distribution_channel_not_found
msgv1  = ycx_ss_exception=>format( im_vwerk ).
ENDIF.
ENDMETHOD.
GET_ADRESS_DETAILS
item
METHOD get_adress_details.
*---------------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*---------------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited            *
* Created by  : Abhishek T                                            *
* Created on  : 17-Feb-2018                                           *
* Description : Method to get address details for customer
*---------------------------------------------------------------------*
*                       C H A N G E    L O G " Kishore.ssk
*---------------------------------------------------------------------*
* <sapabap> | <02.05.2018> | <sapabap.020518>
* <Provision to Add Name2, Street2 and Street3 while adding customer>
*---------------------------------------------------------------------*
*                       C H A N G E    L O G
*---------------------------------------------------------------------*
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*---------------------------------------------------------------------*

TYPES : BEGIN OF lty_address,
cust_id       TYPE  kunnr,
country       TYPE land1_gp,
cust_name     TYPE name1_gp,
name2	        TYPE name2_gp, " Name 2 ++sapabap.020518
city          TYPE  ort01_gp,
post_code     TYPE pstlz,
region        TYPE regio,
sortl_fld     TYPE sortl,
street        TYPE stras_gp,
telefone      TYPE telf1,
one_time_cust TYPE xcpdk,
addr_number   TYPE adrnr,
district      TYPE ort02,
END OF lty_address.

DATA :  lo_exception  TYPE REF TO ycx_ss_exception,
ls_sales_area TYPE yss_s_sales_area,
lt_banks      TYPE yss_tt_bank_details,
ls_address    TYPE lty_address.

*Initialize Export parameter
CLEAR ex_cust_address.

*Validate customer
CALL METHOD yss_cl_sd_process=>get_sales_area
EXPORTING
im_kunnr      = im_kunnr
im_vwerk      = im_vwerk
IMPORTING
ex_sales_area = ls_sales_area.
IF ls_sales_area IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>salesarea_not_found.
ENDIF.
*Fetch address details
SELECT SINGLE kunnr
land1
name1
name2  " Name 2
ort01
pstlz
regio
sortl
stras
telf1
xcpdk    "+++GANGADDHAR20180503  One time customer
adrnr
ort02
FROM kna1
INTO ls_address
WHERE kunnr = im_kunnr.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>address_not_found
msgv1  = ycx_ss_exception=>format( im_kunnr ).
ELSE.
MOVE-CORRESPONDING ls_address TO ex_cust_address.
ENDIF.

*  Fetch ship-to-party details
SELECT SINGLE kunn2 FROM knvp
INTO ex_cust_address-ship_id
WHERE kunnr EQ im_kunnr
AND vkorg EQ ls_sales_area-vkorg
AND vtweg EQ ls_sales_area-vtweg
AND spart EQ ls_sales_area-spart
AND parvw EQ yss_cl_type_pool=>yss_c_we.
IF sy-subrc EQ 0.
SELECT SINGLE name1 FROM kna1
INTO ex_cust_address-ship_name
WHERE kunnr EQ ex_cust_address-ship_id.
IF sy-subrc EQ 0.
* Do nothing
ENDIF.
ENDIF.
*House number
SELECT SINGLE house_num1
str_suppl1
str_suppl2
FROM adrc
INTO  (ex_cust_address-house_num,
ex_cust_address-street2, ex_cust_address-street3)
WHERE addrnumber = ex_cust_address-addr_number.

*Email Id
SELECT SINGLE smtp_addr
FROM adr6
INTO ex_cust_address-email
WHERE addrnumber = ex_cust_address-addr_number.
IF sy-subrc NE 0.
ENDIF.

*Credit Limit details
SELECT SINGLE klimk
FROM knkk
INTO ex_cust_address-credit_limit
WHERE kunnr = im_kunnr.
IF sy-subrc NE 0.
ENDIF.

*Customer sales data
SELECT SINGLE loevm   "Active or inactive customer flag
kdgrp   "Customer group eg : AD -Authorized dealer
FROM knvv
INTO (ex_cust_address-del_flag,
ex_cust_address-cust_grp)
WHERE kunnr = im_kunnr AND
vkorg = ls_sales_area-vkorg AND
vtweg = ls_sales_area-vtweg AND
spart = ls_sales_area-spart AND
vwerk = ls_sales_area-vwerk.
IF sy-subrc EQ 0.
*Customer group text
SELECT SINGLE ktext
FROM t151t
INTO ex_cust_address-cust_grp_desc
WHERE spras = yss_cl_type_pool=>yss_c_e AND
kdgrp = ex_cust_address-cust_grp.
IF ex_cust_address-del_flag EQ abap_true.
ex_cust_address-cust_status = yss_cl_type_pool=>yss_c_inactive."
ELSE.
ex_cust_address-cust_status = yss_cl_type_pool=>yss_c_active."'A
ENDIF.
ELSE.
ENDIF.

*State
SELECT SINGLE bezei
INTO ex_cust_address-state
FROM t005u WHERE spras EQ yss_cl_type_pool=>yss_c_e AND
bland EQ ex_cust_address-region    AND
land1 EQ ex_cust_address-country.
IF sy-subrc EQ 0.
ENDIF.

*Bank details
SELECT banks  "Bank country key eg : IN
bankl  "Bank Keys IFSC code
bankn  "Account number
FROM knbk
INTO TABLE lt_banks
WHERE kunnr = im_kunnr.
IF sy-subrc EQ 0.
ex_cust_address-bank_details = lt_banks.
ENDIF.
ENDMETHOD.
GET_COMPLIANCE
item
METHOD get_compliance.
*---------------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*---------------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited            *
* Created By  : Abhishek T                                            *
* Created On  : 19-Feb-2018                                           *
* Description : Method To Get Compliance Details
*---------------------------------------------------------------------*
*                       C H A N G E    L O G
*---------------------------------------------------------------------*
* <Changed By> | <Changed On> | <Change Id> Like Username.ddmmyy
* <Description Of Change>
*---------------------------------------------------------------------*

DATA :  lv_1ilstno   TYPE j_1ilstno,
lv_1ipanno   TYPE j_1ipanno,
lv_stcd3     TYPE stcd3,
lo_exception TYPE REF TO ycx_ss_exception.

*Initilize export parameter
CLEAR ex_cust_compliance.

*Validate customer
TRY.
CALL METHOD yss_cl_sd_process=>validate_customer
EXPORTING
im_customer = im_kunnr
im_werks    = im_vwerk.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>invalid_customer
msgv1  = ycx_ss_exception=>format( im_kunnr ).
ENDTRY.

*Fetch GSTIN from KNA1
SELECT SINGLE stcd3
FROM kna1
INTO lv_stcd3
WHERE kunnr = im_kunnr.
IF sy-subrc EQ 0.
ex_cust_compliance-gstin = lv_stcd3.
ENDIF.

*Fetch Sales Tax Number and PAN number from J_1IMOCUST table
SELECT SINGLE j_1ilstno
j_1ipanno
FROM j_1imocust
INTO (lv_1ilstno,lv_1ipanno)
WHERE kunnr = im_kunnr.
IF sy-subrc EQ 0.
ex_cust_compliance-lst_no = lv_1ilstno.
ex_cust_compliance-pan_no = lv_1ipanno.
ENDIF.

*Raise exception if get no values
IF ex_cust_compliance IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
msgty  = yss_cl_type_pool=>yss_c_w
textid = ycx_ss_exception=>compliance_not_found
msgv1  = ycx_ss_exception=>format( im_kunnr ).
ENDIF.
ENDMETHOD.
FIND_MATERIAL
item
METHOD find_material.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
"Local Declarations
TYPES:BEGIN OF lty_mat_list,
matnr TYPE matnr,
meins TYPE meins,
END OF lty_mat_list.
DATA:lv_mat      TYPE char40,
lt_material TYPE TABLE OF lty_mat_list,
lt_mat_list TYPE TABLE OF lty_mat_list,
ls_mat_list TYPE lty_mat_list.
*         lo_exception TYPE REF TO ycx_ss_exception.

FIELD-SYMBOLS:<lfs_mat_list> TYPE yss_s_mat.
CLEAR: ex_mat_list.

CONCATENATE '%' im_material '%' INTO lv_mat.
TRANSLATE lv_mat TO UPPER CASE.

"Fectch list of materials
SELECT matnr maktx
FROM makt
INTO TABLE ex_mat_list
WHERE ( matnr LIKE lv_mat OR
maktg LIKE lv_mat )
AND spras EQ 'E'.
IF sy-subrc EQ 0 AND ex_mat_list IS NOT INITIAL.
SELECT matnr FROM marc
INTO TABLE lt_material
FOR ALL ENTRIES IN ex_mat_list
WHERE matnr = ex_mat_list-mat_num
AND werks = im_req_params-werks.
IF sy-subrc EQ 0 AND lt_material IS NOT INITIAL.
SELECT matnr meins FROM mara
INTO TABLE lt_mat_list
FOR ALL ENTRIES IN lt_material
WHERE matnr EQ lt_material-matnr.
IF sy-subrc EQ 0.
SORT lt_mat_list BY matnr.
ENDIF.
ENDIF.
ELSE.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>material_not_found
msgv1  = ycx_ss_exception=>format( im_material )
msgv2  = ycx_ss_exception=>format( im_req_params-werks ).
ENDIF.
CLEAR  ls_mat_list.                                               "R
LOOP AT ex_mat_list ASSIGNING <lfs_mat_list>.
READ TABLE lt_mat_list INTO ls_mat_list WITH KEY matnr = <lfs_mat_
IF sy-subrc EQ 0.
<lfs_mat_list>-uom = ls_mat_list-meins.
ELSE.
CLEAR <lfs_mat_list>.
*        DELETE ex_mat_list WHERE mat_num EQ <lfs_mat_list>-mat_num.
ENDIF.
ENDLOOP.
IF ex_mat_list IS NOT INITIAL.
DELETE ex_mat_list WHERE mat_num IS INITIAL.
ENDIF.
ENDMETHOD.
GET_CUST_INCOTERMS
item
METHOD get_cust_incoterms.
*---------------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*---------------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited            *
* Created By  : Abhishek T                                            *
* Created On  : 22-Feb-2018                                           *
* Description : Method To Get Customer Incoterms
*---------------------------------------------------------------------*
*                       C H A N G E    L O G
*---------------------------------------------------------------------*
* <Changed By> | <Changed On> | <Change Id> Like Username.ddmmyy
* <Description Of Change>
*---------------------------------------------------------------------*
TYPES :  BEGIN OF zterm_desc,
zterm TYPE dzterm,
text1 TYPE text1_052,
END OF zterm_desc.

DATA : ls_sales_area TYPE yss_s_sales_area,
*           lt_sales_area TYPE yss_tt_sales_area,
lo_exception  TYPE REF TO ycx_ss_exception,
lv_inco1      TYPE inco1,
lv_zterm      TYPE dzterm,
ls_tvzbt      TYPE zterm_desc,
ls_zterm_desc TYPE zterm_desc.

CLEAR : ex_incoterms.
TRY.
*Method to get sales area, distb. channel,division and plant
CALL METHOD yss_cl_sd_process=>get_sales_area
EXPORTING
im_kunnr      = im_customer
im_vwerk      = im_werks
IMPORTING
ex_sales_area = ls_sales_area.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
RETURN.
ENDTRY.
*Fetch incoterms and payment terms for customer from KNVV
SELECT SINGLE inco1 zterm
FROM knvv
INTO (lv_inco1,lv_zterm) WHERE kunnr =  im_customer AND
vkorg =  ls_sales_area-vkorg AND
vtweg =  ls_sales_area-vtweg AND
spart =  ls_sales_area-spart. "ex_inc
IF sy-subrc EQ 0.
ex_incoterms-inco_term = lv_inco1.
ex_incoterms-pay_term = lv_zterm.
ENDIF.
*Fetch payment term description from TVZBT table
SELECT SINGLE
zterm
vtext
FROM tvzbt
INTO ls_tvzbt
WHERE zterm EQ lv_zterm AND
spras EQ yss_cl_type_pool=>yss_c_e.
IF sy-subrc EQ 0.
ls_zterm_desc-zterm = ls_tvzbt-zterm.
ls_zterm_desc-text1 = ls_tvzbt-text1.
APPEND ls_zterm_desc TO ex_incoterms-payterm_desc.
ENDIF.

IF ex_incoterms IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>inco_not_found
msgv1  = ycx_ss_exception=>format( im_customer ).
ENDIF.
ENDMETHOD.
GET_MATERIAL_PRICE
item
METHOD get_material_price.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
DATA:lv_vtweg TYPE vtweg,
lv_pltyp TYPE pltyp,
lv_knumh TYPE knumh.

CLEAR:ex_price.
* Get the distribution channel based on the WERKS
CALL METHOD get_dist_channel
EXPORTING
im_werks = im_req_params-werks
IMPORTING
ex_vtweg = lv_vtweg.
IF lv_vtweg IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>distribution_channel_not_found
msgv1  = ycx_ss_exception=>format( im_req_params-werks ).
ENDIF.
CASE lv_vtweg.
WHEN yss_cl_type_pool=>yss_c_dh.
SELECT SINGLE knumh FROM a817
INTO lv_knumh
WHERE kappl = 'V'
AND kschl = 'ZPRO'
AND kunwe EQ im_customer
AND vtweg EQ lv_vtweg
AND matnr EQ im_material
AND datbi GE sy-datum
AND datab LE sy-datum.
IF sy-subrc EQ 0.
**Do Notinng
ENDIF.
WHEN yss_cl_type_pool=>yss_c_ds.
SELECT SINGLE pltyp
FROM knvv
INTO lv_pltyp
WHERE kunnr EQ im_customer
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg EQ lv_vtweg
AND spart EQ yss_cl_type_pool=>yss_c_md
AND vwerk EQ im_req_params-werks.
IF sy-subrc EQ 0.
SELECT SINGLE knumh
FROM a701
INTO lv_knumh
WHERE kappl = 'V'
AND kschl = 'ZPRO'
AND pltyp EQ lv_pltyp
AND matnr EQ im_material
AND datbi GE sy-datum
AND datab LE sy-datum.
IF sy-subrc EQ 0.
**Do Notinng
ENDIF.
ENDIF.
ENDCASE.
IF lv_knumh IS NOT INITIAL.
SELECT SINGLE kbetr
FROM konp
INTO ex_price
WHERE knumh EQ lv_knumh.
ENDIF.
ENDMETHOD.
GET_SCHEMES
item
METHOD get_schemes.
*---------------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*---------------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited            *
* Created by  : Abhishek T                                            *
* Created on  : 19-Feb-2018                                           *
* Description : Method to get scheme details for particular customer
*---------------------------------------------------------------------*
*                       C H A N G E    L O G
*---------------------------------------------------------------------*
* <Changed by> | Ch.Gangadhar
* <Changed on> | 10.04.2018
* Description  | Changed the logic from table A304 to A971 and
*                structural level changes
*---------------------------------------------------------------------*
TYPES : lty_r_matnr TYPE RANGE OF matnr,
BEGIN OF lty_knumh,
knumh TYPE knumh,
konwa TYPE konwa,
END OF lty_knumh,
BEGIN OF lty_304,
matnr TYPE matnr,
knumh TYPE knumh,
END OF lty_304,
BEGIN OF lty_mvke,
matnr TYPE matnr,
vkorg TYPE vkorg,
vtweg TYPE vtweg,
provg TYPE provg,
END OF lty_mvke,
BEGIN OF lty_marc,
matnr TYPE matnr,
werks TYPE werks_d,
END OF lty_marc,
BEGIN OF lty_makt,
matnr TYPE matnr,
maktx TYPE maktx,
END OF lty_makt,
BEGIN OF lty_konp,
knumh	   TYPE knumh,
kopos    TYPE kopos,
kzbzg    TYPE kzbzg,
kstbm	   TYPE kstbm,
konms    TYPE konms,
kbetr	   TYPE kbetr_kond,
konwa    TYPE konwa,
loevm_ko TYPE loevm_ko,
END OF lty_konp,
BEGIN OF lty_konm,
knumh	TYPE knumh,
kstbm	TYPE kstbm,
kbetr	TYPE kbetr_kond,
konwa TYPE konwa,
END OF lty_konm.

DATA :
*Internal table
***      lt_304          TYPE TABLE OF lty_304,
lt_knumh        TYPE TABLE OF lty_knumh,
lt_konm         TYPE TABLE OF lty_konm,
lt_konm_temp    TYPE TABLE OF lty_konm,
lt_konp         TYPE TABLE OF lty_konp,
lt_makt         TYPE TABLE OF lty_makt,
lt_schemes1     TYPE yss_tt_pro,
lt_a971         TYPE STANDARD TABLE OF a971,
lt_mvke         TYPE STANDARD TABLE OF lty_mvke,
lt_marc         TYPE STANDARD TABLE OF lty_marc,
lt_tvprt        TYPE STANDARD TABLE OF tvprt,
*Ranges
lr_matnr        TYPE lty_r_matnr,
lr_kappl        TYPE rsdsselopt_t,
lr_kschl        TYPE rsdsselopt_t,
*Work areas
ls_matnr        TYPE LINE OF lty_r_matnr,
ls_sales_area   TYPE yss_s_sales_area,
ls_schemes      TYPE yss_s_schemes,
ls_konm         TYPE lty_konm,
ls_konp         TYPE lty_konp,
ls_knumh        TYPE lty_knumh,
ls_schemes_temp TYPE yss_s_pro,
*class object
lo_exception    TYPE REF TO ycx_ss_exception.

FIELD-SYMBOLS : <lfs_matnr> TYPE matnr,
<lfs_makt>  TYPE lty_makt,
<lfs_konp>  TYPE lty_konp,
***                    <lfs_a305>  TYPE lty_304,
<lfs_knumh> TYPE lty_knumh.

* To check customer validation
*    TRY .
*        CALL METHOD yss_cl_sd_process=>validate_customer
*          EXPORTING
*            im_customer = im_kunnr
*            im_werks    = im_werks.
*      CATCH ycx_ss_exception INTO lo_exception.
*        lo_exception->log_exception( ).
*        RAISE EXCEPTION TYPE ycx_ss_exception
*          EXPORTING
*            textid = ycx_ss_exception=>invalid_customer
*            msgv1  = ycx_ss_exception=>format( im_kunnr ).
*        RETURN.
*    ENDTRY.

IF im_matnr_tt IS NOT INITIAL.
LOOP AT im_matnr_tt ASSIGNING <lfs_matnr>.
ls_matnr-low = <lfs_matnr>.
ls_matnr-sign = 'I'.
ls_matnr-option = 'EQ'.
APPEND ls_matnr TO lr_matnr.
ENDLOOP.
ENDIF.

** To get Sales area
TRY .
CALL METHOD yss_cl_sd_process=>get_sales_area
EXPORTING
*           im_kunnr      = im_kunnr
im_vwerk      = im_werks
IMPORTING
ex_sales_area = ls_sales_area.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
RETURN.
ENDTRY.
*To Get TVARVC entries
TRY .
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_c_kappl
IMPORTING
ex_range       = lr_kappl.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
RETURN.
ENDTRY.
*To Get TVARVC entries
TRY.
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_c_kschl
IMPORTING
ex_range       = lr_kschl.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
RETURN.
ENDTRY.

****Fetch record from A305
***    SELECT matnr knumh FROM a304
***             INTO TABLE lt_304
***             WHERE kappl IN lr_kappl AND
****                   kschl IN lr_kschl AND
***                   vkorg = ls_sales_area-vkorg AND
***                   vtweg = ls_sales_area-vtweg AND
****                   kunnr = im_kunnr AND
***                   matnr IN lr_matnr.

* Fetch data from table A971
SELECT * FROM a971 INTO TABLE lt_a971
WHERE kappl IN lr_kappl
AND vkorg EQ ls_sales_area-vkorg
AND datab LE sy-datum
AND datbi GE sy-datum.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>schemes_not_found
msgv1  = ycx_ss_exception=>format( im_kunnr ).
ENDIF.

* Fetch the materials based on the commission group(PROVG)
SELECT matnr vkorg vtweg provg FROM mvke INTO TABLE lt_mvke
FOR ALL ENTRIES IN lt_a971
WHERE provg EQ lt_a971-provg.
IF sy-subrc EQ 0.
*  Fetch the materials based on the plant validation
SELECT matnr werks FROM marc INTO TABLE lt_marc
FOR ALL ENTRIES IN lt_mvke
WHERE matnr EQ lt_mvke-matnr
AND werks EQ im_werks.
IF sy-subrc EQ 0.
*fetch material text
SELECT  matnr  maktx
FROM makt INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_marc
WHERE matnr = lt_marc-matnr AND
spras EQ yss_cl_type_pool=>yss_c_e.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.
ENDIF.
ENDIF.

* Fetch commission group text from table TVPR
SELECT * FROM tvprt INTO TABLE lt_tvprt
FOR ALL ENTRIES IN lt_a971
WHERE provg EQ lt_a971-provg
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
* Do nothing
*      SORT lt_tvprt BY provg.
ENDIF.

****fetch material text
***    SELECT  matnr  maktx
***    FROM makt INTO TABLE lt_makt
***    FOR ALL ENTRIES IN lt_304
***    WHERE matnr = lt_304-matnr AND
***          spras EQ yss_cl_type_pool=>yss_c_e.
***    IF sy-subrc EQ 0.
***      SORT lt_makt BY matnr.
***    ENDIF.

*Pass KNUMH to KONP.
SELECT knumh
kopos
kzbzg
kstbm
konms
kbetr
konwa
loevm_ko
FROM konp
INTO TABLE lt_konp
***    FOR ALL ENTRIES IN lt_304
FOR ALL ENTRIES IN lt_a971
WHERE knumh = lt_a971-knumh.
IF sy-subrc EQ 0.
*      SORT lt_304 BY knumh.
SORT lt_a971 BY knumh.
SORT lt_konp BY knumh.

LOOP AT lt_konp INTO ls_konp.
DATA(lv_tabix) = sy-tabix + 1.
*1st condition check - Ignore the records KONP-LOEVM_KO = 'X'
IF  ls_konp-loevm_ko EQ abap_true.
CONTINUE.
ENDIF.
*2nd condition check - [ If the  KONP-KZBZG is blank, fetch KONP-KSTBM(q

IF ls_konp-kzbzg IS INITIAL.
***          READ TABLE lt_304 ASSIGNING <lfs_a305> WITH KEY knumh = ls_
READ TABLE lt_a971 ASSIGNING FIELD-SYMBOL(<lfs_a971>) WITH KEY
IF sy-subrc EQ 0.
LOOP AT lt_mvke INTO DATA(lwa_mvke) WHERE provg EQ <lfs_a971
READ TABLE lt_marc INTO DATA(lwa_marc) WITH KEY matnr = lw
IF sy-subrc NE 0.
CONTINUE.
ENDIF.
ls_schemes-mat_id = lwa_marc-matnr.         "field 1 - mat
READ TABLE lt_makt ASSIGNING <lfs_makt> WITH KEY matnr = l
IF sy-subrc EQ 0.
ls_schemes-mat_desc = <lfs_makt>-maktx.     "field 2 - m
ENDIF.
READ TABLE lt_tvprt INTO DATA(lwa_tvpr) WITH KEY provg = <
IF sy-subrc EQ 0.
ls_schemes-comm_grp = lwa_tvpr-provg.
ls_schemes-comm_grp_txt = lwa_tvpr-vtext.
ENDIF.
************************************************************************
***          IF sy-subrc EQ 0.
***            ls_schemes-mat_id = <lfs_a305>-matnr.         "field 1 -
***            READ TABLE lt_makt ASSIGNING <lfs_makt> WITH KEY matnr =
***            IF sy-subrc EQ 0.
***              ls_schemes-mat_desc = <lfs_makt>-maktx.     "field 2 -
***            ENDIF.
***          ENDIF.
*          ls_schemes_temp-qty = ls_konp-kstbm.
IF ls_konp-konwa EQ '%'.
ls_schemes_temp-rate = ls_konp-kbetr / 10.
ELSEIF ls_konp-konwa EQ yss_cl_type_pool=>yss_c_inr.
ls_schemes_temp-rate_value = ls_konp-kbetr.
ENDIF.
ls_schemes_temp-uom = ls_konp-konms.
ls_schemes_temp-min_quan = ls_konp-kstbm.
READ TABLE lt_konp INTO DATA(ls_konp_temp) INDEX lv_tabix.
IF sy-subrc EQ 0.
ls_schemes_temp-max_quan = ls_konp_temp-kstbm - 1.
ENDIF.
APPEND ls_schemes_temp TO lt_schemes1.
ls_schemes-schemes = lt_schemes1.          "field 3 - Sche
APPEND ls_schemes TO ex_schemes.
REFRESH lt_schemes1.
ENDLOOP.
ENDIF.

*Go to KONM fetch data
ELSE.
ls_knumh-knumh = ls_konp-knumh.
ls_knumh-konwa = ls_konp-konwa.
APPEND ls_knumh TO lt_knumh.
ENDIF.

CLEAR : ls_schemes,ls_knumh,ls_schemes_temp,ls_konp_temp.
ENDLOOP.
ENDIF.

CLEAR lv_tabix.
*If KONP-KZBZG is not initial KONM fetch data
IF lt_knumh IS NOT INITIAL.
SORT lt_knumh BY knumh.
SELECT knumh
kstbm
kbetr
FROM konm
INTO TABLE lt_konm
FOR ALL ENTRIES IN  lt_knumh
WHERE knumh = lt_knumh-knumh.

LOOP AT lt_konm ASSIGNING FIELD-SYMBOL(<lfs_konm>).
READ TABLE lt_knumh ASSIGNING FIELD-SYMBOL(<lfs_knumh1>) WITH KE
IF sy-subrc EQ 0.
<lfs_konm>-konwa = <lfs_knumh1>-konwa.
ENDIF.
ENDLOOP.

***      LOOP AT lt_304 ASSIGNING <lfs_a305>.
LOOP AT lt_a971 ASSIGNING <lfs_a971>.
READ TABLE lt_knumh  TRANSPORTING NO FIELDS WITH KEY knumh = <lf
IF sy-subrc NE 0.
CLEAR <lfs_a971>.
CONTINUE.
ENDIF.

LOOP AT lt_mvke INTO lwa_mvke WHERE provg EQ <lfs_a971>-provg.
READ TABLE lt_marc INTO lwa_marc WITH KEY matnr = lwa_mvke-mat
IF sy-subrc NE 0.
CONTINUE.
ENDIF.
ls_schemes-mat_id = lwa_marc-matnr.  "<lfs_a305>-matnr
READ TABLE lt_makt ASSIGNING <lfs_makt> WITH KEY matnr = lwa_m
IF sy-subrc EQ 0.
ls_schemes-mat_desc = <lfs_makt>-maktx.
ENDIF.
*        ENDLOOP.

lt_konm_temp = lt_konm.
DELETE lt_konm_temp WHERE knumh <> <lfs_a971>-knumh.
LOOP AT lt_konm_temp INTO ls_konm  WHERE knumh = <lfs_a971>-kn
lv_tabix = sy-tabix + 1.

*          ls_schemes_temp-qty = ls_konm-kstbm .
IF ls_konm-konwa EQ '%'.
ls_schemes_temp-rate = ls_konm-kbetr / 10.
ELSE.
ls_schemes_temp-rate_value =  ls_konm-kbetr.
ENDIF.

READ TABLE lt_konp ASSIGNING <lfs_konp> WITH KEY knumh = <lf
IF sy-subrc EQ 0.
ls_schemes_temp-uom = <lfs_konp>-konms.
ENDIF.

ls_schemes_temp-min_quan = ls_konm-kstbm.
CONDENSE ls_schemes_temp-min_quan NO-GAPS.
READ TABLE lt_konm_temp INTO DATA(ls_konm_temp) INDEX lv_tab
IF sy-subrc EQ 0.
ls_schemes_temp-max_quan = ls_konm_temp-kstbm - 1.
ENDIF.
AT LAST.
ls_schemes_temp-max_quan = '&quan& +'."ls_schemes_temp-min
REPLACE '&quan&' IN ls_schemes_temp-max_quan WITH ls_schem
ENDAT.
CONDENSE ls_schemes_temp-max_quan NO-GAPS.
APPEND ls_schemes_temp TO ls_schemes-schemes.
CLEAR : ls_konm,ls_schemes_temp,ls_konm_temp,lv_tabix.
ENDLOOP.
**********************************************************************
READ TABLE lt_tvprt INTO lwa_tvpr WITH KEY provg = <lfs_a971>-
IF sy-subrc EQ 0.
ls_schemes-comm_grp = lwa_tvpr-provg.
ls_schemes-comm_grp_txt = lwa_tvpr-vtext.
ENDIF.
**********************************************************************
APPEND ls_schemes TO ex_schemes.
CLEAR ls_schemes.
ENDLOOP.
ENDLOOP.
***      DELETE lt_304 WHERE matnr EQ space AND knumh EQ space.
DELETE lt_a971 WHERE knumh EQ space.
ENDIF.

IF <lfs_konp> IS ASSIGNED.
UNASSIGN <lfs_konp>.
ENDIF.
IF <lfs_makt> IS ASSIGNED.
UNASSIGN <lfs_makt>.
ENDIF.
IF <lfs_a971> IS ASSIGNED.  "<lfs_a305>
UNASSIGN <lfs_a971>.      "<lfs_a305>
ENDIF.
ENDMETHOD.
GET_STOCK_DETAILS
item
METHOD get_stock_details.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  : Zareena Begum
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
TYPES: BEGIN OF lty_mvke,
matnr TYPE matnr,
mvgr1 TYPE mvgr1,
END OF lty_mvke.
TYPES: BEGIN OF lty_mch1,
matnr TYPE matnr,
charg TYPE charg_d,
hsdat TYPE hsdat,
vfdat TYPE vfdat,
END OF lty_mch1.
TYPES: BEGIN OF lty_mbew,
matnr TYPE matnr,
bwkey TYPE bwkey,
vprsv TYPE vprsv,
stprs TYPE stprs,
verpr TYPE verpr,
END OF lty_mbew.
TYPES: BEGIN OF lty_mara,
matkl TYPE matkl,
matnr TYPE matnr,
meins TYPE meins,
END OF lty_mara,
BEGIN OF lty_vbbe,
vbeln TYPE vbeln_va,
posnr TYPE posnr_va,
etenr TYPE etenr,
matnr TYPE matnr,
werks TYPE werks_d,
mbdat TYPE mbdat,
charg TYPE charg_d,
vbtyp TYPE vbtyp,
vmeng TYPE vmeng,
meins TYPE meins,
END OF lty_vbbe.

DATA: "ls_sales_area  TYPE yss_s_sales_area,
lo_exception   TYPE REF TO ycx_ss_exception,
lt_mchb        TYPE TABLE OF mchb,
lwa_mchb       TYPE mchb,
lt_vbbe        TYPE STANDARD TABLE OF lty_vbbe,
*      lt_vbbe_tmp    TYPE STANDARD TABLE OF lty_vbbe,
lwa_vbbe       TYPE lty_vbbe,
lt_mch1        TYPE TABLE OF lty_mch1,
lt_mbew        TYPE TABLE OF lty_mbew,
lt_makt        TYPE TABLE OF makt,
lt_mara        TYPE TABLE OF lty_mara,
lv_index       TYPE sy-tabix,
lv_lines       TYPE i,
lv_temp_qty    TYPE labst,
lv_res_qty     TYPE labst,
lv_tot_stock   TYPE labst,
lt_mvke        TYPE TABLE OF lty_mvke,
lt_tvm1t       TYPE TABLE OF tvm1t,
lt_r_matnr     TYPE RANGE OF matnr,
lt_r_mat_grp   TYPE RANGE OF mvgr1,
lv_matnr       TYPE matnr,
lv_mat_grp(4)  TYPE c,
lt_matnr_range TYPE ranges_matnr,
lt_r_vkorg     TYPE rsdsselopt_t.
*<<<<Abhishek
DATA : lv_mat TYPE char20.
*Abhishek>>>>>>
FIELD-SYMBOLS: <lfs_stock_dets> TYPE LINE OF yss_tt_stock_dets.

CONSTANTS : lc_so   TYPE char10 VALUE 'SALESORDER',
lc_delv TYPE char10 VALUE 'DELIVERY'.

** Get Sales area
*    TRY.
*        CALL METHOD yss_cl_sd_process=>get_sales_area
*          EXPORTING
**           im_kunnr      =
*            im_vwerk      = im_req_params-werks
*          IMPORTING
*            ex_sales_area = ls_sales_area.
*      CATCH ycx_ss_exception INTO lo_exception.
*        lo_exception->log_exception( ).
*        RETURN.
*    ENDTRY.

* Get the sales organizations from tvarvc entries
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_sales_org
IMPORTING
ex_range       = lt_r_vkorg.

**If im_matnr is given, then fill lt_r_matnr
*    IF im_matnr IS NOT INITIAL.
*      APPEND INITIAL LINE TO lt_r_matnr ASSIGNING FIELD-SYMBOL(<lfs_mat
*      <lfs_matnr>-sign = 'I'.
*      <lfs_matnr>-option = 'EQ'.
*      <lfs_matnr>-low = im_matnr.
*    ENDIF.

**If im_mat_grp is given, then fill lt_r_mat_grp
*    IF im_mat_grp IS NOT INITIAL.
*      APPEND INITIAL LINE TO lt_r_mat_grp ASSIGNING FIELD-SYMBOL(<lfs_m
*      <lfs_mat_grp>-sign = 'I'.
*      <lfs_mat_grp>-option = 'EQ'.
*      <lfs_mat_grp>-low = im_mat_grp.
*    ENDIF.

lv_matnr = im_matnr.
IF im_matnr IS NOT INITIAL.
TRANSLATE lv_matnr TO UPPER CASE.
ENDIF.
CONCATENATE  lv_matnr '%' INTO lv_mat.
CONDENSE lv_mat NO-GAPS.

IF im_mat_grp IS NOT INITIAL.
lv_mat_grp = im_mat_grp.
TRANSLATE lv_mat_grp TO UPPER CASE.
ENDIF.
CONCATENATE  lv_mat_grp '%' INTO lv_mat_grp.
CONDENSE lv_mat_grp NO-GAPS.

*Get the materials w.r.to vkorg and vtweg from MVKE table
IF im_matnr_range IS NOT INITIAL.
lt_matnr_range = im_matnr_range[].
LOOP AT lt_matnr_range ASSIGNING FIELD-SYMBOL(<lfs_matnr_range>).
TRANSLATE <lfs_matnr_range>-low TO UPPER CASE.
TRANSLATE <lfs_matnr_range>-high TO UPPER CASE.
ENDLOOP.
*    ELSE.
*      APPEND INITIAL LINE TO lt_matnr_range ASSIGNING <lfs_matnr_range>
*      <lfs_matnr_range>-sign = 'I'.
*      <lfs_matnr_range>-option = 'EQ'.
*      <lfs_matnr_range>-low = im_matnr.
*      TRANSLATE <lfs_matnr_range>-low TO UPPER CASE.
*      CONCATENATE <lfs_matnr_range>-low '*' INTO <lfs_matnr_range>-low.
*      CONDENSE <lfs_matnr_range>-low.
*    ENDIF.

*      SELECT matnr
*               mvgr1 FROM mvke
*                     INTO TABLE lt_mvke
*                     WHERE matnr IN lt_matnr_range  AND            "mat
*        matnr LIKE lv_mat  AND
*                           vkorg IN lt_r_vkorg AND
*                           mvgr1 LIKE  lv_mat_grp.           "mvgr1 IN
*      IF sy-subrc EQ 0.
*        "Do nothing
*      ENDIF.
*    ELSE.
*      SELECT matnr
*             mvgr1 FROM mvke
*                   INTO TABLE lt_mvke
*                   WHERE matnr LIKE lv_mat  AND            "matnr IN lt
*                         vkorg IN lt_r_vkorg AND
**                       vkorg EQ ls_sales_area-vkorg AND
**                       vtweg EQ ls_sales_area-vtweg AND
*                         mvgr1 LIKE  lv_mat_grp.           "mvgr1 IN lt
*      IF sy-subrc EQ 0.
*        "Do nothing
*      ENDIF.
ENDIF.

SELECT matnr
mvgr1 FROM mvke
INTO TABLE lt_mvke
WHERE matnr IN lt_matnr_range  AND            "matn
matnr LIKE lv_mat  AND
vkorg IN lt_r_vkorg AND
mvgr1 LIKE  lv_mat_grp.           "mvgr1 IN l
IF sy-subrc EQ 0.
"Do nothing
ENDIF.

IF lt_mvke IS NOT INITIAL.
SORT lt_mvke BY matnr.
*Fetch the text for mvgr1
SELECT * FROM tvm1t
INTO TABLE lt_tvm1t
FOR ALL ENTRIES IN lt_mvke
WHERE mvgr1 = lt_mvke-mvgr1.
IF sy-subrc EQ 0.
SORT lt_tvm1t BY mvgr1.
ENDIF.
ENDIF.

* Get storage location, batch number and different types of stock detail
IF lt_mvke[] IS NOT INITIAL.
SELECT * FROM mchb
INTO TABLE lt_mchb
FOR ALL ENTRIES IN lt_mvke
WHERE matnr = lt_mvke-matnr AND
werks = im_req_params-werks.
IF sy-subrc EQ 0.
SORT lt_mchb BY matnr werks lgort charg.
ELSE.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
*        RETURN.
ENDIF.
ENDIF.

IF lt_mchb[] IS NOT INITIAL.
* Get manufacturing date and date of expiration from MCH1 table
SELECT matnr
charg
hsdat
vfdat FROM mch1
INTO TABLE lt_mch1
FOR ALL ENTRIES IN lt_mchb
WHERE matnr = lt_mchb-matnr AND
charg = lt_mchb-charg AND
hsdat LE sy-datum AND
vfdat GE sy-datum.
IF sy-subrc EQ 0.
SORT lt_mch1 BY matnr charg.
ENDIF.

* Get material group and UOM from mara
SELECT matkl
matnr
meins FROM mara
INTO TABLE lt_mara
FOR ALL ENTRIES IN lt_mchb
WHERE matnr = lt_mchb-matnr.
IF sy-subrc EQ 0.
SORT lt_mara BY matnr.
* Get material Group description From t023t table
*        SELECT * FROM t023t
*                 INTO TABLE lt_t023t
*                 FOR ALL ENTRIES IN lt_mara
*                 WHERE matkl EQ lt_mara-matkl.
*        IF sy-subrc EQ 0.
*          SORT lt_t023t BY matkl.
*        ENDIF.
ENDIF.

* Get material price from MBEW table
SELECT matnr
bwkey
vprsv
stprs
verpr FROM mbew
INTO TABLE lt_mbew
FOR ALL ENTRIES IN lt_mchb
WHERE matnr EQ lt_mchb-matnr AND
bwkey EQ lt_mchb-werks.
IF sy-subrc EQ 0.
SORT lt_mbew BY matnr bwkey.
ENDIF.

* Get material desc from MAKT table
SELECT * FROM makt
INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_mchb
WHERE matnr EQ lt_mchb-matnr.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.

*  Fetch the reserved stock details from table VBBE
SELECT vbeln posnr etenr matnr werks mbdat charg vbtyp vmeng meins
FROM vbbe INTO TABLE lt_vbbe
FOR ALL ENTRIES IN lt_mchb
WHERE matnr EQ lt_mchb-matnr
AND werks EQ im_req_params-werks
AND lgort EQ 'KS01'
AND charg NE ''
AND vbtyp IN (yss_cl_type_pool=>yss_c_j,yss_cl_type_pool=>yss_
IF sy-subrc EQ 0.
SORT lt_vbbe BY matnr charg vbtyp.
*        lt_vbbe_tmp = lt_vbbe.
*        DELETE ADJACENT DUPLICATES FROM lt_vbbe_tmp COMPARING matnr vbt
ENDIF.
ENDIF.
*    lv_lines = lines( lt_mchb ).
*    SORT lt_vbbe BY matnr.
LOOP AT lt_mchb INTO DATA(lwa_mchb1).
*      lv_index = sy-tabix.
lwa_mchb = lwa_mchb1.
lv_tot_stock = lwa_mchb-clabs + lwa_mchb-cumlm + lwa_mchb-cinsm +
AT NEW matnr.
APPEND INITIAL LINE TO ex_stock_dets ASSIGNING <lfs_stock_dets>.
*To get the material group
READ TABLE lt_mvke ASSIGNING FIELD-SYMBOL(<lfs_mvke>) WITH KEY m
IF sy-subrc EQ 0.
<lfs_stock_dets>-mat_grp = <lfs_mvke>-mvgr1.
ENDIF.
*To get the material group text
READ TABLE lt_tvm1t ASSIGNING FIELD-SYMBOL(<lfs_tvm1t>) WITH KEY
IF sy-subrc EQ 0.
<lfs_stock_dets>-mat_grp_name = <lfs_tvm1t>-bezei.
ENDIF.
* Get UOM from mara table
READ TABLE lt_mara ASSIGNING FIELD-SYMBOL(<lfs_mara>) WITH KEY m
IF sy-subrc EQ 0.
<lfs_stock_dets>-uom = <lfs_mara>-meins.
ENDIF.
* get the material number
<lfs_stock_dets>-mat_no = lwa_mchb-matnr.
*Get material description
READ TABLE lt_makt ASSIGNING FIELD-SYMBOL(<lfs_makt>) WITH KEY m
IF sy-subrc EQ 0.
<lfs_stock_dets>-mat_desc = <lfs_makt>-maktx.
ENDIF.
<lfs_stock_dets>-plant_id = im_req_params-werks.
READ TABLE lt_mbew ASSIGNING FIELD-SYMBOL(<lfs_mbew>) WITH KEY m
b
IF sy-subrc EQ 0.
IF <lfs_mbew>-vprsv EQ 'S'.
<lfs_stock_dets>-price = <lfs_mbew>-stprs.
ELSEIF <lfs_mbew>-vprsv EQ 'V'.
<lfs_stock_dets>-price = <lfs_mbew>-verpr.
ENDIF.
ENDIF.
ENDAT.
*Append lines in <lfs_stock_dets>-batch_stock
IF lv_tot_stock IS NOT INITIAL.  "Do not append if lv_tot_stock IS
APPEND INITIAL LINE TO <lfs_stock_dets>-batch_stock ASSIGNING FI
<lfs_batch_stock>-storage_loc = lwa_mchb-lgort.
<lfs_batch_stock>-batch_no = lwa_mchb-charg.
*To get the manufacturing and expiry date
READ TABLE lt_mch1 ASSIGNING FIELD-SYMBOL(<lfs_mch1>) WITH KEY m
c
IF sy-subrc EQ 0.
<lfs_batch_stock>-mfg_date = <lfs_mch1>-hsdat.
<lfs_batch_stock>-exp_date = <lfs_mch1>-vfdat.
ENDIF.

* Batch available quantity and price +++GANGADHAR20180410
<lfs_batch_stock>-available_qty = lv_tot_stock.
***        READ TABLE lt_vbbe WITH KEY charg = lwa_mchb-charg vbtyp = ys
READ TABLE lt_vbbe WITH KEY matnr = lwa_mchb-matnr charg = lwa_m
IF sy-subrc EQ 0.
lv_index = sy-tabix.

LOOP AT lt_vbbe INTO lwa_vbbe FROM lv_index.
IF lwa_mchb-charg NE lwa_vbbe-charg OR lwa_mchb-matnr NE lwa
EXIT.
ENDIF.
IF im_delivery_num EQ lwa_vbbe-vbeln.
CONTINUE.
ENDIF.
<lfs_batch_stock>-available_qty = <lfs_batch_stock>-availabl
CLEAR lwa_vbbe.
ENDLOOP.
ENDIF.

<lfs_batch_stock>-available_price = <lfs_batch_stock>-available_

<lfs_batch_stock>-val_unres_use = lwa_mchb-clabs.
<lfs_batch_stock>-stock_in_trans = lwa_mchb-cumlm.
<lfs_batch_stock>-stock_in_qa = lwa_mchb-cinsm.
<lfs_batch_stock>-tot_all_res_bat = lwa_mchb-ceinm.
<lfs_batch_stock>-blocked_stock = lwa_mchb-cspem.
<lfs_batch_stock>-blocked_stock_ret = lwa_mchb-cretm.
<lfs_batch_stock>-val_unres_use_pp = lwa_mchb-cvmla.
<lfs_batch_stock>-stock_in_trans_pp = lwa_mchb-cvmum.
<lfs_batch_stock>-stock_in_qa_pp = lwa_mchb-cvmin.
<lfs_batch_stock>-res_use_stock_pp = lwa_mchb-cvmei.
<lfs_batch_stock>-blocked_stock_pp = lwa_mchb-cvmsp.
<lfs_batch_stock>-blocked_stock_ret_pp = lwa_mchb-cvmre.
* To get the total quantity
<lfs_batch_stock>-batch_tot_qty = lv_tot_stock.
<lfs_batch_stock>-batch_unit_price = <lfs_stock_dets>-price.
<lfs_batch_stock>-batch_tot_price = <lfs_batch_stock>-batch_tot_
ENDIF.
lv_temp_qty = lv_temp_qty + lv_tot_stock.
AT END OF matnr.
* To get the total quantity
<lfs_stock_dets>-total_quantity = lv_temp_qty.
*To get the total price
<lfs_stock_dets>-total_price = <lfs_stock_dets>-total_quantity *
CLEAR lv_temp_qty.

* To populate the available stock and reserved stock details
***        LOOP AT lt_vbbe INTO DATA(ls_vbbe)." FROM lv_index.
READ TABLE lt_vbbe WITH KEY matnr = lwa_mchb-matnr TRANSPORTING
IF sy-subrc EQ 0.
lv_index = sy-tabix.

LOOP AT lt_vbbe INTO lwa_vbbe FROM lv_index.
IF lwa_mchb-matnr NE lwa_vbbe-matnr.
EXIT.
ENDIF.
<lfs_stock_dets>-reserved_qty = <lfs_stock_dets>-reserved_qt
APPEND INITIAL LINE TO <lfs_stock_dets>-res_stock_details AS
MOVE-CORRESPONDING lwa_vbbe TO <lfs_res_details>.
IF lwa_vbbe-vbtyp EQ yss_cl_type_pool=>yss_c_c.
<lfs_res_details>-order_type = lc_so.
ELSEIF lwa_vbbe-vbtyp EQ yss_cl_type_pool=>yss_c_j.
<lfs_res_details>-order_type = lc_delv.
ENDIF.
CLEAR : lwa_vbbe.
ENDLOOP.
CLEAR lv_index.
ENDIF.

***        ENDLOOP.
<lfs_stock_dets>-reserved_price  = <lfs_stock_dets>-reserved_qty
<lfs_stock_dets>-available_qty   = <lfs_stock_dets>-total_quanti
<lfs_stock_dets>-available_price = <lfs_stock_dets>-available_qt
ENDAT.
CLEAR lv_tot_stock.
ENDLOOP.

DELETE ex_stock_dets WHERE total_quantity IS INITIAL.
SORT ex_stock_dets BY mat_grp DESCENDING.

ENDMETHOD.
GET_DELIVERY_LIST
item
METHOD get_delivery_list.
** Local type declarations
TYPES: BEGIN OF lty_likp,
vbeln     TYPE vbeln_vl,
lfdat     TYPE lfdat_v,
wadat_ist TYPE wadat_ist,
vbtyp     TYPE vbtyp,
kunnr     TYPE kunwe,
END OF lty_likp,

BEGIN OF lty_vbuk,
vbeln TYPE vbeln,
wbstk TYPE wbstk,
fkstk TYPE fkstk,
END OF lty_vbuk,

BEGIN OF lty_kna1,
kunnr TYPE kunnr,
name1 TYPE name1_gp,
END OF lty_kna1,

BEGIN OF lty_vbpa,
vbeln TYPE vbeln_va,
parvw TYPE parvw,
kunnr TYPE kunnr,
adrnr TYPE adrnr,
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
name2      TYPE ad_name2,
END OF lty_adrc,

BEGIN OF lty_lips,
vbeln TYPE vbeln,
vgbel TYPE vgbel,
END OF lty_lips.

DATA:lt_likp      TYPE TABLE OF lty_likp,
lt_lips      TYPE TABLE OF lty_lips,
lt_kna1      TYPE TABLE OF lty_kna1,
lt_vbuk      TYPE TABLE OF lty_vbuk,   "Billing Status
lo_exception TYPE REF TO ycx_ss_exception,
lt_item      TYPE yss_tt_del_item,
lv_index     TYPE i,
lv_date      TYPE sy-datum,
lt_tvarvc    TYPE rsdsselopt_t,
lt_kunnr     TYPE rsdsselopt_t,
lr_selopt    TYPE STANDARD TABLE OF rsdsselopt, "++GANGADHAR201
ls_selopt    TYPE rsdsselopt,
lt_vbpa      TYPE STANDARD TABLE OF lty_vbpa,
lwa_vbpa     TYPE lty_vbpa,
lt_adrc      TYPE STANDARD TABLE OF lty_adrc,
lwa_adrc     TYPE lty_adrc,
lt_dd07v     TYPE TABLE OF dd07v.

FIELD-SYMBOLS: <lfs_tvarvc>   TYPE rsdsselopt,
<lfs_kunnr>    TYPE rsdsselopt,
<lfs_delivery> TYPE yss_s_del_header,
<lfs_likp>     TYPE lty_likp,
<lfs_lips>     TYPE lty_lips,
<lfs_kna1>     TYPE lty_kna1,
<lfs_vbuk>     TYPE lty_vbuk.

CLEAR:ex_delivery_list.

IF im_ship_to IS NOT INITIAL.
APPEND INITIAL LINE TO lt_kunnr ASSIGNING <lfs_kunnr>.
<lfs_kunnr>-sign = 'I'.
<lfs_kunnr>-option = 'EQ'.
<lfs_kunnr>-low = im_ship_to.
ENDIF.

IF im_from_date IS NOT INITIAL AND im_to_date IS INITIAL.
APPEND INITIAL LINE TO lt_tvarvc ASSIGNING <lfs_tvarvc>.
<lfs_tvarvc>-sign = 'I'.
<lfs_tvarvc>-option = 'EQ'.
<lfs_tvarvc>-low    = im_from_date.
ELSEIF im_from_date IS INITIAL AND im_to_date IS NOT INITIAL.
APPEND INITIAL LINE TO lt_tvarvc ASSIGNING <lfs_tvarvc>.
<lfs_tvarvc>-sign = 'I'.
<lfs_tvarvc>-option = 'EQ'.
<lfs_tvarvc>-low    = im_to_date.
ELSEIF im_from_date IS NOT INITIAL AND im_to_date IS NOT INITIAL.
APPEND INITIAL LINE TO lt_tvarvc ASSIGNING <lfs_tvarvc>.
<lfs_tvarvc>-sign = 'I'.
<lfs_tvarvc>-option = 'BT'.
<lfs_tvarvc>-low    = im_from_date.
<lfs_tvarvc>-high   = im_to_date.
ELSE.
*Get TVARVC entry
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_P_DEL_DAYS'
IMPORTING
ex_range       = lt_tvarvc.
READ TABLE lt_tvarvc ASSIGNING <lfs_tvarvc> INDEX 1.
IF sy-subrc EQ 0.
<lfs_tvarvc>-option = 'BT'.
lv_date             = sy-datum - <lfs_tvarvc>-low.
<lfs_tvarvc>-low    = lv_date.
<lfs_tvarvc>-high   = sy-datum.
ENDIF.
ENDIF.
**Get Delivery details from delivery header
SELECT vbeln
lfdat
wadat_ist
vbtyp
kunnr
FROM likp
INTO TABLE lt_likp
WHERE vstel EQ im_req_params-werks
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND kunnr IN lt_kunnr
AND bldat IN lt_tvarvc
%_HINTS ORACLE 'INDEX("LIKP" "LIKP~YSS")' . "
IF sy-subrc EQ 0.

**Get delivery Item details
SELECT DISTINCT vbeln
vgbel
FROM lips
INTO TABLE lt_lips
FOR ALL ENTRIES IN lt_likp
WHERE vbeln = lt_likp-vbeln.
IF sy-subrc EQ 0.
SORT lt_lips BY vbeln.
ENDIF.

***  >>> START GANGADHAR20180522 "Changes to get the customer name based
** Get Customer details
***      SELECT kunnr
***             name1
***        FROM kna1
***        INTO TABLE lt_kna1
***        FOR ALL ENTRIES IN lt_likp
***        WHERE kunnr = lt_likp-kunnr.
***      IF sy-subrc EQ 0.
***        SORT lt_kna1 BY kunnr.
***      ENDIF.
*    Fetch the customer partner details
ls_selopt-sign = 'I'.
ls_selopt-option = 'EQ'.
ls_selopt-low = yss_cl_type_pool=>yss_c_ag. APPEND ls_selopt TO lr
ls_selopt-low = yss_cl_type_pool=>yss_c_we. APPEND ls_selopt TO lr

SELECT vbeln parvw kunnr adrnr FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_likp
WHERE vbeln EQ lt_likp-vbeln
AND parvw IN lr_selopt.
IF sy-subrc EQ 0.
SORT lt_vbpa BY vbeln parvw.
*  Fetch the partner names
SELECT addrnumber name1 name2 FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180522

** Get Billing details "Sales Document: Header Status and Administrative
SELECT vbeln
wbstk
fkstk
FROM vbuk
INTO TABLE lt_vbuk
FOR ALL ENTRIES IN lt_likp
WHERE vbeln = lt_likp-vbeln.
IF sy-subrc EQ 0 AND lt_vbuk IS NOT INITIAL.
SORT lt_vbuk BY vbeln.
ENDIF.
ENDIF.

*Get domain text for VBTYP  (for eg - J : delivery)
CALL FUNCTION 'DD_DOMVALUES_GET'
EXPORTING
domname        = 'VBTYP'
text           = abap_true
langu          = sy-langu
TABLES
dd07v_tab      = lt_dd07v
EXCEPTIONS
wrong_textflag = 1
OTHERS         = 2.
IF sy-subrc <> 0.
RETURN.
ENDIF.

SORT lt_dd07v BY domvalue_l.

LOOP AT lt_likp ASSIGNING <lfs_likp>.
APPEND INITIAL LINE TO ex_delivery_list ASSIGNING <lfs_delivery>.
<lfs_delivery>-del_num = <lfs_likp>-vbeln.
<lfs_delivery>-del_date = <lfs_likp>-lfdat.
<lfs_delivery>-act_pgi_date = <lfs_likp>-wadat_ist.
READ TABLE lt_dd07v ASSIGNING FIELD-SYMBOL(<lfs_dd07v>) WITH KEY d
IF sy-subrc EQ 0.
<lfs_delivery>-doc_category = <lfs_dd07v>-ddtext.
IF <lfs_likp>-vbtyp = 'T'.
<lfs_delivery>-doc_category = 'Returns delivery'(033).
ENDIF.
ENDIF.

*** Changes to get name from VBPA instead of KNA1 GANGADHAR20180522
***      READ TABLE lt_kna1 ASSIGNING <lfs_kna1> WITH KEY kunnr = <lfs_l
***      IF sy-subrc EQ 0.
***        <lfs_delivery>-ship_to = <lfs_kna1>-name1.
***      ENDIF.

* Read ship to party details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = <lfs_likp>-vbeln
parvw = yss_cl_type_pool=>yss
IF sy-subrc EQ 0.
*        lwa_so_list-ship_to_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE lwa_adrc-name1 lwa_adrc-name2 INTO
<lfs_delivery>-ship_to SEPARATED B
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180522
READ TABLE lt_lips WITH KEY vbeln = <lfs_likp>-vbeln BINARY SEARCH
IF sy-subrc EQ 0.
lv_index = sy-tabix.
LOOP AT lt_lips ASSIGNING <lfs_lips> FROM lv_index.
IF <lfs_lips>-vbeln NE <lfs_likp>-vbeln.
EXIT.
ENDIF.
APPEND <lfs_lips>-vgbel TO lt_item.
ENDLOOP.
<lfs_delivery>-item = lt_item.
CLEAR:lt_item.
ENDIF.
READ TABLE lt_vbuk ASSIGNING <lfs_vbuk> WITH KEY vbeln = <lfs_likp
IF sy-subrc EQ 0.
IF <lfs_vbuk>-fkstk = yss_cl_type_pool=>yss_c_c.
<lfs_delivery>-status = text-005.
ELSEIF <lfs_vbuk>-fkstk = yss_cl_type_pool=>yss_c_b.
<lfs_delivery>-status = text-028.
*        ELSEIF <lfs_vbuk>-fkstk = 'A'.
*          <lfs_delivery>-status = text-029.
ELSEIF <lfs_vbuk>-wbstk = yss_cl_type_pool=>yss_c_a.
<lfs_delivery>-status = text-014.
ELSEIF <lfs_vbuk>-wbstk = yss_cl_type_pool=>yss_c_b.
<lfs_delivery>-status =  text-027.
ELSEIF <lfs_vbuk>-wbstk = yss_cl_type_pool=>yss_c_c.
<lfs_delivery>-status = text-029.
ENDIF.
ENDIF.
ENDLOOP.
SORT ex_delivery_list BY del_num.

ENDMETHOD.
CREATE_BILLING
item
METHOD create_billing.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 24-Feb-2018
* Description : Create Billing through Delivery
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*
* Data Declarations
DATA : lt_delv       TYPE TABLE OF bapivbrk,
ls_delv       TYPE bapivbrk,
lt_text       TYPE TABLE OF tline,
ls_delv_no    TYPE yss_s_delv_no,
ls_text       TYPE tline,
ls_header     TYPE thead,
lt_textdatain TYPE TABLE OF bapikomfktx,
lt_delv_no    TYPE yss_tt_delv_no,
lv_date       TYPE vbrk-fkdat.

* Field Symbols Declarations
FIELD-SYMBOLS : <lfs_success> TYPE bapivbrksuccess.
* Billing Date
lv_date = im_billing_date.
* Delivery Nos to Bapi Structure
LOOP AT im_delv_no INTO ls_delv_no.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = ls_delv_no-delv_no
IMPORTING
output = ls_delv-ref_doc.
ls_delv-ref_doc_ca = yss_cl_type_pool=>yss_c_type.
ls_delv-bill_date = lv_date.
APPEND ls_delv TO lt_delv.
CLEAR : ls_delv,ls_delv_no.
ENDLOOP.

* Call function module to create Billing No's for the Corresponding Deli
CLEAR : ex_errors,ex_return,ex_success.
CALL FUNCTION 'BAPI_BILLINGDOC_CREATEMULTIPLE'
TABLES
billingdatain = lt_delv
errors        = ex_errors
return        = ex_return
textdatain    = lt_textdatain                   "Code review poi
success       = ex_success.
IF ex_errors IS NOT INITIAL." OR ex_return IS NOT INITIAL.
RETURN.
ENDIF.

* Commit to database
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait = abap_true.
*Release Locks of an LUW
CALL FUNCTION 'DEQUEUE_ALL'.
* Sort by Delivery No
SORT ex_success BY ref_doc.
* Header Text for Billing No's created to be saved
lt_delv_no = im_delv_no.
SORT lt_delv_no BY delv_no.
*For Leading Zero's
LOOP AT lt_delv_no INTO ls_delv_no.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = ls_delv_no-delv_no
IMPORTING
output = ls_delv_no-delv_no.
MODIFY lt_delv_no FROM ls_delv_no TRANSPORTING delv_no.
CLEAR : ls_delv_no.
ENDLOOP.

LOOP AT lt_delv_no INTO ls_delv_no.
* Header Object and Text ID's
READ TABLE ex_success ASSIGNING <lfs_success> WITH KEY ref_doc = l
IF sy-subrc = 0.
IF ls_delv_no-object_name IS NOT INITIAL AND ls_delv_no-text_id
ls_header-tdname    = <lfs_success>-bill_doc.
ls_header-tdobject  = ls_delv_no-object_name.
ls_header-tdid      = ls_delv_no-text_id.
ls_header-tdspras   = 'E'.
* Text to be passed
ls_text-tdformat = '*'.
ls_text-tdline  = ls_delv_no-text_line.
APPEND ls_text TO lt_text.
* Create Header Text FM
CALL FUNCTION 'SAVE_TEXT'
EXPORTING
client          = sy-mandt
header          = ls_header
savemode_direct = abap_true
TABLES
lines           = lt_text
EXCEPTIONS
id              = 1
language        = 2
name            = 3
object          = 4
OTHERS          = 5.
IF sy-subrc <> 0.
*            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.
ENDIF.
ENDIF.
CLEAR : ls_delv_no,ls_text,ls_header.
REFRESH  : lt_text.
ENDLOOP.
IF <lfs_success> IS ASSIGNED.
UNASSIGN <lfs_success>.
ENDIF.

ENDMETHOD.
GET_BILLING_LIST
item
METHOD get_billing_list.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 26-Feb-2018
* Description : Get Billing Documents List
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

* Types Declarations
TYPES : BEGIN OF lty_vbrk,
vbeln TYPE vbrk-vbeln,
fkart TYPE vbrk-fkart,
fktyp TYPE vbrk-fktyp,
vkorg TYPE vbrk-vkorg,
knumv TYPE vbrk-knumv,
fkdat TYPE vbrk-fkdat,
netwr TYPE vbrk-netwr,
erdat TYPE vbrk-erdat,
kunrg TYPE vbrk-kunrg,
kunag TYPE vbrk-kunag,
kalsm TYPE vbrk-kalsm,
rfbsk TYPE vbrk-rfbsk,
fksto TYPE vbrk-fksto,
vbtyp TYPE vbrk-vbtyp,
END OF lty_vbrk.

TYPES : BEGIN OF lty_vbrp,
vbeln TYPE vbrp-vbeln,
posnr TYPE vbrp-posnr,
fkimg TYPE vbrp-fkimg,
vrkme TYPE vbrp-vrkme,
ntgew TYPE vbrp-ntgew,
netwr TYPE vbrp-netwr,
mwsbp TYPE vbrp-mwsbp,
matnr TYPE vbrp-matnr,
arktx TYPE vbrp-arktx,
vgbel TYPE vbrp-vgbel,
vgpos TYPE vbrp-vgpos,
END OF lty_vbrp.

TYPES : BEGIN OF lty_konv,
knumv TYPE konv-knumv,
kposn TYPE konv-kposn,
kschl TYPE konv-kschl,
kbetr TYPE konv-kbetr,
waers TYPE konv-waers,
kwert TYPE konv-kwert,
END OF lty_konv.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
name1 TYPE kna1-name1,
END OF lty_kna1.

TYPES : BEGIN OF lty_likp,
vbeln TYPE likp-vbeln,
lfdat TYPE likp-lfdat,
END OF lty_likp.

TYPES : BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
parvw TYPE vbpa-parvw,
kunnr TYPE vbpa-kunnr,
adrnr TYPE vbpa-adrnr,
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
name2      TYPE ad_name2,
END OF lty_adrc.
* Data Declarations
DATA : lt_r_date    TYPE yss_cl_type_pool=>yss_r_date,
lt_r_kunnr   TYPE yss_cl_type_pool=>yss_r_kunnr,
lt_tvarvc    TYPE rsdsselopt_t,
lwa_tvarvc   TYPE LINE OF rsdsselopt_t,
lv_from_date TYPE sy-datum,
lt_vbrk      TYPE TABLE OF lty_vbrk,
ls_vbrk      TYPE lty_vbrk,
lt_vbrp      TYPE TABLE OF lty_vbrp,
ls_vbrp      TYPE lty_vbrp,
lt_konv      TYPE TABLE OF lty_konv,
ls_konv      TYPE lty_konv,
ls_bill_list TYPE yss_s_bill_list,
lt_kna1      TYPE TABLE OF lty_kna1,
ls_kna1      TYPE lty_kna1,
lv_index     TYPE i,
lv_index1    TYPE i,
lv_index2    TYPE i,
lt_vbpa      TYPE TABLE OF lty_vbpa,
ls_vbpa      TYPE lty_vbpa,
lt_adrc      TYPE STANDARD TABLE OF lty_adrc,
lwa_adrc     TYPE lty_adrc,
lt_likp      TYPE TABLE OF lty_likp,
ls_likp      TYPE lty_likp.

* Field Symbols
FIELD-SYMBOLS : <lfs_date>  TYPE LINE OF yss_cl_type_pool=>yss_r_dat
<lfs_kunnr> TYPE LINE OF yss_cl_type_pool=>yss_r_kun

* To fill lt_r_date
IF im_date IS INITIAL.
*Get no. of days from TVARVC table
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_P_BO_DAYS'
IMPORTING
ex_range       = lt_tvarvc.
READ TABLE lt_tvarvc INTO lwa_tvarvc INDEX 1.
IF sy-subrc EQ 0.
lv_from_date = sy-datum - lwa_tvarvc-low.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = lv_from_date.
<lfs_date>-high = sy-datum.
ENDIF.
ELSE.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = im_date-low.
<lfs_date>-high = im_date-high.
ENDIF.

* Fill lt_r_kunnr if im_clientid is provided
IF im_clientid IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_kunnr ASSIGNING <lfs_kunnr>.
<lfs_kunnr>-sign = 'I'.
<lfs_kunnr>-option = 'EQ'.
<lfs_kunnr>-low = im_clientid.
ENDIF.

* To get Billing Doc Header Data

SELECT vbeln
fkart
fktyp
vkorg
knumv
fkdat
netwr
erdat
kunrg
kunag
kalsm
rfbsk
fksto
vbtyp
FROM vbrk
INTO TABLE lt_vbrk
WHERE fkdat IN lt_r_date
AND   kunag IN lt_r_kunnr
AND   bupla EQ im_bupla
AND   fksto EQ abap_false
AND   vbtyp NOT IN ('N','S')
ORDER BY fkdat ASCENDING
%_HINTS ORACLE 'INDEX("VBRK" "VBRK~YSS")'.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

* Get Item data Billing Doc
IF lt_vbrk IS NOT INITIAL.
SELECT vbeln
posnr
fkimg
vrkme
ntgew
netwr
mwsbp
matnr
arktx
vgbel
vgpos
FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln.
IF sy-subrc = 0.
SORT lt_vbrp BY vbeln.
* Get Delivery Date
SELECT vbeln
lfdat
FROM likp
INTO TABLE lt_likp
FOR ALL ENTRIES IN lt_vbrp
WHERE vbeln = lt_vbrp-vgbel.
IF sy-subrc = 0.
SORT lt_likp BY vbeln.
ENDIF.
ENDIF.
* Get Condition Types
SELECT knumv
kposn
kschl
kbetr
waers
kwert
FROM konv
INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv = lt_vbrk-knumv
AND   koaid = yss_cl_type_pool=>yss_c_koaid.
IF sy-subrc = 0 AND lt_konv IS NOT INITIAL .
SORT lt_konv BY knumv kposn.
ENDIF.
* Get Sold to Party Name
SELECT vbeln
posnr
parvw
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln
AND   parvw IN (yss_cl_type_pool=>yss_c_ag,yss_cl_type_pool
IF sy-subrc = 0.
SORT lt_vbpa BY vbeln parvw.

***  >>> START GANGADHAR20180522 "Changes to get the customer name based
***        SELECT kunnr
***               name1
***               FROM kna1
***               INTO TABLE lt_kna1
***               FOR ALL ENTRIES IN lt_vbpa
***               WHERE kunnr = lt_vbpa-kunnr.
***        IF sy-subrc = 0.
***          SORT lt_kna1 BY kunnr.
***        ENDIF.
*  Fetch the partner names
SELECT addrnumber name1 name2 FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.
***  <<< END GANGADHAR20180522
ENDIF.
ENDIF.
*    ENDIF.

LOOP AT lt_vbrk INTO ls_vbrk.
*Billing Doc No
ls_bill_list-bill_doc    = ls_vbrk-vbeln.
*Billing Type
ls_bill_list-bill_type   = ls_vbrk-fkart.
*Billing Category
ls_bill_list-bill_cat    = ls_vbrk-fktyp.
*Document Category description
CASE ls_vbrk-vbtyp.
WHEN 'M'.
ls_bill_list-doc_cat = 'Invoice'(035).
WHEN 'N'.
ls_bill_list-doc_cat = 'Cancellation'(036).
WHEN 'O'.
ls_bill_list-doc_cat = 'Credit Memo'(037).
WHEN 'S'.
ls_bill_list-doc_cat = 'Cancellation of Credit Memo'(039).
ENDCASE.
*Billing Creation Date
ls_bill_list-bill_date   = ls_vbrk-erdat.
*Posting date
ls_bill_list-post_date   = ls_vbrk-fkdat.
*Condition Record
ls_bill_list-doc_cond    = ls_vbrk-knumv.
*Net Value
ls_bill_list-net_value   = ls_vbrk-netwr.
*Sold to Details
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=
IF sy-subrc = 0 AND ls_vbpa-kunnr IS NOT INITIAL.
*Sold to Num
ls_bill_list-sold_to_num = ls_vbpa-kunnr.
***        READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbpa-kunn
READ TABLE lt_adrc INTO lwa_adrc WITH KEY addrnumber = ls_vbpa-a
IF sy-subrc = 0.
*Sold to Party Name
ls_bill_list-sold_to_name = lwa_adrc-name1.
ENDIF.
ENDIF.

*Ship to Details
CLEAR : ls_vbpa,ls_kna1.
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=
IF sy-subrc = 0 AND ls_vbpa-kunnr IS NOT INITIAL.
ls_bill_list-payer_num = ls_vbpa-kunnr.
***        READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbpa-kunn
READ TABLE lt_adrc INTO lwa_adrc WITH KEY addrnumber = ls_vbpa-a
IF sy-subrc = 0.
ls_bill_list-payer_name = lwa_adrc-name1.
ENDIF.
ENDIF.
*Total Amount from Item Table
READ TABLE lt_vbrp WITH KEY vbeln = ls_vbrk-vbeln TRANSPORTING
NO FIELDS BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index.
lv_index = sy-tabix.
LOOP AT lt_vbrp INTO ls_vbrp FROM lv_index.
IF ls_vbrp-vbeln NE ls_vbrk-vbeln.
EXIT.
ENDIF.
ls_bill_list-total_amount = ls_bill_list-total_amount + ls_vbr
CLEAR :ls_vbrp.
ENDLOOP.
ENDIF.
*Condition Types Taxes
READ TABLE lt_vbrp WITH KEY vbeln = ls_vbrk-vbeln TRANSPORTING
NO FIELDS BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index1.
lv_index1 = sy-tabix.
LOOP AT lt_vbrp INTO ls_vbrp FROM lv_index1.
IF ls_vbrp-vbeln NE ls_vbrk-vbeln.
EXIT.
ENDIF.
*Process Taxes
READ TABLE lt_konv TRANSPORTING NO FIELDS
WITH KEY knumv = ls_vbrk-knumv
kposn = ls_vbrp-posnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index2.
lv_index2 = sy-tabix.
LOOP AT lt_konv INTO ls_konv FROM lv_index2.
IF ls_konv-knumv NE ls_vbrk-knumv OR ls_konv-kposn NE ls_v
EXIT.
ENDIF.
CASE ls_konv-kschl.
WHEN yss_cl_type_pool=>yss_c_cgst. "CGST Amount
ls_bill_list-sum_camt = ls_bill_list-sum_camt + ls_kon
WHEN yss_cl_type_pool=>yss_c_sgst  OR
yss_cl_type_pool=>yss_c_ugst. "SGST/UGST Amount
ls_bill_list-sum_samt = ls_bill_list-sum_samt + ls_kon
WHEN yss_cl_type_pool=>yss_c_igst. "IGST Amount
ls_bill_list-sum_iamt = ls_bill_list-sum_iamt + ls_kon
ENDCASE.
CLEAR : ls_konv.
ENDLOOP.
ENDIF.
CLEAR : ls_vbrp.
ENDLOOP.
ENDIF.
*Billing Doc Status
IF ls_vbrk-fksto IS INITIAL.
CASE ls_vbrk-rfbsk.
WHEN yss_cl_type_pool=>yss_c_c.
ls_bill_list-status = 'Posted'(021).
WHEN yss_cl_type_pool=>yss_c_b.
ls_bill_list-status = 'Accounting Error'(022).
WHEN yss_cl_type_pool=>yss_c_f.
ls_bill_list-status = 'Pricing Error'(023).
WHEN OTHERS.
ls_bill_list-status = 'Other Errors'(024).
ENDCASE.
ELSE.
ls_bill_list-status = 'Cancelled'(038).
ENDIF.

*Delivery No
READ TABLE lt_vbrp INTO ls_vbrp WITH KEY vbeln = ls_vbrk-vbeln BIN
IF sy-subrc = 0.
ls_bill_list-delv_no = ls_vbrp-vgbel.
*Delivery Date
READ TABLE lt_likp INTO ls_likp WITH KEY vbeln = ls_bill_list-de
IF sy-subrc = 0.
ls_bill_list-delv_date = ls_likp-lfdat.
ENDIF.
ENDIF.
APPEND ls_bill_list TO ex_bill_list.
CLEAR : ls_vbrk,ls_bill_list,ls_kna1,ls_vbpa,ls_kna1,ls_likp,ls_vb
ENDLOOP.
SORT ex_bill_list BY bill_date DESCENDING bill_doc DESCENDING.
ENDMETHOD.
GET_BILLING_DETAILS
item
METHOD get_billing_details.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 28-Feb-2018
* Description : Get Billing Details
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

* Types Declarations
TYPES : BEGIN OF lty_vbrk,
vbeln TYPE vbrk-vbeln,
fkart TYPE vbrk-fkart,
fktyp TYPE vbrk-fktyp,
fkdat TYPE vbrk-fkdat,
netwr TYPE vbrk-netwr,
kunrg TYPE vbrk-kunrg,
kunag TYPE vbrk-kunag,
knumv TYPE vbrk-knumv,
END OF lty_vbrk.

TYPES : BEGIN OF lty_vbrp,
vbeln TYPE vbrp-vbeln,
posnr TYPE vbrp-posnr,
fkimg TYPE vbrp-fkimg,
vrkme TYPE vbrp-vrkme,
meins TYPE vbrp-meins,
prsdt TYPE vbrp-prsdt,
netwr TYPE vbrp-netwr,
matnr TYPE vbrp-matnr,
arktx TYPE vbrp-arktx,
charg TYPE vbrp-charg,
mwsbp TYPE vbrp-mwsbp,
vgbel TYPE vbrp-vgbel,
END OF lty_vbrp.

TYPES : BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
parvw TYPE vbpa-parvw,
kunnr TYPE vbpa-kunnr,
adrnr TYPE vbpa-adrnr,
END OF lty_vbpa.

TYPES : BEGIN OF lty_adrc,
addrnumber TYPE adrc-addrnumber,
*              stcd3      TYPE stcd3,
name1      TYPE adrc-name1,
name2      TYPE adrc-name2,
city1      TYPE adrc-city1,
post_code1 TYPE adrc-post_code1,
country    TYPE adrc-country,
region     TYPE adrc-region,
str_suppl1 TYPE adrc-str_suppl1,
str_suppl2 TYPE adrc-str_suppl2,
city2      TYPE ad_city2,
home_city  TYPE ad_city3,
name_co    TYPE ad_name_co,
street     TYPE ad_street,
house_num1 TYPE ad_hsnm1,
tel_number TYPE ad_tlnmbr1,
END OF lty_adrc.
TYPES : BEGIN OF lty_kna1,
addrnumber TYPE adrc-addrnumber,
stcd3      TYPE stcd3,
END OF lty_kna1.

TYPES : BEGIN OF lty_konv,
knumv TYPE konv-knumv,
kposn TYPE konv-kposn,
kschl TYPE konv-kschl,
kbetr TYPE konv-kbetr,
kwert TYPE konv-kwert,
END OF lty_konv.

TYPES: BEGIN OF lty_konp,
knumh TYPE knumh,
kopos TYPE kopos,
kbetr TYPE kbetr_kond,
END OF lty_konp.

* Data Declarations
DATA : ls_vbrk             TYPE lty_vbrk,
lt_vbrp             TYPE TABLE OF lty_vbrp,
ls_vbrp             TYPE lty_vbrp,
lt_vbpa             TYPE TABLE OF lty_vbpa,
ls_vbpa             TYPE lty_vbpa,
lt_adrc             TYPE TABLE OF lty_adrc,
ls_adrc             TYPE lty_adrc,
lt_konv             TYPE TABLE OF lty_konv,
ls_konv             TYPE lty_konv,
ls_bill_details_hdr TYPE yss_s_bill_hdr,
ls_bill_details_itm TYPE yss_s_bill_itm,
lv_zspe             TYPE kbetr,
lv_zper             TYPE kbetr,
lv_lfdat            TYPE lfdat_v,
lt_lines            TYPE TABLE OF tline,
ls_lines            TYPE tline,
lv_name             TYPE thead-tdname,
lt_texts            TYPE yss_tt_header_texts,
ls_texts            TYPE yss_s_header_texts,
lt_ret_sales_qty    TYPE yss_tt_vbfa,
lv_index            TYPE i,
lv_billing_no       TYPE vbeln_vf,
lt_jcust            TYPE TABLE OF j_1imocust,
lt_kna1             TYPE TABLE OF lty_kna1,
lv_kunnr_tmp        TYPE kunnr,
lt_a969             TYPE STANDARD TABLE OF a969,     "+++GANG
lt_konp             TYPE STANDARD TABLE OF lty_konp. "+++GANG

CONSTANTS : lc_zrks TYPE auart VALUE 'ZRKS'.
*Leading zero's
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = im_billing_no
IMPORTING
output = lv_billing_no.

* Billing Header Data
SELECT SINGLE vbeln
fkart
fktyp
fkdat
netwr
kunrg
kunag
knumv
FROM vbrk
INTO ls_vbrk
WHERE vbeln = lv_billing_no
AND   bupla = im_bupla.

IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
* Billing Item Data
SELECT vbeln
posnr
fkimg
vrkme
meins
prsdt
netwr
matnr
arktx
charg
mwsbp
vgbel    "+++GANGADHAR20180507
FROM vbrp
INTO TABLE lt_vbrp
WHERE vbeln = ls_vbrk-vbeln.
IF sy-subrc = 0.
SORT lt_vbrp BY vbeln.
ENDIF.
* Sold to Party & Ship to Party Address No's
SELECT vbeln
posnr
parvw
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa
WHERE vbeln = ls_vbrk-vbeln
AND   parvw IN (yss_cl_type_pool=>yss_c_ag,yss_cl_type_pool=>
IF sy-subrc = 0.
SORT lt_vbpa BY vbeln parvw.

* Address
SELECT addrnumber
name1
name2
city1
post_code1
country
region
city2     " Drug License number       "++sapabap.08052018
home_city " GSTIN number              "++sapabap.08052018
name_co   " PAN number                "++sapabap.08052018
street
house_num1
tel_number
FROM adrc
INTO CORRESPONDING FIELDS OF          "++sapabap.08052018
TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber = lt_vbpa-adrnr.
IF sy-subrc = 0.
SORT lt_adrc BY addrnumber.
ENDIF.
SELECT *
FROM j_1imocust
INTO TABLE lt_jcust
FOR ALL ENTRIES IN lt_vbpa
WHERE kunnr = lt_vbpa-kunnr.
IF sy-subrc EQ 0.
sort lt_jcust by kunnr. "+++hana
ENDIF.
SELECT adrnr
stcd3
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_vbpa
WHERE adrnr = lt_vbpa-adrnr.
if sy-subrc eq 0.
sort lt_kna1 by addrnumber. "+++hana
endif.
ENDIF.
* Condition Taxes and Amounts
SELECT knumv
kposn
kschl
kbetr
kwert
FROM konv
INTO TABLE lt_konv
WHERE knumv = ls_vbrk-knumv
AND   kschl IN (yss_cl_type_pool=>yss_c_zpro,yss_cl_type_pool
yss_cl_type_pool=>yss_c_zper,yss_cl_type_pool
yss_cl_type_pool=>yss_c_sgst,yss_cl_type_pool
IF sy-subrc = 0.
SORT lt_konv BY knumv kposn kschl.
ENDIF.

*** >>> START GANGADHAR20180507
READ TABLE lt_vbrp INTO DATA(lwa_vbrp) WITH KEY vbeln = lv_billing_n
IF sy-subrc EQ 0.
* Get the delivery date based on the delivery number
SELECT SINGLE lfdat FROM likp INTO lv_lfdat WHERE vbeln EQ lwa_vbr
IF sy-subrc EQ 0.
ls_bill_details_hdr-delv_date  = lv_lfdat.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180507


* Billing Details Header
*Billing No
ls_bill_details_hdr-bill_doc  = ls_vbrk-vbeln.
*Billing Type
ls_bill_details_hdr-bill_type = ls_vbrk-fkart.
*Billing Category
ls_bill_details_hdr-bill_cat  = ls_vbrk-fktyp.
*Billing Date
ls_bill_details_hdr-bill_date = ls_vbrk-fkdat.

*Sold to Party Address
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=>y
IF sy-subrc = 0.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-adrn
IF sy-subrc = 0.
ls_bill_details_hdr-sold_to_name    = ls_adrc-name1.
ls_bill_details_hdr-sold_to_name2   = ls_adrc-name2.
ls_bill_details_hdr-sold_to_street1 = ls_adrc-str_suppl1.
ls_bill_details_hdr-sold_to_street2 = ls_adrc-str_suppl2.
ls_bill_details_hdr-sold_to_city    = ls_adrc-city1.
ls_bill_details_hdr-sold_post_code1 = ls_adrc-post_code1.
ls_bill_details_hdr-sold_to_country = ls_adrc-country.
ls_bill_details_hdr-drug_licence    = ls_adrc-city2.    " Drug L
ls_bill_details_hdr-gstin_number    = ls_adrc-home_city. " GSTIN
ls_bill_details_hdr-pan_no          = ls_adrc-name_co.   " PAN n
ls_bill_details_hdr-street          = ls_adrc-street.
ls_bill_details_hdr-region          = ls_adrc-region.
ls_bill_details_hdr-telephone       = ls_adrc-tel_number.
ls_bill_details_hdr-house_num       = ls_adrc-house_num1.
ls_bill_details_hdr-sold_to_num     = ls_vbpa-kunnr.

* Get the email id from ADR6
SELECT SINGLE smtp_addr FROM adr6 INTO ls_bill_details_hdr-email
WHERE addrnumber EQ ls_adrc-addrnumber.
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

*    Get the State name based on the REGION(E.g. 36 - Telangana)
SELECT SINGLE bezei INTO ls_bill_details_hdr-sold_to_state FROM
WHERE spras EQ sy-langu
AND land1 EQ 'IN'
AND bland EQ ls_adrc-region.
IF sy-subrc EQ 0.
* Do nothing
ENDIF.
ENDIF.

" check if one time customer
SELECT SINGLE kunnr FROM kna1
INTO lv_kunnr_tmp
WHERE kunnr  = ls_vbpa-kunnr
AND   xcpdk  EQ ''.  "Normal customer
IF sy-subrc EQ 0.
READ TABLE lt_kna1 ASSIGNING FIELD-SYMBOL(<lfs_kna1>) WITH KEY a
IF sy-subrc EQ 0.
ls_bill_details_hdr-gstin_number = <lfs_kna1>-stcd3.
ENDIF.
READ TABLE lt_jcust ASSIGNING FIELD-SYMBOL(<lfs_jcust>) WITH KEY
IF sy-subrc EQ 0.
ls_bill_details_hdr-drug_licence = <lfs_jcust>-j_1ilstno.
ls_bill_details_hdr-pan_no = <lfs_jcust>-j_1ipanno.
ENDIF.
ENDIF.



ENDIF.
*Ship to Party Address
CLEAR : ls_vbpa,ls_adrc.
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=>y
IF sy-subrc = 0.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-adrn
IF sy-subrc = 0.
ls_bill_details_hdr-ship_to_name    = ls_adrc-name1.
ls_bill_details_hdr-ship_to_name2   = ls_adrc-name2.
ls_bill_details_hdr-ship_to_street1 = ls_adrc-str_suppl1.
ls_bill_details_hdr-ship_to_street2 = ls_adrc-str_suppl2.
ls_bill_details_hdr-ship_to_city    = ls_adrc-city1.
ls_bill_details_hdr-ship_post_code1 = ls_adrc-post_code1.
ls_bill_details_hdr-ship_to_country = ls_adrc-country.
ls_bill_details_hdr-drug_licence    = ls_adrc-city2.    " Drug L
ls_bill_details_hdr-gstin_number    = ls_adrc-home_city. " GSTIN
ls_bill_details_hdr-pan_no          = ls_adrc-name_co.
ls_bill_details_hdr-ship_to_num     = ls_vbpa-kunnr.
*    Get the State name based on the REGION(E.g. 36 - Telangana)
SELECT SINGLE bezei INTO ls_bill_details_hdr-ship_to_state FROM
WHERE spras EQ sy-langu
AND land1 EQ 'IN'
AND bland EQ ls_adrc-region.
IF sy-subrc EQ 0.
* Do nothing
ENDIF.
ENDIF.

" check if one time customer
CLEAR lv_kunnr_tmp.
SELECT SINGLE kunnr FROM kna1
INTO lv_kunnr_tmp
WHERE kunnr  = ls_vbpa-kunnr
AND  xcpdk EQ ''.  " ktokd EQ 'ZOTC'.
IF sy-subrc EQ 0.  "Normal customer
READ TABLE lt_kna1 ASSIGNING <lfs_kna1> WITH KEY addrnumber = ls
IF sy-subrc EQ 0.
ls_bill_details_hdr-gstin_number = <lfs_kna1>-stcd3.
ENDIF.
READ TABLE lt_jcust ASSIGNING <lfs_jcust> WITH KEY kunnr = ls_vb
IF sy-subrc EQ 0.
ls_bill_details_hdr-drug_licence = <lfs_jcust>-j_1ilstno.
ls_bill_details_hdr-pan_no       = <lfs_jcust>-j_1ipanno.
ENDIF.
ENDIF." select query
ENDIF.
* Header Note1
lv_name = ls_vbrk-vbeln.
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = '0002'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = '0002'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*GR/RR No.
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'Z002'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'Z002'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Final destination
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'Y012'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'Y012'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Transport Information
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = '0102'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = '0102'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Bank/Direct
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'Z005'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'Z005'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Vessel/Flight/Road permit no.
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'Y009'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'Y009'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Freight
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'Z007'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'Z007'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Delivery At
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'Z006'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'Z006'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Special Instructions
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'Y004'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'Y004'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Package Number
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'ZPAC'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'ZPAC'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*C Form Number
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'ZOOC'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'ZOOC'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*C Form Amount
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'ZOO8'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'ZOO8'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Reason of Cancellation
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = 'ZOO9'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF lt_lines IS NOT INITIAL.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_texts-text_id  = 'ZOO9'.
ls_texts-tdobject = 'VBBK'.
ls_texts-tdline  =  ls_lines-tdline.
APPEND ls_texts TO lt_texts.
CLEAR : ls_texts,lt_lines,ls_lines.
ENDIF.
ENDIF.

*Header Text's
IF lt_texts IS NOT INITIAL.
ls_bill_details_hdr-remarks = lt_texts[].
ENDIF.

APPEND ls_bill_details_hdr TO ex_bill_hdr.

* If im_doctype is 'ZRKS' then check validation for already created retu
IF im_doctype EQ lc_zrks. "'ZRKS'.
CALL METHOD get_return_sales_qty_details
EXPORTING
im_vbeln         = im_billing_no
IMPORTING
ex_ret_sales_qty = lt_ret_sales_qty.
ENDIF.

*** >>> START GANGADHAR20180627
* Fetch MRP details
SELECT * FROM a969 INTO TABLE lt_a969
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr EQ lt_vbrp-matnr
AND charg EQ lt_vbrp-charg
AND datab LE lt_vbrp-prsdt
AND datbi GE lt_vbrp-prsdt.
IF sy-subrc EQ 0.
SORT lt_a969 BY matnr charg.
SELECT knumh kopos kbetr FROM konp
INTO TABLE lt_konp
FOR ALL ENTRIES IN lt_a969
WHERE knumh EQ lt_a969-knumh
AND loevm_ko EQ space.
IF sy-subrc EQ 0.
SORT lt_konp BY knumh.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180627

*Item details
LOOP AT lt_vbrp INTO ls_vbrp.

IF im_doctype EQ lc_zrks.
READ TABLE lt_ret_sales_qty INTO DATA(ls_ret_sales_qty) WITH KEY
IF sy-subrc EQ 0.
ls_vbrp-fkimg = ls_vbrp-fkimg - ls_ret_sales_qty-rfmng.
ENDIF.
IF ls_vbrp-fkimg IS INITIAL.
CONTINUE.
ENDIF.
ENDIF.

*Item No
ls_bill_details_itm-item_no  = ls_vbrp-posnr.
*Material
ls_bill_details_itm-material = ls_vbrp-matnr.
*Material Description
ls_bill_details_itm-mat_desc = ls_vbrp-arktx.
*Quantity
ls_bill_details_itm-qty      = ls_vbrp-fkimg.
*UOM
ls_bill_details_itm-uom      = ls_vbrp-meins.
*Net Value
ls_bill_details_itm-net_val  = ls_vbrp-netwr.
*Discounts & Values
LOOP AT lt_konv INTO ls_konv WHERE knumv = ls_vbrk-knumv
AND   kposn = ls_vbrp-posnr.
CASE ls_konv-kschl.
*Price
WHEN yss_cl_type_pool=>yss_c_zpro.
ls_bill_details_itm-rate  = ls_konv-kbetr.
ls_bill_details_itm-price = ls_bill_details_itm-price + ls_k
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zspe.
lv_zspe = lv_zspe + ls_konv-kbetr.
ls_bill_details_itm-sch_val = ls_bill_details_itm-sch_val +
ls_bill_details_itm-sch_type = 'A'.  " Percentage
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zsvl.
ls_bill_details_itm-fix_sch = ls_bill_details_itm-fix_sch +
ls_bill_details_itm-sch_val = ls_bill_details_itm-sch_val +
ls_bill_details_itm-sch_type = 'B'.  " Amount
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zper.
lv_zper = lv_zper + ls_konv-kbetr.
ls_bill_details_itm-dis_amt = ls_bill_details_itm-dis_amt +
ls_bill_details_itm-dis_type = 'A'.  " Percentage
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zval.
ls_bill_details_itm-dis_val = ls_bill_details_itm-dis_val +
ls_bill_details_itm-dis_amt = ls_bill_details_itm-dis_amt +
ls_bill_details_itm-dis_type = 'B'.  " Amount
*CGST Rate & CGST Amt
WHEN yss_cl_type_pool=>yss_c_cgst.
ls_bill_details_itm-cgst_rate = ls_bill_details_itm-cgst_rat
ls_bill_details_itm-cgst_amt  = ls_bill_details_itm-cgst_amt
*SGST/UTGST Rate & SGST/UTGST Amt
WHEN yss_cl_type_pool=>yss_c_sgst OR yss_cl_type_pool=>yss_c_u
ls_bill_details_itm-sgst_rate = ls_bill_details_itm-sgst_rat
ls_bill_details_itm-sgst_amt  = ls_bill_details_itm-sgst_amt
*IGST Rate & IGST Amt
WHEN yss_cl_type_pool=>yss_c_igst.
ls_bill_details_itm-igst_rate = ls_bill_details_itm-igst_rat
ls_bill_details_itm-igst_amt  = ls_bill_details_itm-igst_amt
ENDCASE.
CLEAR : ls_konv.
ENDLOOP.
*Fix Sch
IF lv_zspe IS NOT INITIAL.
ls_bill_details_itm-fix_sch = lv_zspe / 10.
ENDIF.
*Dis Val
IF lv_zper IS NOT INITIAL.
ls_bill_details_itm-dis_val = lv_zper / 10.
ENDIF.
*CGST Rate
ls_bill_details_itm-cgst_rate = ls_bill_details_itm-cgst_rate / 10
*SGST/UGST Rate
ls_bill_details_itm-sgst_rate = ls_bill_details_itm-sgst_rate / 10
*IGST Rate
ls_bill_details_itm-igst_rate = ls_bill_details_itm-igst_rate / 10
*Total Amount
ls_bill_details_itm-total_amt = ls_vbrp-netwr + ls_vbrp-mwsbp.

*** >>> START GANGADHAR20180627
*MRP price
READ TABLE lt_a969 INTO DATA(ls_a969) WITH KEY matnr = ls_vbrp-mat
IF sy-subrc EQ 0.
READ TABLE lt_konp INTO DATA(ls_konp) WITH KEY knumh = ls_a969-k
IF sy-subrc EQ 0.
ls_bill_details_itm-mrp = ls_konp-kbetr.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180627

APPEND ls_bill_details_itm TO ex_bill_item.
CLEAR : ls_vbrp,lv_zper,lv_zspe,ls_bill_details_itm.
ENDLOOP.
CLEAR : ls_vbrk,ls_adrc,ls_vbpa,ls_bill_details_hdr,ls_lines,lv_name

IF ex_bill_item IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>invoice_qty_referenced.
ENDIF.

ENDMETHOD.
CHECK_DUPLICATE_CUST
item
METHOD check_duplicate_cust.
*---------------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*---------------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited            *
* Created by  : Abhishek T                                            *
* Created on  : 28-Feb-2018                                           *
* Description : Method to check duplicacy for customer details        *
*---------------------------------------------------------------------*
*                       C H A N G E    L O G
*---------------------------------------------------------------------*
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*---------------------------------------------------------------------*
TYPES : BEGIN OF lty_gstin,
kunnr TYPE kunnr,
name1 TYPE name1,
stcd3 TYPE stcd3,
END OF lty_gstin,

BEGIN OF lty_dlno,
kunnr     TYPE kunnr,
*              name1     TYPE name1,
j_1ilstno TYPE j_1ilstno,
END OF lty_dlno,
BEGIN OF lty_kna1,
kunnr TYPE kunnr,
name1 TYPE name1,
END OF lty_kna1,
BEGIN OF lty_customer,
kunnr TYPE kunnr,
END OF lty_customer.
DATA : lt_gstin                 TYPE TABLE OF lty_gstin,
lt_dlno                  TYPE TABLE OF lty_dlno,
lt_kna1                  TYPE TABLE OF lty_kna1,
lv_int                   TYPE i,
lwa_yss_s_dlno_duplicate TYPE yss_s_dlno_duplicate,
ls_return                TYPE bapiret2,
lo_exception             TYPE REF TO ycx_ss_exception,
ls_sales_area            TYPE yss_s_sales_area,
lt_customer              TYPE TABLE OF lty_customer.


FIELD-SYMBOLS : <lfs_gstin>    TYPE lty_gstin,
<lfs_dlno>     TYPE lty_dlno,
<lfs_kna1>     TYPE lty_kna1,
<lfs_ex_gstin> TYPE yss_s_gstin_duplicate.

*Checks if importing parameters ae initial
IF im_gstin IS INITIAL AND
im_dlno  IS INITIAL  .
ls_return-type  = yss_cl_type_pool=>yss_c_e.
ls_return-number = yss_cl_type_pool=>yss_c_001.
ls_return-message = 'Insufficient arguments'(001).
APPEND ls_return TO ex_return.
CLEAR ls_return.
*Raise exception
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>insufficient_arguments.
CREATE OBJECT lo_exception.
ENDIF.

TRY.
**Get sales area details for input Plant
CALL METHOD yss_cl_sd_process=>get_sales_area
EXPORTING
im_vwerk      = im_req_params-werks
IMPORTING
ex_sales_area = ls_sales_area.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
RETURN.
ENDTRY.
*
**fetch from Customer Master Sales Data Table
IF ls_sales_area IS NOT INITIAL.
SELECT kunnr
FROM knvv
INTO TABLE lt_customer WHERE
vkorg = ls_sales_area-vkorg AND
vtweg = ls_sales_area-vtweg AND
spart = ls_sales_area-spart.
IF sy-subrc EQ 0.
SORT lt_customer BY kunnr.
ELSE.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>customer_details_not_found.
ENDIF.
ENDIF.

*Validate GSTIN number
*Fetch  from KNA1 to check if record already exists or not
IF im_gstin IS NOT INITIAL.
SELECT kunnr
name1
stcd3        "GSTIN number
FROM kna1
INTO TABLE lt_gstin
FOR ALL ENTRIES IN lt_customer
WHERE kunnr = lt_customer-kunnr AND
stcd3 = im_gstin.
IF sy-subrc EQ 0.
SORT lt_gstin BY kunnr.
*preparing list of customer for corresponding GSTINs
ex_duplicate_cust_gstin = lt_gstin.
ENDIF.
ENDIF.

*Validate DL number
*Fetch from J_1IMOCUST to check if record already exists or not
IF im_dlno IS NOT INITIAL.
SELECT kunnr
j_1ilstno
FROM j_1imocust
INTO TABLE lt_dlno FOR ALL ENTRIES IN lt_customer
WHERE kunnr = lt_customer-kunnr AND
j_1ilstno = im_dlno.
IF sy-subrc EQ 0.
SORT lt_dlno BY kunnr.
SELECT  kunnr name1  FROM kna1 INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_dlno WHERE kunnr = lt_dlno-kunnr.
IF sy-subrc EQ 0.
SORT lt_kna1 by kunnr.
ENDIF.
*prepare export list ( table )
LOOP AT lt_dlno ASSIGNING <lfs_dlno>.
lwa_yss_s_dlno_duplicate-customer = <lfs_dlno>-kunnr.
lwa_yss_s_dlno_duplicate-dlno = <lfs_dlno>-j_1ilstno.  "DL num
READ TABLE lt_kna1 ASSIGNING <lfs_kna1> WITH KEY kunnr = <lfs_
IF sy-subrc EQ 0.
lwa_yss_s_dlno_duplicate-name = <lfs_kna1>-name1.
ENDIF.
APPEND lwa_yss_s_dlno_duplicate TO ex_duplicate_cust_dlno.
ENDLOOP.
ENDIF.
ENDIF.

*If no existing records are fetched from table
IF ex_duplicate_cust_gstin  IS INITIAL AND
ex_duplicate_cust_dlno   IS INITIAL.
ls_return-type = yss_cl_type_pool=>yss_c_s.
ls_return-message = 'No duplicate records found for given inputs'(
APPEND ls_return TO ex_return.
CLEAR ls_return.
ELSE.
*If GSTIN details found
IF ex_duplicate_cust_gstin IS NOT INITIAL.
LOOP AT ex_duplicate_cust_gstin ASSIGNING <lfs_ex_gstin>.
ls_return-type  = yss_cl_type_pool=>yss_c_e.
ls_return-message = text-003.
REPLACE ALL OCCURRENCES OF : '&CUSTOMER&' IN ls_return-message
'&GSTIN&' IN ls_return-message WI
APPEND ls_return TO ex_return.
ENDLOOP.
ELSE.
IF im_gstin IS NOT INITIAL.
ls_return-type  = yss_cl_type_pool=>yss_c_s.
ls_return-message = text-004.
REPLACE ALL OCCURRENCES OF '&GSTIN&' IN ls_return-message WITH
APPEND ls_return TO ex_return.
ENDIF.
ENDIF.
*If DLNO details found
IF ex_duplicate_cust_dlno IS NOT INITIAL.
LOOP AT ex_duplicate_cust_dlno INTO lwa_yss_s_dlno_duplicate.
ls_return-type  = yss_cl_type_pool=>yss_c_e.
ls_return-message = text-012.
REPLACE ALL OCCURRENCES OF : '&CUSTOMER&' IN ls_return-message
'&DLNO&' IN ls_return-message WIT
APPEND ls_return TO ex_return.
ENDLOOP.
ELSE.
IF im_dlno IS NOT INITIAL.
ls_return-type  = yss_cl_type_pool=>yss_c_s.
ls_return-message = text-013.
REPLACE ALL OCCURRENCES OF '&DLNO&' IN ls_return-message WITH
APPEND ls_return TO ex_return.
ENDIF.
ENDIF.
ENDIF.

* Update Sequence Number to Return Messages
LOOP AT ex_return ASSIGNING FIELD-SYMBOL(<lfs_return>).
lv_int = lv_int + 1.
<lfs_return>-number = lv_int.
ENDLOOP.

IF <lfs_return> IS ASSIGNED.
UNASSIGN <lfs_return>.
ENDIF.
IF <lfs_ex_gstin> IS ASSIGNED.
UNASSIGN <lfs_ex_gstin>.
ENDIF.
IF <lfs_kna1> IS ASSIGNED.
UNASSIGN <lfs_kna1>.
ENDIF.

ENDMETHOD.
GET_SALES_GROUPS
item
METHOD get_sales_groups.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
DATA:lr_tvarvc TYPE rsdsselopt_t,
lt_tvkgr  TYPE TABLE OF tvkgr.

CLEAR:ex_rmss_govt_sg,ex_rmss_kad_sg,ex_rmss_mdd_sg,ex_rmss_pcd_sg,l
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_SO_RMSS_PCD_SG'
IMPORTING
ex_range       = lr_tvarvc.

IF lr_tvarvc IS NOT INITIAL.
SELECT * FROM tvkgr
INTO TABLE lt_tvkgr
WHERE vkgrp IN lr_tvarvc.
IF sy-subrc EQ 0 AND lt_tvkgr IS NOT INITIAL.
SELECT vkgrp bezei FROM tvgrt
INTO TABLE ex_rmss_pcd_sg
FOR ALL ENTRIES IN lt_tvkgr
WHERE spras EQ 'E'
AND vkgrp EQ lt_tvkgr-vkgrp.
IF sy-subrc EQ 0.
** Do nothing
ENDIF.
ENDIF.
ENDIF.

CLEAR:lr_tvarvc,lt_tvkgr.
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_SO_RMSS_MDD_SG'
IMPORTING
ex_range       = lr_tvarvc.
IF lr_tvarvc IS NOT INITIAL.
SELECT * FROM tvkgr
INTO TABLE lt_tvkgr
WHERE vkgrp IN lr_tvarvc.
IF sy-subrc EQ 0 AND lt_tvkgr IS NOT INITIAL.
SELECT vkgrp bezei FROM tvgrt
INTO TABLE ex_rmss_mdd_sg
FOR ALL ENTRIES IN lt_tvkgr
WHERE spras EQ 'E'
AND vkgrp EQ lt_tvkgr-vkgrp.
IF sy-subrc EQ 0.
** Do nothing
ENDIF.
ENDIF.
ENDIF.

CLEAR:lr_tvarvc,lt_tvkgr.
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_SO_RMSS_KAD_SG'
IMPORTING
ex_range       = lr_tvarvc.
IF lr_tvarvc IS NOT INITIAL.
SELECT * FROM tvkgr
INTO TABLE lt_tvkgr
WHERE vkgrp IN lr_tvarvc.
IF sy-subrc EQ 0 AND lt_tvkgr IS NOT INITIAL.
SELECT vkgrp bezei FROM tvgrt
INTO TABLE ex_rmss_kad_sg
FOR ALL ENTRIES IN lt_tvkgr
WHERE spras EQ 'E'
AND vkgrp EQ lt_tvkgr-vkgrp.
IF sy-subrc EQ 0.
** Do nothing
ENDIF.
ENDIF.
ENDIF.

CLEAR:lr_tvarvc,lt_tvkgr.
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_SO_RMSS_GOVT_SG'
IMPORTING
ex_range       = lr_tvarvc.
IF lr_tvarvc IS NOT INITIAL.
SELECT * FROM tvkgr
INTO TABLE lt_tvkgr
WHERE vkgrp IN lr_tvarvc.
IF sy-subrc EQ 0 AND lt_tvkgr IS NOT INITIAL.
SELECT vkgrp bezei FROM tvgrt
INTO TABLE ex_rmss_govt_sg
FOR ALL ENTRIES IN lt_tvkgr
WHERE spras EQ 'E'
AND vkgrp EQ lt_tvkgr-vkgrp.
IF sy-subrc EQ 0.
** Do nothing
ENDIF.
ENDIF.
ENDIF.
ENDMETHOD.
GET_PRICE_LIST
item
METHOD get_price_list.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
DATA:lr_tvarvc TYPE rsdsselopt_t,
lt_t189   TYPE TABLE OF t189.

CLEAR:ex_price_list,lt_t189,lr_tvarvc.
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_SO_RMSS_PRICE_LIST'
IMPORTING
ex_range       = lr_tvarvc.

IF lr_tvarvc IS NOT INITIAL.
SELECT * FROM t189
INTO TABLE lt_t189
WHERE pltyp IN lr_tvarvc.
IF sy-subrc EQ 0 AND lt_t189 IS NOT INITIAL.
SELECT pltyp ptext FROM t189t
INTO TABLE ex_price_list
FOR ALL ENTRIES IN lt_t189
WHERE spras EQ 'E'
AND pltyp EQ lt_t189-pltyp.
IF sy-subrc EQ 0.
** Do nothing
ENDIF.
ENDIF.
ENDIF.
ENDMETHOD.
EDIT_DELIVERY_SO
item
METHOD edit_delivery_so.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
DATA: ls_header_data    TYPE bapiobdlvhdrchg,
ls_header_control TYPE bapiobdlvhdrctrlchg,
lt_header_partner TYPE TABLE OF bapidlvpartnerchg,
lt_item_data      TYPE TABLE OF bapiobdlvitemchg,
lt_return         TYPE TABLE OF bapiret2,
ls_return         TYPE bapiret2.

CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
EXPORTING
header_data    = ls_header_data
header_control = ls_header_control
delivery       = im_vbeln
*       TECHN_CONTROL  =
*       HEADER_DATA_SPL               =
*       HEADER_CONTROL_SPL            =
*       SENDER_SYSTEM  =
TABLES
header_partner = lt_header_partner
*       HEADER_PARTNER_ADDR           =
*       HEADER_DEADLINES              =
item_data      = lt_item_data
*       ITEM_CONTROL   =
*       ITEM_SERIAL_NO =
*       SUPPLIER_CONS_DATA            =
*       EXTENSION1     =
*       EXTENSION2     =
return         = lt_return
*       TOKENREFERENCE =
*       ITEM_DATA_SPL  =
*       COLLECTIVE_CHANGE_ITEMS       =
*       NEW_ITEM_DATA  =
*       NEW_ITEM_DATA_SPL             =
*       NEW_ITEM_ORG   =
*       ITEM_DATA_DOCU_BATCH          =
.
READ TABLE lt_return TRANSPORTING NO FIELDS WITH KEY type = 'E'.
IF sy-subrc NE 0.
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait   = 'X'
IMPORTING
return = ls_return.
ENDIF.
ENDMETHOD.
SIMULATE_DELIVERY
item
METHOD simulate_delivery.

DATA: ls_sales_order         TYPE v54a1_sales_order,
lv_vbeln               TYPE vbeln_va,
c_log_file             TYPE STANDARD TABLE OF  sprot_u,
lv_selection_date      TYPE sy-datlo,
lv_from_item           TYPE posnr,
lv_to_item             TYPE posnr,
lv_count               TYPE vmeng,
lv_open_qty            TYPE vmeng,
lv_index               TYPE i,
lv_otc_flag            TYPE flag,
lt_vbfa                TYPE STANDARD TABLE OF vbfa,
lt_open_qty            TYPE yss_tt_open_quantity,
ls_open_qty            TYPE yss_s_open_quantity,
lt_batch_mat_stock     TYPE yss_tt_batch_mat_stock,
lt_delivery_tables_inx TYPE yss_tt_delv_inx,
lt_delv_inx_tmp        TYPE yss_tt_delv_inx,
ls_delivery_tables     TYPE v54a1_delivery_tables,
lo_exception           TYPE REF TO ycx_ss_exception,
lt_vbbe                TYPE STANDARD TABLE OF vbbe,
lv_werks               TYPE werks_d.   " +++Changed Narayana R
CONSTANTS : lc_d TYPE flag VALUE 'D'.
*    IF im_selection_date IS INITIAL.  "Commented due to current date is
lv_selection_date = sy-datum.
*    ELSE.
*      lv_selection_date = im_selection_date.
*    ENDIF.

lv_vbeln = im_salesorder.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = lv_vbeln
IMPORTING
output = lv_vbeln.

* Fetch salesorder header details
SELECT SINGLE * FROM vbak INTO ls_sales_order-vbak WHERE vbeln = lv_
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>salesorder_not_found
msgv1  = ycx_ss_exception=>format( lv_vbeln ).
ELSEIF ls_sales_order-vbak-vdatu GT im_selection_date.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>req_delv_date_gt_curr_date.
ELSEIF ls_sales_order-vbak-bstzd NE im_req_params-werks. " Check the
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>so_plant_ne_given_plant
msgv1  = ycx_ss_exception=>format( im_req_params-werks ).
ENDIF.

IF im_from_item IS INITIAL.
lv_from_item = 0.
ELSE.
lv_from_item = im_from_item.
ENDIF.

IF im_to_item IS INITIAL.
lv_to_item  = 999999.
ELSE.
lv_to_item = im_to_item.
ENDIF.

IF lv_from_item GT lv_to_item.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>salesorderitem_invalid_range.
ENDIF.
* Fetch Sales Document Types details
SELECT SINGLE * FROM tvak INTO ls_sales_order-tvak WHERE auart = ls_
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

* Fetch salesorder item details
SELECT * FROM vbap INTO TABLE ls_sales_order-vbap WHERE vbeln = ls_s
AND posnr BETWEE
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>salesorderitem_not_found
msgv1  = ycx_ss_exception=>format( lv_vbeln ).
ENDIF.

**** Fetch Sales Requirements: Individual Records ( Open quantity)
***    SELECT vbeln posnr etenr matnr werks charg vbtyp omeng vmeng
***       FROM vbbe INTO TABLE lt_open_qty WHERE vbeln = ls_sales_order-
***       AND posnr BETWEEN lv_from_item AND lv_to_item AND vmeng NE ''.
***    IF sy-subrc EQ 0.
****      SORT lt_open_qty BY vbeln posnr.
***    ENDIF.

* Fetch Schedule Line Data details
SELECT * FROM vbep INTO TABLE ls_sales_order-vbep WHERE vbeln = ls_s
AND posnr BETWEE
*                                                        AND bmeng IS NO
IF sy-subrc EQ 0.
SORT ls_sales_order-vbep BY vbeln posnr. "+++hana
ENDIF.

* Fetch Sales Document: Business Data details
SELECT * FROM vbkd INTO TABLE ls_sales_order-vbkd WHERE vbeln = ls_s
IF sy-subrc EQ 0.
READ TABLE ls_sales_order-vbkd INTO DATA(ls_vbkd) INDEX 1.
IF sy-subrc EQ 0.
READ TABLE ch_delivery_tables-likp INTO DATA(lwa_likp) INDEX 1.
IF sy-subrc EQ 0.
IF ls_vbkd-inco1 NE lwa_likp-inco1 .
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>different_incoterms.
ENDIF.
ENDIF.
ENDIF.
ENDIF.

* Fetch Sales Document: Partner details
SELECT * FROM vbpa INTO TABLE ls_sales_order-vbpa WHERE vbeln = ls_s
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

* Fetch Sales Document: Header Status and Administrative Data details
SELECT * FROM vbuk INTO TABLE ls_sales_order-vbuk WHERE vbeln = ls_s
IF sy-subrc EQ 0 .
READ TABLE ls_sales_order-vbuk INTO DATA(ls_vbuk) INDEX 1.
IF sy-subrc EQ 0 AND ls_vbuk-lfgsk EQ yss_cl_type_pool=>yss_c_c.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>delivery_already_created
msgv1  = ycx_ss_exception=>format( lv_vbeln ).
ENDIF.
ENDIF.

* Fetch Sales Document: Incompletion Log
SELECT * FROM vbuv INTO TABLE ls_sales_order-vbuv WHERE vbeln = ls_s
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

* Fetch Sales Document: Item Status
SELECT * FROM vbup INTO TABLE ls_sales_order-vbup WHERE vbeln = ls_s
***                                                        AND lfgsa IN
IF sy-subrc EQ 0.
* Do nothing
ENDIF.
************************************************************************
***     START GANGADHAR20180412 >>>
* Fetch Sales Document Flow details
SELECT * FROM vbfa INTO TABLE ls_sales_order-vbfa WHERE vbelv = ls_s
IF sy-subrc EQ 0.
* Do nothing
ENDIF.
***DATA :
lt_vbfa[] = ls_sales_order-vbfa[].
SORT lt_vbfa[] BY vbelv posnv.
DELETE lt_vbfa WHERE vbtyp_n NE yss_cl_type_pool=>yss_c_j OR rfmng E
LOOP AT ls_sales_order-vbap INTO DATA(ls_vbap)."
READ TABLE lt_vbfa INTO DATA(ls_vbfa_tmp) WITH KEY vbelv = ls_vbap
IF sy-subrc EQ 0.
lv_index = sy-tabix.
ls_open_qty-vbeln = ls_vbap-vbeln.
ls_open_qty-posnr = ls_vbap-posnr.
ls_open_qty-matnr = ls_vbap-matnr.
ls_open_qty-werks = ls_vbap-werks.
ls_open_qty-vmeng = ls_vbap-kwmeng.
LOOP AT lt_vbfa INTO DATA(ls_vbfa) FROM lv_index.
IF ls_vbfa-vbelv NE ls_vbfa_tmp-vbelv OR ls_vbfa-posnv NE ls_v
EXIT.
ENDIF.
ls_open_qty-vbtyp = ls_vbfa-vbtyp_n.
ls_open_qty-vmeng = ls_open_qty-vmeng - ls_vbfa-rfmng.
ENDLOOP.
APPEND ls_open_qty TO lt_open_qty.
CLEAR ls_open_qty.
ENDIF.
ENDLOOP.
SORT lt_open_qty BY vbeln posnr.
*** <<< END GANGADHAR20180412

************************************************************************

* Fetch Handling Unit - Header Table details
SELECT * FROM vekp INTO TABLE ls_sales_order-vekp WHERE venum = ls_s
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

* Fetch Packing: Handling Unit Item (Contents) details
SELECT * FROM vepo INTO TABLE ls_sales_order-vepo WHERE vbeln = ls_s
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

* Read the new salesorder ship-to-party number
READ TABLE ls_sales_order-vbpa INTO DATA(ls_vbpa) WITH KEY parvw = y
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

* Ship-to-party validation for new sales order.
IF ch_delivery_tables-likp IS NOT INITIAL AND ch_delivery_tables-lip
READ TABLE ch_delivery_tables-likp INTO DATA(ls_likp) INDEX 1.
IF sy-subrc EQ 0.
* Compare the New ship-to-party with Old ship-to-party number
IF ls_vbpa-kunnr NE ls_likp-kunnr .
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>invalid_shiptoparty
msgv1  = ycx_ss_exception=>format( ls_vbpa-kunnr )
msgv2  = ycx_ss_exception=>format( ls_likp-kunnr ).
ENDIF.

* Check the shipping points
READ TABLE ls_sales_order-vbap INTO ls_vbap WITH KEY vstel = ls_
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>invalid_shipping_point
msgv1  = ycx_ss_exception=>format( ls_vbap-vstel )
msgv2  = ycx_ss_exception=>format( ls_likp-vstel ).
ENDIF.

****  Check delivery dates
***        DATA : lv_vdatu TYPE edatu_vbak,
***               lv_prsdt TYPE prsdt.
***        READ TABLE ch_delivery_tables-lips INTO DATA(lwa_lips) INDEX
***        IF sy-subrc EQ 0.
***          SELECT SINGLE vdatu INTO lv_vdatu FROM vbak
***            WHERE vbeln EQ lwa_lips-vgbel.
***          IF sy-subrc NE 0 OR lv_vdatu NE ls_sales_order-vbak-vdatu .
***            RAISE EXCEPTION TYPE ycx_ss_exception
***              EXPORTING
***                textid = ycx_ss_exception=>different_delv_dates.
***          ENDIF.

****  Check Pricing dates.
***          SELECT prsdt INTO lv_prsdt FROM vbkd UP TO 1 ROWS
***            WHERE vbeln EQ lwa_lips-vgbel.
***          ENDSELECT.
***          IF sy-subrc EQ 0.
***            READ TABLE ls_sales_order-vbkd INTO DATA(ls_vbkd) INDEX 1
***            IF sy-subrc NE 0 OR lv_prsdt NE ls_vbkd-prsdt.
***              RAISE EXCEPTION TYPE ycx_ss_exception
***                EXPORTING
***                  textid = ycx_ss_exception=>different_pricing_dates.
***            ENDIF.
***          ENDIF.
***        ENDIF.
ENDIF.

lt_delivery_tables_inx = im_delivery_tables_inx.
SORT lt_delivery_tables_inx BY so_num ref_item_num item_num.

* Read the salesorder from Delivery_inx table with the new salesorder ..
READ TABLE lt_delivery_tables_inx INTO DATA(ls_delivery_tables_inx
IF sy-subrc EQ 0.  " If exising salesorder is passed then do follo
DATA(lv_tabix) = sy-tabix.

lt_delv_inx_tmp = lt_delivery_tables_inx.

DELETE lt_delv_inx_tmp WHERE so_num NE im_salesorder.
DELETE ADJACENT DUPLICATES FROM lt_delv_inx_tmp COMPARING ref_it

LOOP AT lt_delv_inx_tmp INTO DATA(lwa_delv_inx_tmp).
CLEAR lv_count.
LOOP AT lt_delivery_tables_inx INTO DATA(ls_delv_inx_tmp) FROM
IF lwa_delv_inx_tmp-so_num NE ls_delv_inx_tmp-so_num OR lwa_
EXIT .
ENDIF.
IF ls_delv_inx_tmp-upd_flag NE lc_d.
lv_count = lv_count + ls_delv_inx_tmp-qty.
ENDIF.
ENDLOOP.
CLEAR lv_tabix.

*        Update the req qty and weight  based on the salesorder and item
READ TABLE ls_sales_order-vbap WITH KEY vbeln = im_salesorder
posnr = lwa_delv_inx_t
IF sy-subrc EQ 0.
lv_tabix = sy-tabix.
LOOP AT ls_sales_order-vbap ASSIGNING FIELD-SYMBOL(<lfs_vbap
IF <lfs_vbap>-vbeln NE im_salesorder OR <lfs_vbap>-posnr N
EXIT.
ENDIF.
READ TABLE lt_open_qty INTO DATA(ls_vbbe) WITH KEY vbeln =
po
IF sy-subrc EQ 0.
lv_open_qty = ls_vbbe-vmeng - lv_count.
IF lv_open_qty LE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>invalid_salesorder_qty.
ENDIF.
* Weight conversion ( Weight / Quantity ) * no. of open qty
<lfs_vbap>-brgew  = ( <lfs_vbap>-brgew / <lfs_vbap>-kwme
<lfs_vbap>-ntgew  = ( <lfs_vbap>-ntgew / <lfs_vbap>-kwme
<lfs_vbap>-volum  = ( <lfs_vbap>-volum / <lfs_vbap>-kwme

* Open quantity
<lfs_vbap>-kwmeng = lv_open_qty.
<lfs_vbap>-lsmeng = lv_open_qty.
<lfs_vbap>-kbmeng = lv_open_qty.
<lfs_vbap>-klmeng = lv_open_qty.

READ TABLE ls_sales_order-vbep WITH KEY vbeln = <lfs_vba
posnr = <lfs_vba
IF sy-subrc EQ 0. "ASSIGNING FIELD-SYMBOL(<lfs_vbep>)
lv_index = sy-tabix.
LOOP AT ls_sales_order-vbep ASSIGNING FIELD-SYMBOL(<lf
IF <lfs_vbep>-vbeln NE <lfs_vbap>-vbeln OR <lfs_vbep
EXIT.
ENDIF.
*             Open quantity
IF <lfs_vbep>-wmeng IS NOT INITIAL.
<lfs_vbep>-wmeng = lv_open_qty.
ENDIF.
IF <lfs_vbep>-bmeng IS NOT INITIAL.
<lfs_vbep>-bmeng = lv_open_qty.
ENDIF.
IF <lfs_vbep>-lmeng IS NOT INITIAL.
<lfs_vbep>-lmeng = lv_open_qty.
ENDIF.
IF <lfs_vbep>-cmeng IS NOT INITIAL.
<lfs_vbep>-cmeng = lv_open_qty.
ENDIF.
ENDLOOP.
ENDIF.
ENDIF.
ENDLOOP.
ENDIF.
ENDLOOP.
ENDIF.
ENDIF.

* Check so_num, if so_num is initial then it means the new salesorder is
* or given new sales order doesnot contains existing salesorders i.e, LI
IF ls_delivery_tables_inx-so_num IS INITIAL .
*   If the sales order doesnt exists in the given LIKP OR LIPS
LOOP AT ls_sales_order-vbap ASSIGNING <lfs_vbap>.
READ TABLE lt_open_qty INTO ls_vbbe WITH KEY vbeln = <lfs_vbap>-
posnr = <lfs_vbap>-
IF sy-subrc EQ 0.
* Weight conversion ( Weight / Quantity ) * no. of open qty
<lfs_vbap>-brgew  = ( <lfs_vbap>-brgew / <lfs_vbap>-kwmeng ) *
<lfs_vbap>-ntgew  = ( <lfs_vbap>-ntgew / <lfs_vbap>-kwmeng ) *
<lfs_vbap>-volum  = ( <lfs_vbap>-volum / <lfs_vbap>-kwmeng ) *

* Open quantity
<lfs_vbap>-kwmeng = ls_vbbe-vmeng.
<lfs_vbap>-lsmeng = ls_vbbe-vmeng.
<lfs_vbap>-kbmeng = ls_vbbe-vmeng.
<lfs_vbap>-klmeng = ls_vbbe-vmeng.

READ TABLE ls_sales_order-vbep WITH KEY vbeln = <lfs_vbap>-vbe
posnr = <lfs_vbap>-pos
IF sy-subrc EQ 0.
lv_index = sy-tabix.  " ASSIGNING <lfs_vbep>
LOOP AT ls_sales_order-vbep ASSIGNING <lfs_vbep> FROM lv_ind
IF <lfs_vbep>-vbeln NE <lfs_vbap>-vbeln OR <lfs_vbep>-posn
EXIT.
ENDIF.
* Open quantity
IF <lfs_vbep>-wmeng IS NOT INITIAL.
<lfs_vbep>-wmeng = ls_vbbe-vmeng.
ENDIF.
IF <lfs_vbep>-bmeng IS NOT INITIAL.
<lfs_vbep>-bmeng = ls_vbbe-vmeng.
ENDIF.
IF <lfs_vbep>-lmeng IS NOT INITIAL.
<lfs_vbep>-lmeng = ls_vbbe-vmeng.
ENDIF.
IF <lfs_vbep>-cmeng IS NOT INITIAL.
<lfs_vbep>-cmeng = ls_vbbe-vmeng.
ENDIF.
ENDLOOP.

ENDIF.

ENDIF.
ENDLOOP.
ENDIF.

* Simulate delivery
CALL FUNCTION 'SD_SCD_SIMULATE_DELIVERIES'
EXPORTING
i_sales_order                = ls_sales_order
i_selection_date             = lv_selection_date
IMPORTING
e_delivery_tables            = ls_delivery_tables
e_delivery_creation_errors   = e_delivery_creation_errors
e_delivery_creation_warnings = e_delivery_creation_warnings
e_created_deliveries         = e_created_deliveries
TABLES
c_log_file                   = c_log_file.

* If existing salesorder items exists then append the new item num(plus
IF ch_delivery_tables-likp IS NOT INITIAL AND ch_delivery_tables-lip
AND e_created_deliveries IS NOT INITIAL.
*     If SO_NUM is initial then the given sales order is new salesorder
*      IF ls_delivery_tables_inx-so_num IS INITIAL .

* Main item num contains like 10,20,30..
SORT lt_delivery_tables_inx BY main_item_num DESCENDING.
CLEAR ls_delivery_tables_inx.
READ TABLE lt_delivery_tables_inx INTO ls_delivery_tables_inx INDE
IF sy-subrc EQ 0.
DATA(lv_main_item_num) = ls_delivery_tables_inx-main_item_num .
ENDIF.
* Item num contains both item number (10,20... )and batch item number (9
SORT lt_delivery_tables_inx BY item_num DESCENDING.
CLEAR ls_delivery_tables_inx.
READ TABLE lt_delivery_tables_inx INTO ls_delivery_tables_inx INDE
IF sy-subrc EQ 0.
DATA(lv_item_num) = ls_delivery_tables_inx-item_num.
ENDIF.

LOOP AT ls_delivery_tables-lips ASSIGNING FIELD-SYMBOL(<lfs_lips>)
IF <lfs_lips>-posnr EQ <lfs_lips>-vgpos OR <lfs_lips>-charg IS I
<lfs_lips>-posnr = lv_main_item_num = lv_main_item_num + 10.
ELSE.
READ TABLE ls_delivery_tables-lips INTO DATA(ls_lips) WITH KEY
IF sy-subrc EQ 0.
<lfs_lips>-uecha = ls_lips-posnr.
ENDIF.
<lfs_lips>-posnr = lv_item_num = lv_item_num + 1.
ENDIF.
ENDLOOP.

**    Sort and append the LIPS fields bcoz portal side people require th
*      SORT ls_delivery_tables-lips BY vgbel vgpos.
APPEND LINES OF ls_delivery_tables-likp TO ch_delivery_tables-likp
APPEND LINES OF ls_delivery_tables-lips TO ch_delivery_tables-lips
CLEAR : lv_item_num , lv_main_item_num.
*      ENDIF.
ELSEIF e_created_deliveries IS NOT INITIAL.
*      SORT ls_delivery_tables-lips BY vgbel vgpos.
ch_delivery_tables = ls_delivery_tables.
ENDIF.

* Pass the Salesorder delivery date
READ TABLE ch_delivery_tables-likp ASSIGNING FIELD-SYMBOL(<lfs_likp>
IF sy-subrc EQ 0.
<lfs_likp>-aedat = ls_sales_order-vbak-vdatu.
ENDIF.
*  Append the open quantity fields bcoz portal side people require those
APPEND LINES OF lt_open_qty TO ch_open_quantity.
*  Delete the open quantity fields based on the vbeln and posnr.
DELETE ADJACENT DUPLICATES FROM ch_open_quantity COMPARING vbeln pos

*    LOOP AT ls_delivery_tables-lips INTO ls_lips.
*      MOVE-CORRESPONDING ls_lips TO CH_BATCH_MAT_STOCK.
*    ENDLOOP.

MOVE-CORRESPONDING ls_delivery_tables-lips TO lt_batch_mat_stock.
TRY .

CALL METHOD yss_cl_sd_process=>get_otc_address_details
EXPORTING
im_vbeln    = im_salesorder
IMPORTING
ex_address  = ex_cust_address
ex_otc_flag = lv_otc_flag.

* If OTC flag is initial then go for customer address
IF lv_otc_flag IS INITIAL OR ex_cust_address IS INITIAL.

*    >>>START  +++Changed Narayana Raju 20190131.
*         Validate Customer Region
CALL METHOD yss_cl_sd_process=>get_cust_region_validation
EXPORTING
im_werks = im_req_params-werks
im_kunnr = ls_vbpa-kunnr
IMPORTING
ex_werks = lv_werks.
IF sy-subrc EQ 0 AND lv_werks IS INITIAL.
lv_werks = im_req_params-werks.
ENDIF.
*    <<<END  +++Changed Narayana Raju 20190131.

CALL METHOD get_adress_details
EXPORTING
im_kunnr        = ls_vbpa-kunnr
im_vwerk        = lv_werks "im_req_params-werks
IMPORTING
ex_cust_address = ex_cust_address.
ENDIF.

CALL METHOD get_compliance
EXPORTING
im_kunnr           = ls_vbpa-kunnr
im_vwerk           = im_req_params-werks
IMPORTING
ex_cust_compliance = ex_compliance.

CALL METHOD get_batch_material_stock
CHANGING
ch_batch_mat_stock = lt_batch_mat_stock.

APPEND LINES OF lt_batch_mat_stock TO ch_batch_mat_stock.
SORT ch_batch_mat_stock BY matnr charg.
DELETE ADJACENT DUPLICATES FROM ch_batch_mat_stock COMPARING mat

** Call FM to get stock details
DATA : lt_mat_range TYPE ranges_matnr,
lr_mat_range TYPE LINE OF ranges_matnr.
LOOP AT ch_delivery_tables-lips INTO ls_lips.
lr_mat_range-sign   = 'I'.
lr_mat_range-option = 'EQ'.
lr_mat_range-low    = ls_lips-matnr.
APPEND lr_mat_range TO lt_mat_range.
CLEAR lr_mat_range.
ENDLOOP.
CALL METHOD yss_cl_sd_process=>get_stock_details
EXPORTING
im_req_params  = im_req_params
**          im_matnr       = im_mat_no
im_matnr_range = lt_mat_range
**          im_mat_grp     = im_mat_grp
IMPORTING
ex_stock_dets  = ch_avail_stock.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
*        >>>START +++Changed Narayana Raju 31.01.2019
*       If Customer Plant and Sold to party Plant is not equal.
IF lo_exception->if_t100_message~t100key-msgno = '014'
AND lv_werks NE im_req_params-werks.
RETURN.
ENDIF.
*        <<< END +++Changed Narayana Raju 31.01.2019
* Prepare Return Message
ex_return = lo_exception->prepare_bapi_return( ).
RETURN.
ENDTRY.


ENDMETHOD.
EDIT_BILLING_DOCUMENTS
item
METHOD edit_billing_documents.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 05-March-2018
* Description : Edit Billing Document Number's
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

* Data Declarations
DATA : ls_bill_no TYPE yss_s_billing_no,
lt_text    TYPE TABLE OF tline,
ls_text    TYPE tline,
ls_header  TYPE thead,
ls_return  TYPE bapiret1.

* To update Header Text
LOOP AT im_billing_no INTO ls_bill_no.
* Header Details
ls_header-tdname    = ls_bill_no-billing_no.
ls_header-tdobject  = ls_bill_no-object_name.
ls_header-tdid      = ls_bill_no-text_id.
ls_header-tdspras   = 'E'.
* Changed Header Text
ls_text-tdformat = '*'.
ls_text-tdline  = ls_bill_no-text_line.
APPEND ls_text TO lt_text.
* Change/Update Header Text FM
CALL FUNCTION 'SAVE_TEXT'
EXPORTING
client          = sy-mandt
header          = ls_header
savemode_direct = abap_true
TABLES
lines           = lt_text
EXCEPTIONS
id              = 1
language        = 2
name            = 3
object          = 4
OTHERS          = 5.
IF sy-subrc = 0.
ls_return-type       = 'S'.
ls_return-id         = ls_bill_no-billing_no.
ls_return-message    = 'Header Text Successfully Updated'(020).
ls_return-log_no     = ls_bill_no-text_id.
ls_return-message_v1 = ls_bill_no-object_name.
APPEND ls_return TO ex_return.
ELSE.
ls_return-type       = 'E'.
ls_return-id         = ls_bill_no-billing_no.
ls_return-message    = 'No data Updated'(019).
ls_return-log_no     = ls_bill_no-text_id.
ls_return-message_v1 = ls_bill_no-object_name.
APPEND ls_return TO ex_return.
ENDIF.
CLEAR : ls_bill_no,ls_header,lt_text,ls_text,ls_return.
ENDLOOP.
ENDMETHOD.
GET_CUSTOMER_LIST
item
METHOD get_customer_list.
*-----------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited        *
* Created by  : Abhishek T                                        *
* Created on  : 05-Mar-2018                                       *
* Description : Generic method to get customer list               *
*-----------------------------------------------------------------*
*                       C H A N G E    L O G
*-----------------------------------------------------------------*
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY  *
* <Description of change>                                         *
*-----------------------------------------------------------------*
* Narayana Raju |  01.02.2019 |  sapabap.01022019                 *
* <Description of change>                                         *
* Adding Plant with in the region customer data to output.        *
*-----------------------------------------------------------------*
* Narayana Raju | 23.05.2019 |  sapabap.23052019                  *
* <Description of change>                                         *
* 1.Exception raise if no customers available in KNVV Table       *
*-----------------------------------------------------------------*
TYPES :
BEGIN OF lty_customer,
kunnr TYPE kunnr,
loevm TYPE loevm,
kdgrp TYPE kdgrp,
vwerk TYPE werks_d,
END OF lty_customer,

BEGIN OF lty_plant,
werks TYPE werks_d,
name1 TYPE name1,
END OF lty_plant,

BEGIN OF lty_cust_email,
addrnumber TYPE ad_addrnum,
smtp_addr  TYPE ad_smtpadr,
END OF lty_cust_email,

BEGIN OF  lty_cust_credit_limit,
kunnr TYPE kunnr,
klimk TYPE klimk,
END OF lty_cust_credit_limit,

BEGIN OF lty_cust_grp_desc,
kdgrp TYPE kdgrp,
ktext TYPE ktext,
END OF lty_cust_grp_desc,

BEGIN OF lty_cust_address,
kunnr TYPE kunnr,
land1 TYPE land1,
name1 TYPE name1,
ort01 TYPE ort01,
pstlz TYPE pstlz,
regio TYPE regio,
sortl TYPE sortl,
stras TYPE stras,
telf1 TYPE telf1,
adrnr TYPE ad_addrnum,
stcd3 TYPE stcd3,
END OF lty_cust_address,
BEGIN OF lty_address,
cust_id     TYPE  kunnr,
country     TYPE land1_gp,
cust_name   TYPE name1_gp,
city        TYPE  ort01_gp,
post_code   TYPE pstlz,
region      TYPE regio,
sortl_fld   TYPE sortl,
street      TYPE stras_gp,
telefone    TYPE telf1,
addr_number TYPE adrnr,
district    TYPE ort02,
gstin       TYPE stcd3,
END OF lty_address,
BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
house_num1 TYPE ad_hsnm1,
END OF lty_adrc,
BEGIN OF lty_adr6,
addrnumber TYPE ad_addrnum,
smtp_addr  TYPE ad_smtpadr,
END OF lty_adr6,
BEGIN OF lty_knkk,
kunnr TYPE kunnr,
klimk TYPE klimk,
END OF lty_knkk,
BEGIN OF lty_t151t,
kdgrp TYPE kdgrp,
ktext TYPE ktext,
END OF lty_t151t,
BEGIN OF lty_t005u,
land1 TYPE land1,
bland TYPE regio,
bezei TYPE bezei20,
END OF lty_t005u,
*      BEGIN OF lty_bank,
*        kunnr TYPE kunnr,
*        banks TYPE banks,
*        bankl TYPE bankl,
*        bankn TYPE  bankn,
*      END OF lty_bank,
BEGIN OF lty_1imocust,
kunnr     TYPE kunnr,
j_1ilstno TYPE j_1ilstno,
END OF lty_1imocust,
BEGIN OF lty_t001w,
werks TYPE werks_d,         "Plant
land1 TYPE land1,           "Country Key
regio TYPE regio,           "Region
END OF lty_t001w,

BEGIN OF lty_cust,
werks TYPE werks_d,         "Plant
kunnr TYPE kunnr,           "Customer Number
END OF lty_cust,

BEGIN OF lty_kna1,
kunnr     TYPE kunnr,       "Customer Number
land1     TYPE land1,       "Country Key
cust_name TYPE name1,       "Customer Name
regio     TYPE regio,       "Region
END OF lty_kna1,

BEGIN OF lty_region_not_found,
msgid TYPE symsgid,
msgno TYPE symsgno,
attr1 TYPE scx_attrname,
attr2 TYPE scx_attrname,
attr3 TYPE scx_attrname,
attr4 TYPE scx_attrname,
END OF lty_region_not_found .

DATA : lt_address           TYPE TABLE OF lty_address,
lt_address_temp      TYPE TABLE OF lty_address,
lt_adrc              TYPE TABLE OF lty_adrc,
lt_adr6              TYPE TABLE OF lty_adr6,
lt_t151t             TYPE TABLE OF lty_t151t,
lt_knkk              TYPE TABLE OF lty_knkk,
lt_t005u             TYPE TABLE OF lty_t005u,
*           lt_banks             TYPE TABLE OF lty_bank,
lt_1imocust          TYPE TABLE OF lty_1imocust,

lo_exception         TYPE REF TO  ycx_ss_exception,
ls_cust_address      TYPE yss_s_cust_address,
lv_vtweg             TYPE vtweg,
ls_plant             TYPE lty_plant,
lr_cc_vkorg          TYPE rsdsselopt_t,
ls_compliance        TYPE yss_s_cust_compliance,
ls_cust_list_details TYPE yss_s_cust_list_details,
lt_customer          TYPE TABLE OF lty_customer,
lt_customer_temp2    TYPE TABLE OF lty_customer,
lt_plant             TYPE TABLE OF lty_plant,
lt_cust_email        TYPE TABLE OF lty_cust_email,
lt_cust_grp_desc     TYPE TABLE OF lty_cust_grp_desc,
lt_cust_credit_limit TYPE TABLE OF lty_cust_credit_limit,
lt_cust_address      TYPE TABLE OF lty_cust_address,

lt_customer1         TYPE TABLE OF lty_customer,
lt_customer2         TYPE TABLE OF lty_customer,
lt_customer3         TYPE TABLE OF lty_customer,
ls_customer          TYPE  lty_customer,
lt_t001w             TYPE TABLE OF lty_t001w,
lt_cust_act          TYPE TABLE OF lty_cust,
lt_kna1              TYPE TABLE OF lty_kna1,
ls_kna1              TYPE lty_kna1,
ls_t001w             TYPE lty_t001w,
ls_cust_act          TYPE lty_cust,
lv_werks             TYPE werks_d,
lv_active            TYPE xfeld,
ls_region_not_found  TYPE lty_region_not_found.

* Get the distribution channel based on the WERKS
CALL METHOD get_dist_channel
EXPORTING
im_werks = im_req_params-werks
IMPORTING
ex_vtweg = lv_vtweg.
IF lv_vtweg IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>distribution_channel_not_found
msgv1  = ycx_ss_exception=>format( im_req_params-werks ).
ENDIF.

*Get tvarvc entries
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_sales_org
IMPORTING
ex_range       = lr_cc_vkorg.

* Get cutomer Ids based on particular details
SELECT DISTINCT kunnr
loevm
kdgrp
FROM knvv
INTO TABLE lt_customer
WHERE vkorg IN lr_cc_vkorg AND
vtweg EQ lv_vtweg    AND
spart EQ yss_cl_type_pool=>yss_c_md AND
vwerk EQ im_req_params-werks.
IF sy-subrc NE 0.
*Do Nothing
ENDIF.

*    >>>Start   +++changed Narayana Raju 22.01.2019
*   Fetching customers based on plant value
SELECT DISTINCT kunnr
loevm
kdgrp
vwerk
FROM knvv
INTO TABLE lt_customer1
WHERE vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg EQ lv_vtweg
AND spart EQ yss_cl_type_pool=>yss_c_md
AND vwerk NE im_req_params-werks.
IF sy-subrc EQ 0.
SORT lt_customer1 BY kunnr
vwerk.
ENDIF.
IF lt_customer IS INITIAL AND lt_customer1 IS INITIAL.
*      >> START Raju 23.05.2019
*  Exception raise if no customers available in KNVV Table
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>plant_cust_not_found
msgv1  = ycx_ss_exception=>format( im_req_params-werks ).
RETURN.
*      << END Raju 23.05.2019
ENDIF.
*   Fetch Plant details
SELECT werks                       "Plant
land1                       "Country Key
regio                       "Region
FROM t001w
INTO TABLE lt_t001w
WHERE werks = im_req_params-werks.
IF sy-subrc EQ 0.
SORT lt_t001w BY werks
land1.
READ TABLE lt_t001w INTO ls_t001w INDEX 1.
ENDIF.

IF lt_customer1 IS NOT INITIAL AND ls_t001w-regio IS NOT INITIAL.
*     Fetch customer details
SELECT kunnr                     "Customer Number
land1                     "Country Key
name1                     "Customer Name
regio                     "Region
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_customer1
WHERE kunnr = lt_customer1-kunnr
AND regio = ls_t001w-regio.
IF sy-subrc EQ 0.
SORT lt_kna1 BY kunnr.

ENDIF.
ENDIF.
*   Fetching data to include the plant region data.
SELECT SINGLE werks                "Plant
active               "Mark as Active
FROM yss_cust_region
INTO (lv_werks , lv_active)
WHERE werks = im_req_params-werks.
IF sy-subrc NE 0.
CLEAR: lv_werks,
lv_active.
ENDIF.
*   Fetching data to avoid from output.
SELECT werks                       "Plant
kunnr                       "Customer
FROM yss_cust_act
INTO TABLE lt_cust_act
WHERE werks = im_req_params-werks.
IF sy-subrc EQ 0.
SORT lt_cust_act BY werks
kunnr.
ENDIF.

*   Appending Customer data with same region as per given plant value.
LOOP AT lt_customer1 INTO ls_customer.
READ TABLE lt_kna1 INTO ls_kna1
WITH KEY kunnr = ls_customer-kunnr
BINARY SEARCH.
IF sy-subrc EQ 0.
APPEND ls_customer TO lt_customer3.
ENDIF.
ENDLOOP.

*   plant is in active in yss_cust_region to work below condition
IF lv_werks EQ im_req_params-werks
AND lv_active = abap_true
AND ls_t001w-land1 = 'IN'.
APPEND LINES OF lt_customer3 TO lt_customer.
ENDIF.

*   Avoiding Customers added in yss_cust_act DB Table.
LOOP AT lt_cust_act INTO ls_cust_act.
DELETE lt_customer WHERE kunnr = ls_cust_act-kunnr.
ENDLOOP.
*  <<<End   +++changed Narayana Raju 22.01.2019

*Fetch address details
SELECT kunnr
land1
name1
ort01
pstlz
regio
sortl
stras
telf1
adrnr
ort02
stcd3
FROM kna1
INTO TABLE lt_address
FOR ALL ENTRIES IN lt_customer
WHERE kunnr = lt_customer-kunnr.
IF sy-subrc EQ 0.
SORT lt_address BY cust_id.
lt_address_temp = lt_address.
SORT lt_address_temp BY addr_number.
DELETE ADJACENT DUPLICATES FROM lt_address_temp COMPARING addr_num
ENDIF.

*House number
SELECT  addrnumber
house_num1
FROM adrc
INTO TABLE lt_adrc FOR ALL ENTRIES IN lt_address_temp
WHERE addrnumber = lt_address_temp-addr_number.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.

*Email Id
SELECT  addrnumber
smtp_addr
FROM adr6
INTO TABLE lt_adr6 FOR ALL ENTRIES IN lt_address_temp
WHERE addrnumber = lt_address_temp-addr_number.
IF sy-subrc EQ 0.
SORT lt_adr6 BY addrnumber.
ENDIF.

*Credit Limit details
SELECT kunnr
klimk
FROM knkk
INTO TABLE lt_knkk FOR ALL ENTRIES IN lt_customer
WHERE kunnr = lt_customer-kunnr.
IF sy-subrc EQ 0.
SORT lt_knkk BY kunnr.
ENDIF.

*Customer group text
lt_customer_temp2 = lt_customer.
SORT lt_customer_temp2 BY kdgrp.
DELETE ADJACENT DUPLICATES FROM lt_customer_temp2 COMPARING kdgrp.
SELECT  kdgrp
ktext
FROM t151t
INTO TABLE lt_t151t
FOR ALL ENTRIES IN lt_customer_temp2
WHERE kdgrp = lt_customer_temp2-kdgrp AND
spras = yss_cl_type_pool=>yss_c_e.

IF sy-subrc EQ 0.
SORT lt_t151t BY kdgrp.
ENDIF.
*State
SELECT land1
bland
bezei
INTO TABLE lt_t005u
FROM t005u FOR ALL ENTRIES IN lt_address
WHERE spras EQ yss_cl_type_pool=>yss_c_e AND
bland EQ lt_address-region AND
land1 EQ lt_address-country.
IF sy-subrc EQ 0.
SORT lt_t005u BY bland.
ENDIF.

**Bank details
*    SELECT kunnr
*           banks  "Bank country key eg : IN
*           bankl  "Bank Keys IFSC code
*           bankn  "Account number
*      FROM knbk
*      INTO TABLE lt_banks FOR ALL ENTRIES IN lt_customer
*      WHERE kunnr = lt_customer-kunnr.
*    IF sy-subrc EQ 0.
*      SORT lt_banks BY kunnr.
*    ENDIF.
*plant name
*plant name
SELECT SINGLE werks
name1
FROM t001w
INTO ls_plant
WHERE werks = im_req_params-werks.

*Fetch Sales Tax Number and PAN number from J_1IMOCUST table

SELECT        kunnr
j_1ilstno
FROM j_1imocust
INTO TABLE lt_1imocust FOR ALL ENTRIES IN lt_customer
WHERE kunnr = lt_customer-kunnr.
IF sy-subrc EQ 0.
SORT lt_1imocust BY kunnr.
ENDIF.

LOOP AT lt_customer ASSIGNING FIELD-SYMBOL(<lfs_customer>).
APPEND INITIAL LINE TO ex_customer_list ASSIGNING FIELD-SYMBOL(<lf
<lfs_cust_list>-cust_id   =   <lfs_customer>-kunnr.

READ TABLE lt_address ASSIGNING FIELD-SYMBOL(<lfs_address>) WITH K
IF sy-subrc EQ 0.
MOVE-CORRESPONDING <lfs_address> TO <lfs_cust_list>.
READ TABLE lt_t005u ASSIGNING FIELD-SYMBOL(<lfs_t005u>) WITH KEY
IF sy-subrc EQ 0.
<lfs_cust_list>-state         = <lfs_t005u>-bezei.
ENDIF.
<lfs_cust_list>-street        = <lfs_address>-street.
READ TABLE lt_adrc ASSIGNING FIELD-SYMBOL(<lfs_adrc>) WITH KEY a
IF sy-subrc EQ 0.
<lfs_cust_list>-house_num     = <lfs_adrc>-house_num1.
ENDIF.
READ TABLE lt_adr6 ASSIGNING FIELD-SYMBOL(<lfs_adr6>) WITH KEY a
IF sy-subrc EQ 0.
<lfs_cust_list>-email         = <lfs_adr6>-smtp_addr.
ENDIF.
ENDIF.
READ TABLE lt_t151t ASSIGNING FIELD-SYMBOL(<lfs_t151t>) WITH KEY k
IF sy-subrc EQ 0.
<lfs_cust_list>-cust_grp_desc = <lfs_t151t>-ktext.
ENDIF.
READ TABLE lt_1imocust ASSIGNING FIELD-SYMBOL(<lfs_1imcust>) WITH
IF sy-subrc EQ 0.
<lfs_cust_list>-lst_no        = <lfs_1imcust>-j_1ilstno.
ENDIF.
READ TABLE lt_knkk ASSIGNING FIELD-SYMBOL(<lfs_knkk>) WITH KEY kun
IF sy-subrc EQ 0.
<lfs_cust_list>-credit_limit  = <lfs_knkk>-klimk.
ENDIF.
IF <lfs_customer>-loevm EQ abap_true.
<lfs_cust_list>-cust_status   = 'Inactive'(016).
ELSE.
<lfs_cust_list>-cust_status   = 'Active'(018).
ENDIF.
<lfs_cust_list>-plant_id      = ls_plant-werks.
<lfs_cust_list>-plant_name    = ls_plant-name1.
ENDLOOP.
*      LOOP AT lt_customer ASSIGNING FIELD-SYMBOL(<lfs_customer>).
**Address detail
*        TRY.
*            CALL METHOD yss_cl_sd_process=>get_adress_details
*              EXPORTING
*                im_kunnr        = <lfs_customer>-kunnr
*                im_vwerk        = im_req_params-werks
*              IMPORTING
*                ex_cust_address = ls_cust_address.
*          CATCH ycx_ss_exception INTO lo_exception.
*            lo_exception->log_exception( ).
*        ENDTRY.
*        IF ls_cust_address IS NOT INITIAL.
*          MOVE-CORRESPONDING ls_cust_address TO ls_cust_list_details.
*        ENDIF.
**Compliance detail
*        TRY.
*            CALL METHOD yss_cl_sd_process=>get_compliance
*              EXPORTING
*                im_kunnr           = <lfs_customer>-kunnr
*                im_vwerk           = im_req_params-werks
*              IMPORTING
*                ex_cust_compliance = ls_compliance.
*          CATCH ycx_ss_exception INTO lo_exception.
*            lo_exception->log_exception( ).
*        ENDTRY.
*        IF ls_compliance IS NOT INITIAL.
*          MOVE-CORRESPONDING ls_compliance TO ls_cust_list_details.
*        ENDIF.
**plant name
*        SELECT SINGLE werks
*                      name1
*                 FROM t001w
*                 INTO ls_plant
*                WHERE werks = im_req_params-werks.
*        IF sy-subrc EQ 0.
*          ls_cust_list_details-plant_id = ls_plant-werks.
*          ls_cust_list_details-plant_name = ls_plant-name1.
*        ENDIF.
*        IF ls_cust_list_details IS NOT INITIAL.
*          APPEND ls_cust_list_details TO ex_customer_list.
*        ENDIF.
*        CLEAR : ls_cust_address,ls_compliance,ls_cust_list_details.
*      ENDLOOP.

**      RAISE EXCEPTION TYPE ycx_ss_exception
**        EXPORTING
**          textid = ycx_ss_exception=>customer_details_not_found.

IF ex_customer_list IS INITIAL.
*      >> START Raju 23.05.2019
*  Exception raise if no customers available.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>plant_cust_not_found
msgv1  = ycx_ss_exception=>format( im_req_params-werks ).
*      << END Raju 23.05.2019
ENDIF.
ENDMETHOD.
CANCEL_BILLING_DOCUMENT
item
METHOD cancel_billing_document.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 05-March-2018
* Description : Reversal/Cancel Billing Document Number's
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*
DATA : ls_billing_no TYPE yss_s_billing,
lt_return     TYPE TABLE OF bapireturn1,
lt_success    TYPE TABLE OF bapivbrksuccess,
ls_return     TYPE bapireturn1.

** FM for Reversal/Cancel Billing Documents
LOOP AT im_billing_no INTO ls_billing_no.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = ls_billing_no-vbeln
IMPORTING
output = ls_billing_no-vbeln.

CALL FUNCTION 'BAPI_BILLINGDOC_CANCEL1'
EXPORTING
billingdocument = ls_billing_no-vbeln
*         TESTRUN         =
*         NO_COMMIT       =
billingdate     = ls_billing_no-fkdat
TABLES
return          = lt_return
success         = lt_success.
IF lt_success IS NOT INITIAL.
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait = abap_true.
APPEND LINES OF lt_return TO ex_return.
APPEND LINES OF lt_success TO ex_success.
ELSE.
LOOP AT lt_return INTO ls_return.
ls_return-message_v1 = ls_billing_no-vbeln.
MODIFY lt_return FROM ls_return TRANSPORTING message_v1.
CLEAR : ls_return.
ENDLOOP.
APPEND LINES OF lt_return TO ex_return.
ENDIF.
CLEAR : ls_billing_no,lt_return,lt_success.
ENDLOOP.


ENDMETHOD.
CREATE_PGI
item
METHOD create_pgi.
*------------------------------------------------------------------*
*                    A D M I N I S T R A T I O N
*------------------------------------------------------------------*
* Organization: Incresol Software Services Private Limited
* Created by  : Abhishek T
* Created on  :
* Description : Create POST GOODS ISSUE for delivery
*------------------------------------------------------------------*
*                       C H A N G E    L O G
*------------------------------------------------------------------*
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*------------------------------------------------------------------*
"
DATA : ls_vbkok      TYPE vbkok,
lv_fail(1),
lt_prott      TYPE TABLE OF prott,
lt_prott_temp TYPE TABLE OF prott,
ls_return     TYPE bapiret2,
lv_msg_ty     TYPE bapireturn-type,
lv_msgid      TYPE sy-msgid,
lv_msgno      TYPE sy-msgno,
lv_vbeln      TYPE vbeln_vl.

*Fetch record from Delivery Header
SELECT SINGLE vbeln
INTO lv_vbeln  "ls_likp
FROM likp
WHERE vbeln = im_delivery_doc_num.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>delivery_does_not_exist
msgv1  = ycx_ss_exception=>format( im_delivery_doc_num ).
ENDIF.

*Picking Data from Delivery Header
ls_vbkok-vbeln_vl = lv_vbeln.
ls_vbkok-wabuc    = abap_true.

*Create PGI using standard BAPI
CALL FUNCTION 'WS_DELIVERY_UPDATE'
EXPORTING
vbkok_wa                    = ls_vbkok
synchron                    = abap_true
no_messages_update          = space
delivery                    = lv_vbeln
update_picking              = abap_true
nicht_sperren               = abap_true
if_database_update          = '1'
if_error_messages_send_0    = abap_true
IMPORTING
ef_error_any_0              = ex_error_any
ef_error_in_item_deletion_0 = ex_error_in_item_deletion
ef_error_in_pod_update_0    = ex_error_in_pod_update
ef_error_in_interface_0     = ex_error_in_interface
ef_error_in_goods_issue_0   = ex_error_in_goods_issue
ef_error_in_final_check_0   = ex_error_in_final_check
ef_error_partner_update     = ex_error_partner_update
ef_error_sernr_update       = ex_error_sernr_update
TABLES
prot                        = lt_prott.

*prepare BAPIRETURN table
lt_prott_temp = lt_prott.
SORT lt_prott_temp BY msgno msgid.
DELETE ADJACENT DUPLICATES FROM lt_prott_temp COMPARING msgno msgid.

LOOP AT lt_prott_temp ASSIGNING FIELD-SYMBOL(<lfs_prott>).
lv_msg_ty = <lfs_prott>-msgty.
lv_msgid  = <lfs_prott>-msgid.
lv_msgno  = <lfs_prott>-msgno.

CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = lv_msg_ty
cl     = lv_msgid
number = lv_msgno
par1   = <lfs_prott>-msgv1
par2   = <lfs_prott>-msgv2
par3   = <lfs_prott>-msgv3
par4   = <lfs_prott>-msgv4
IMPORTING
return = ls_return.
APPEND ls_return TO ex_return.
CLEAR : lv_msg_ty,lv_msgid,lv_msgno,ls_return.

CHECK <lfs_prott>-msgty = yss_cl_type_pool=>yss_c_e OR
<lfs_prott>-msgty = yss_cl_type_pool=>yss_c_a.
lv_fail = abap_true.
ENDLOOP.

ex_log_tab = lt_prott.
REFRESH lt_prott.
IF lv_fail EQ abap_false.
*      SET UPDATE TASK LOCAL.
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait   = abap_true
IMPORTING
return = ls_return.
IF NOT ls_return IS INITIAL.
APPEND ls_return TO ex_return.
ENDIF.
CLEAR ls_return.
ELSE.
CALL FUNCTION 'BAPI_BKK_TRANSACTION_ROLLBACK'
IMPORTING
return = ls_return.
IF NOT ls_return IS INITIAL.
APPEND ls_return TO ex_return.
ENDIF.
CLEAR ls_return.
ENDIF.
*Success message
IF ex_error_any IS INITIAL AND lt_prott IS INITIAL.
ls_return-type    = yss_cl_type_pool=>yss_c_s.
ls_return-id      = yss_cl_type_pool=>yss_c_yss.
ls_return-number  = yss_cl_type_pool=>yss_c_001.
ls_return-message = text-025."'Goods issue for delivery &DELIVERY&
REPLACE ALL OCCURRENCES OF '&DELIVERY&' IN ls_return-message WITH
APPEND ls_return TO ex_return.
CLEAR ls_return.
ENDIF.

ENDMETHOD.
SIMULATE_BILLING
item
METHOD simulate_billing.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 07-March-2018
* Description : Simulate Billing Document Number's
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* 03-05-2018 | 001     |Display full add details in SP SHP in Billing *
* --------------------------------------------------------------------*
* 03-05-2018 | sapabap.030518 |                                       *
* --------------------------------------------------------------------*
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
parvw TYPE vbpa-parvw,
kunnr TYPE vbpa-kunnr,
adrnr TYPE vbpa-adrnr,
END OF lty_vbpa.

*    TYPES : BEGIN OF lty_adrc,                     "-- sapabap.030518
*              addrnumber TYPE adrc-addrnumber,
*              mc_name1   TYPE adrc-mc_name1,
*              house_num1 TYPE adrc-house_num1,
*              mc_street  TYPE adrc-mc_street,
*              mc_city1   TYPE adrc-mc_city1,
*              post_code1 TYPE adrc-post_code1,
*            END OF lty_adrc.



TYPES: BEGIN OF lty_adrc,                                "++ sapabap
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
name_co    TYPE ad_name_co, "PAN number
city1      TYPE ad_city1,
city2      TYPE ad_city2,   "Drug Licence Number
home_city  TYPE ad_city3,   "GSTIN number
post_code1 TYPE ad_pstcd1,
street     TYPE ad_street,
house_num1 TYPE ad_hsnm1,
country    TYPE land1,
region     TYPE regio,
tel_number TYPE ad_tlnmbr1,
mc_name1	  TYPE ad_mc_name,
mc_city1	  TYPE ad_mc_city,
mc_street  TYPE ad_mc_strt,
END OF lty_adrc.

* Data Declarations
DATA :  ls_vbsk      TYPE vbsk,
lt_xkomfk    TYPE TABLE OF komfk,
ls_xkomfk    TYPE komfk,
lt_xthead    TYPE TABLE OF theadvb,
lt_xvbss     TYPE TABLE OF vbss,
ls_delv_no   TYPE yss_s_delv_no,
lt_xvbfs     TYPE TABLE OF vbfs,
ls_xvbfs     TYPE vbfs,
lt_xkomv     TYPE TABLE OF komv,
ls_xkomv     TYPE komv,
ls_xthead    TYPE theadvb,
lt_xvbpa     TYPE TABLE OF vbpavb,
ls_xvbpa     TYPE vbpavb,
lt_xvbrk     TYPE TABLE OF vbrkvb,
ls_xvbrk     TYPE vbrkvb,
lt_xvbrp     TYPE TABLE OF vbrpvb,
ls_xvbrp     TYPE vbrpvb,
ls_xvbss     TYPE vbss,
ls_return    TYPE bapiret2,
lv_msgno     TYPE syst_msgno,
lv_date      TYPE vbrk-fkdat,
lv_lfdat     TYPE lfdat_v,                           "+++GAN
lt_vbpa      TYPE TABLE OF lty_vbpa,
ls_vbpa      TYPE lty_vbpa,
*            lt_adrc      TYPE TABLE OF lty_adrc,               --sapaba
lt_adrc      TYPE TABLE OF lty_adrc,                "++sapab
ls_adrc      TYPE lty_adrc,
ls_address   TYPE yss_s_delv_address,
lt_address   TYPE yss_tt_delv_address,
lt_lines     TYPE TABLE OF tline,
ls_lines     TYPE tline,
lv_name      TYPE thead-tdname,
lt_partner   TYPE yss_tt_vbpa,
ls_partner   TYPE vbpavb,
lo_exception TYPE REF TO ycx_ss_exception.


DATA :  lv_1ilstno   TYPE j_1ilstno,      "++ sapabap.08052018
lv_1ipanno   TYPE j_1ipanno,      "++ sapabap.08052018
lv_stcd3     TYPE stcd3,        "++ sapabap.08052018
lv_kunnr_tmp TYPE kunnr.        "++ sapabap.08052018
* Billing Date
lv_date = im_billing_date.
READ TABLE im_delv_no INTO ls_delv_no INDEX 1.
IF sy-subrc = 0.
*Append Delivery No's to Bapi Structure
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = ls_delv_no-delv_no
IMPORTING
output = ls_delv_no-delv_no.

ls_xkomfk-vbeln = ls_delv_no-delv_no.
ls_xkomfk-vbtyp = yss_cl_type_pool=>yss_c_j.
APPEND ls_xkomfk TO lt_xkomfk.

*Append Header SO data to Bapi Structure
ls_vbsk-smart = yss_cl_type_pool=>yss_c_f.
ls_vbsk-ernam = sy-uname.

*FM to Simulate Billing Document Number's
CALL FUNCTION 'RV_INVOICE_CREATE'
EXPORTING
invoice_date        = lv_date
vbsk_i              = ls_vbsk
with_posting        = yss_cl_type_pool=>yss_c_h
i_no_vblog          = ' '
i_analyze_mode      = ' '
id_utasy            = ' '
id_utswl            = ' '
id_utsnl            = ' '
id_no_enqueue       = ' '
id_new_cancellation = ' '
i_blart             = ' '
IMPORTING
vbsk_e              = ls_vbsk
TABLES
xkomfk              = lt_xkomfk
xkomv               = ex_bill_cond
xthead              = lt_xthead
xvbfs               = lt_xvbfs
xvbpa               = ex_bill_partner
xvbrk               = ex_bill_hdr
xvbrp               = ex_bill_item
xvbss               = lt_xvbss.

READ TABLE lt_xvbfs INTO ls_xvbfs WITH KEY msgty = 'S'.
IF sy-subrc NE 0.
* Success/error Log
CLEAR : ls_xvbfs.
LOOP AT lt_xvbfs INTO ls_xvbfs.
lv_msgno = ls_xvbfs-msgno.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = ls_xvbfs-msgty
cl     = ls_xvbfs-msgid
number = lv_msgno
IMPORTING
return = ls_return.
ls_xvbfs-msgv2 = ls_return-message.
IF ls_xvbfs-msgno = '055' OR ls_xvbfs-msgno = '071'.
ls_xvbfs-msgty = yss_cl_type_pool=>yss_c_e.
ls_xvbfs-msgv2 = 'Selling price is missing.'(045).
ls_xvbfs-msgv3 = 'Please Resimulate pricing in change sales
ls_xvbfs-msgv4 = 'Save it and try again.'(047).
ENDIF.
MODIFY lt_xvbfs FROM ls_xvbfs TRANSPORTING msgty msgv2 msgv3 m
CLEAR : ls_xvbfs,ls_return,lv_msgno.
ENDLOOP.
APPEND LINES OF lt_xvbfs TO ex_error_log.
CLEAR : ex_bill_hdr,ex_bill_item,ex_bill_partner,ex_bill_cond.
RETURN.
ENDIF.

IF ex_bill_item IS NOT INITIAL AND ex_bill_cond IS NOT INITIAL.
* Get Calculated Data
TRY.
CALL METHOD yss_cl_sd_process=>get_billing_simulated_data
EXPORTING
im_item_data      = ex_bill_item
im_condition_data = ex_bill_cond
IMPORTING
ex_condition_data = ex_calculated_data.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
ENDIF.

*Sold to Party Address
lt_partner = ex_bill_partner.
SORT lt_partner BY parvw.
DELETE lt_partner WHERE parvw NE yss_cl_type_pool=>yss_c_ag AND pa


* Address                                                            --s
*      SELECT addrnumber
*             mc_name1
*             house_num1
*             mc_street
*             mc_city1
*             post_code1
*             FROM adrc
*             INTO TABLE lt_adrc
*             FOR ALL ENTRIES IN lt_partner
*             WHERE addrnumber = lt_partner-adrnr.
*      IF sy-subrc = 0.
*        SORT lt_adrc BY addrnumber.
*      ENDIF.                                                        --s

** << Change Start ++sapabap.030518
IF lt_partner[] IS NOT INITIAL.
SELECT             addrnumber name1 name_co city1 city2 home_cit
post_code1 street house_num1 country region t
mc_name1 mc_city1 mc_street
FROM               adrc
INTO TABLE         lt_adrc
FOR ALL ENTRIES IN lt_partner
WHERE addrnumber = lt_partner-adrnr..
IF sy-subrc = 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.
** Change End   ++sapabap.030518 >>
*** >>> START GANGADHAR20180507
* Get the delivery date based on the delivery number
SELECT SINGLE lfdat FROM likp INTO lv_lfdat WHERE vbeln EQ ls_delv
IF sy-subrc EQ 0.
READ TABLE ex_bill_hdr ASSIGNING FIELD-SYMBOL(<lfs_bill_hdr>) IN
IF sy-subrc EQ 0.
<lfs_bill_hdr>-aedat = lv_lfdat.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180507


ls_address-delv_no = ls_delv_no-delv_no.
READ TABLE lt_partner INTO ls_partner WITH KEY parvw = yss_cl_type
IF sy-subrc = 0.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_partner
IF sy-subrc = 0.

ls_address-sold_to_name       = ls_adrc-mc_name1.
ls_address-sold_to_house_num  = ls_adrc-house_num1.
ls_address-sold_to_street     = ls_adrc-mc_street.
ls_address-sold_to_city       = ls_adrc-mc_city1.
ls_address-sold_post_code1    = ls_adrc-post_code1.
** << change start
ls_address-pan_no        = ls_adrc-name_co.           " pan nu
ls_address-drug_licence  = ls_adrc-city2.             " drug l
ls_address-gstin_number  = ls_adrc-home_city.         " gstin
ls_address-country       = ls_adrc-country.
ls_address-region        = ls_adrc-region.
ls_address-tel_number    = ls_adrc-tel_number.


** Change Start ++sapabap.08052018
** Check if not one time customer
** and fetch pan,drug and gstin numbers
CLEAR lv_kunnr_tmp.
SELECT SINGLE kunnr FROM kna1
INTO lv_kunnr_tmp
WHERE kunnr  = ls_partner-kunnr
AND   xcpdk EQ ''.
IF sy-subrc EQ 0.
"fetch all the values from
*Fetch GSTIN from KNA1
SELECT SINGLE stcd3
FROM kna1
INTO lv_stcd3
WHERE kunnr = ls_partner-kunnr.
IF sy-subrc EQ 0.
ls_address-gstin_number = lv_stcd3.
CLEAR lv_stcd3.
ENDIF.

*Fetch Sales Tax Number and PAN number from J_1IMOCUST table
SELECT SINGLE j_1ilstno
j_1ipanno
FROM j_1imocust
INTO (lv_1ilstno,lv_1ipanno)
WHERE kunnr = ls_partner-kunnr.
IF sy-subrc EQ 0.
ls_address-drug_licence = lv_1ilstno.
ls_address-pan_no       = lv_1ipanno.
CLEAR: lv_1ilstno,lv_1ipanno.
ENDIF.

ENDIF.
** Change End   ++sapabap.08052018
**    change end >>
ENDIF.
ENDIF.

*Ship to Party Address
CLEAR : ls_partner,ls_adrc.
READ TABLE lt_partner INTO ls_partner WITH KEY parvw = yss_cl_type
IF sy-subrc = 0.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_partner
IF sy-subrc = 0.
ls_address-ship_to_name       = ls_adrc-mc_name1.
ls_address-ship_to_house_num  = ls_adrc-house_num1.
ls_address-ship_to_street     = ls_adrc-mc_street.
ls_address-ship_to_city       = ls_adrc-mc_city1.
ls_address-ship_post_code1    = ls_adrc-post_code1.
** << change start
ls_address-pan_no        = ls_adrc-name_co.           " pan nu
ls_address-drug_licence  = ls_adrc-city2.             " drug l
ls_address-gstin_number  = ls_adrc-home_city.         " gstin
ls_address-country       = ls_adrc-country.
ls_address-region        = ls_adrc-region.
ls_address-tel_number    = ls_adrc-tel_number.
**    change end >>


** Change Start ++sapabap.08052018
** Check if not one time customer
** and fetch pan,drug and gstin numbers

CLEAR lv_kunnr_tmp.
SELECT SINGLE kunnr FROM kna1
INTO lv_kunnr_tmp
WHERE kunnr  = ls_partner-kunnr
AND   ktokd EQ 'ZOTC'.
IF sy-subrc NE 0.

*Fetch GSTIN from KNA1
SELECT SINGLE stcd3
FROM kna1
INTO lv_stcd3
WHERE kunnr = ls_partner-kunnr.
IF sy-subrc EQ 0.
ls_address-gstin_number = lv_stcd3.
CLEAR lv_stcd3.
ENDIF.

*Fetch Sales Tax Number and PAN number from J_1IMOCUST table
SELECT SINGLE j_1ilstno
j_1ipanno
FROM j_1imocust
INTO (lv_1ilstno,lv_1ipanno)
WHERE kunnr = ls_partner-kunnr.
IF sy-subrc EQ 0.
ls_address-drug_licence = lv_1ilstno.
ls_address-pan_no       = lv_1ipanno.
CLEAR:lv_1ilstno , lv_1ipanno.
ENDIF.

ENDIF.
** Change End   ++sapabap.08052018

ENDIF.
ENDIF.

* Remarks
lv_name = ls_delv_no-delv_no.
CALL FUNCTION 'READ_TEXT'
EXPORTING
client                  = sy-mandt
id                      = '0002'
language                = sy-langu
name                    = lv_name
object                  = 'VBBK'
TABLES
lines                   = lt_lines
EXCEPTIONS
id                      = 1
language                = 2
name                    = 3
not_found               = 4
object                  = 5
reference_check         = 6
wrong_access_to_archive = 7
OTHERS                  = 8.
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.
READ TABLE lt_lines INTO ls_lines INDEX 1.
IF sy-subrc = 0.
ls_address-remarks = ls_lines-tdline.
ENDIF.

IF ls_address IS NOT INITIAL.
APPEND ls_address TO lt_address.
APPEND LINES OF lt_address TO ex_address.
ENDIF.

* Success/error Log
IF lt_xvbfs IS NOT INITIAL.
LOOP AT lt_xvbfs INTO ls_xvbfs.
lv_msgno = ls_xvbfs-msgno.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = ls_xvbfs-msgty
cl     = ls_xvbfs-msgid
number = lv_msgno
IMPORTING
return = ls_return.
ls_xvbfs-msgv2 = ls_return-message.
MODIFY lt_xvbfs FROM ls_xvbfs TRANSPORTING msgv2.
CLEAR : ls_xvbfs,ls_return,lv_msgno.
ENDLOOP.
APPEND LINES OF lt_xvbfs TO ex_error_log.
ENDIF.
CLEAR : lt_xkomfk,ls_vbsk,lt_xkomv,lt_xvbfs,lt_xvbpa,lt_xvbrk,lt_x
ENDIF.


ENDMETHOD.
CANCEL_PGI
item
METHOD cancel_pgi.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 08-March-2018
* Description : Reverse/Cancel PGI
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

* Data Declarations
DATA: lt_mesg        TYPE yss_tt_mesg,
ls_mesg        TYPE mesg,
ls_return      TYPE wsrs_return,
ls_delivery_no TYPE yss_s_pgi.


* Clear Message ID
CLEAR: sy-msgid.

* Bapi to Reverse/Cancel PGI
LOOP AT im_delivery_no INTO ls_delivery_no.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = ls_delivery_no-vbeln
IMPORTING
output = ls_delivery_no-vbeln.

CALL FUNCTION 'WS_REVERSE_GOODS_ISSUE'
EXPORTING
i_vbeln                   = ls_delivery_no-vbeln
i_budat                   = ls_delivery_no-budat
i_tcode                   = 'VL09'
i_vbtyp                   = yss_cl_type_pool=>yss_c_j
TABLES
t_mesg                    = lt_mesg
EXCEPTIONS
error_reverse_goods_issue = 1
OTHERS                    = 2.
IF sy-subrc IS NOT INITIAL.
IF sy-msgid IS NOT INITIAL.
CALL FUNCTION 'WSRS_MSG_EXCEPTION_CATCH'
CHANGING
px_return = ls_return.

*Errors
ls_mesg-zeile = ls_delivery_no-vbeln.
ls_mesg-text  = 'No data available for Selection Criteria'.
ls_mesg-msgty = 'E'.
*          ls_mesg-arbgb = ls_return-id.
ls_mesg-txtnr = '001'.
*          ls_mesg-msgv1 = ls_return-message_v1.
*          ls_mesg-msgv2 = ls_return-message_v2.
*          ls_mesg-msgv3 = ls_return-message_v3.
*          ls_mesg-msgv4 = ls_return-message_v4.
APPEND ls_mesg TO lt_mesg.

ls_mesg-zeile = ls_delivery_no-vbeln.
ls_mesg-text  = 'Cancellation Date might be before Goods Issue
ls_mesg-msgty = 'E'.
*          ls_mesg-arbgb = ls_return-id.
ls_mesg-txtnr = '002'.
*          ls_mesg-msgv1 = ls_return-message_v1.
*          ls_mesg-msgv2 = ls_return-message_v2.
*          ls_mesg-msgv3 = ls_return-message_v3.
*          ls_mesg-msgv4 = ls_return-message_v4.
APPEND ls_mesg TO lt_mesg.


APPEND LINES OF lt_mesg TO ex_return.
ENDIF.
ROLLBACK WORK.
ELSE.
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait = abap_true.
ls_mesg-zeile = ls_delivery_no-vbeln.
ls_mesg-text  = 'PGI Reveresed for the Delivery'.
ls_mesg-msgty = 'S'.
ls_mesg-txtnr = '001'.
APPEND ls_mesg TO lt_mesg.
APPEND LINES OF lt_mesg TO ex_return.
ENDIF.
CLEAR : ls_return,ls_mesg,lt_mesg.
ENDLOOP.

ENDMETHOD.
CANCEL_DELIVERY
item
METHOD cancel_delivery.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 08-March-2018
* Description : Cancel Delivery
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

* Data Declarations
DATA : ls_delivery_no TYPE yss_s_so,
lt_return      TYPE bapiret2_tab,
ls_header      TYPE bapiobdlvhdrchg,
ls_header_inx  TYPE bapiobdlvhdrctrlchg,
lv_delivery    TYPE bapiobdlvhdrchg-deliv_numb,
lv_msgno       TYPE syst_msgno,
ls_return      TYPE bapiret2,
ls_return1     TYPE bapiret2,
ls_return2     TYPE wsrs_return.

* Bapi to Cancel Delivery
LOOP AT im_delivery_no INTO ls_delivery_no.

* Append header data to Bapi structure
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = ls_delivery_no-vbeln
IMPORTING
output = ls_header-deliv_numb.

* Append data to add delete flag
ls_header_inx-deliv_numb = ls_header-deliv_numb.
ls_header_inx-dlv_del    = abap_true.
* Append Delivery No to Bapi structure
lv_delivery = ls_header-deliv_numb.

CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
EXPORTING
header_data    = ls_header
header_control = ls_header_inx
delivery       = lv_delivery
TABLES
return         = lt_return.
IF lt_return IS INITIAL.
* Commit
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait = abap_true.
ls_return-type    = 'S'.
ls_return-number  = '001'.
CONCATENATE 'Outbound Devlivery' ls_delivery_no-vbeln 'deleted'
ls_return-message_v1 = 'RMSS - Outbound Delivery'.
ls_return-message_v2 = ls_delivery_no-vbeln.
APPEND ls_return TO lt_return.
APPEND LINES OF lt_return TO ex_return.
ELSEIF lt_return IS NOT INITIAL.
LOOP AT lt_return INTO ls_return.
lv_msgno = ls_return-number.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = ls_return-type
cl     = ls_return-id
number = lv_msgno
IMPORTING
return = ls_return1.
ls_return-message    = ls_return1-message.
ls_return-message_v1 = 'RMSS - Outbound Delivery'.
ls_return-message_v2 = ls_delivery_no-vbeln.
MODIFY lt_return FROM ls_return TRANSPORTING message message_v
CLEAR : ls_return,lv_msgno,ls_return1.
ENDLOOP.
APPEND LINES OF lt_return TO ex_return.
ENDIF.
CLEAR : ls_delivery_no,lt_return,ls_header_inx,ls_header,lv_delive
ENDLOOP.

ENDMETHOD.
CANCEL_SALESORDER
item
METHOD cancel_salesorder.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 08-March-2018
* Description : Cancel Sales Order
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

* Data Declarations
DATA : ls_salesorder TYPE yss_s_so,
ls_order_inx  TYPE bapisdh1x,
lt_return     TYPE bapiret2_tab,
ls_return     TYPE bapiret2,
lv_so         TYPE vbeln.

* Fill Bapi Structure for delete flag
ls_order_inx-updateflag = yss_cl_type_pool=>yss_c_d.
* Bapi to Cancel Sales Order
LOOP AT im_salesorder INTO ls_salesorder.

* Add leading zero's
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = ls_salesorder-vbeln
IMPORTING
output = ls_salesorder-vbeln.

CALL FUNCTION 'BAPI_SALESORDER_CHANGE'
EXPORTING
salesdocument    = ls_salesorder-vbeln
*         ORDER_HEADER_IN  =
order_header_inx = ls_order_inx
TABLES
return           = lt_return.
READ TABLE lt_return INTO ls_return WITH KEY type = 'S'
number = '008'.
IF sy-subrc = 0.
*Commit
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait = abap_true.
ENDIF.
*Success/Error Messages
IF lt_return IS NOT INITIAL.
LOOP AT lt_return INTO ls_return.
ls_return-message_v2 = ls_salesorder-vbeln.
MODIFY lt_return FROM ls_return TRANSPORTING message_v2.
CLEAR : ls_return.
ENDLOOP.
APPEND LINES OF lt_return TO ex_return.
ENDIF.
CLEAR : ls_salesorder,lt_return.
ENDLOOP.

ENDMETHOD.
GET_BILLING_SIMULATED_DATA
item
METHOD get_billing_simulated_data.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 09-March-2018
* Description : Condition types Calculated data Item Level
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

* Types declarations
TYPES: BEGIN OF lty_konp,
knumh TYPE knumh,
kopos TYPE kopos,
kbetr TYPE kbetr_kond,
END OF lty_konp.

* Data Declarations
DATA : ls_items      TYPE vbrpvb,
ls_cond       TYPE komv,
ls_cond_items TYPE yss_s_bill_itm,
lv_zspe       TYPE kbetr,
lv_zper       TYPE kbetr,
lt_a969       TYPE STANDARD TABLE OF a969,     "+++GANGADHAR2
lt_konp       TYPE STANDARD TABLE OF lty_konp. "+++GANGADHAR2

*** >>> START GANGADHAR20180627
* Fetch MRP details
SELECT * FROM a969 INTO TABLE lt_a969
FOR ALL ENTRIES IN im_item_data
WHERE matnr EQ im_item_data-matnr
AND charg EQ im_item_data-charg
AND datab LE im_item_data-prsdt
AND datbi GE im_item_data-prsdt.
IF sy-subrc EQ 0.
SORT lt_a969 BY matnr charg.
SELECT knumh kopos kbetr FROM konp
INTO TABLE lt_konp
FOR ALL ENTRIES IN lt_a969
WHERE knumh EQ lt_a969-knumh
AND loevm_ko EQ space.
IF sy-subrc EQ 0.
SORT lt_konp BY knumh.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180627

*Item details
LOOP AT im_item_data INTO ls_items.
*Material
ls_cond_items-material = ls_items-matnr.
*Material Description
ls_cond_items-mat_desc = ls_items-arktx.
*Quantity
ls_cond_items-qty      = ls_items-fkimg.
*UOM
ls_cond_items-uom      = ls_items-meins.
*Net Value
ls_cond_items-net_val  = ls_items-netwr.
*Discounts & Values
LOOP AT im_condition_data INTO ls_cond WHERE kposn = ls_items-posn
CASE ls_cond-kschl.
*Price
WHEN yss_cl_type_pool=>yss_c_zpro.
ls_cond_items-price = ls_cond_items-price + ls_cond-kbetr.
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zspe.
lv_zspe = lv_zspe + ls_cond-kbetr.
ls_cond_items-sch_val = ls_cond_items-sch_val + ls_cond-kwer
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zsvl.
ls_cond_items-fix_sch = ls_cond_items-fix_sch + ls_cond-kbet
ls_cond_items-sch_val = ls_cond_items-sch_val + ls_cond-kwer
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zper.
lv_zper = lv_zper + ls_cond-kbetr.
ls_cond_items-dis_amt = ls_cond_items-dis_amt + ls_cond-kwer
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zval.
ls_cond_items-dis_val = ls_cond_items-dis_val + ls_cond-kbet
ls_cond_items-dis_amt = ls_cond_items-dis_amt + ls_cond-kwer
*CGST Rate & CGST Amt
WHEN yss_cl_type_pool=>yss_c_cgst.
ls_cond_items-cgst_rate = ls_cond_items-cgst_rate + ls_cond-
ls_cond_items-cgst_amt  = ls_cond_items-cgst_amt  + ls_cond-
*SGST/UTGST Rate & SGST/UTGST Amt
WHEN yss_cl_type_pool=>yss_c_sgst OR yss_cl_type_pool=>yss_c_u
ls_cond_items-sgst_rate = ls_cond_items-sgst_rate + ls_cond-
ls_cond_items-sgst_amt  = ls_cond_items-sgst_amt  + ls_cond-
*IGST Rate & IGST Amt
WHEN yss_cl_type_pool=>yss_c_igst.
ls_cond_items-igst_rate = ls_cond_items-igst_rate + ls_cond-
ls_cond_items-igst_amt  = ls_cond_items-igst_amt  + ls_cond-
ENDCASE.
CLEAR : ls_cond.
ENDLOOP.
*Fix Sch
IF lv_zspe IS NOT INITIAL.
ls_cond_items-fix_sch = lv_zspe / 10.
ENDIF.
*Dis Val
IF lv_zper IS NOT INITIAL.
ls_cond_items-dis_val = lv_zper / 10.
ENDIF.
*CGST Rate
IF ls_cond_items-cgst_rate IS NOT INITIAL.
ls_cond_items-cgst_rate = ls_cond_items-cgst_rate / 10.
ENDIF.
*SGST/UGST Rate
IF ls_cond_items-sgst_rate IS NOT INITIAL.
ls_cond_items-sgst_rate = ls_cond_items-sgst_rate / 10.
ENDIF.
*IGST Rate
IF ls_cond_items-igst_rate IS NOT INITIAL.
ls_cond_items-igst_rate = ls_cond_items-igst_rate / 10.
ENDIF.
*Total Amount
ls_cond_items-total_amt = ls_items-netwr + ls_items-mwsbp.
*** >>> START GANGADHAR20180627
*MRP price
READ TABLE lt_a969 INTO DATA(ls_a969) WITH KEY matnr = ls_items-ma
IF sy-subrc EQ 0.
READ TABLE lt_konp INTO DATA(ls_konp) WITH KEY knumh = ls_a969-k
IF sy-subrc EQ 0.
ls_cond_items-mrp = ls_konp-kbetr.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180627
APPEND ls_cond_items TO ex_condition_data.
CLEAR : ls_items,lv_zper,lv_zspe,ls_cond_items.

ENDLOOP.
ENDMETHOD.
GET_DELIVERY_DETAILS
item
METHOD get_delivery_details.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  : Abhishek T
* Created on  :
* Description : Get delivery details(Header and Item) for delivery numbe
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
"
DATA : ls_likp          TYPE likp,
lt_lips          TYPE TABLE OF lips,
lv_vbeln         TYPE vbeln_vl,
lt_open_quantity TYPE yss_tt_open_quantity.

lv_vbeln = im_deliv_num.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = lv_vbeln
IMPORTING
output = lv_vbeln.

CLEAR : ex_open_quantity,ex_header_details,ex_item_details.
*Fetch Delivery Header Data LIKP
SELECT SINGLE *
FROM likp
INTO ls_likp
WHERE vbeln = lv_vbeln.
*        AND vstel = im_req_params-werks.  "+++GANGADHAR20180406 check w
IF sy-subrc NE 0 OR ( ls_likp-vstel NE im_req_params-werks AND ls_li
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>delivery_does_not_exist
msgv1  = ycx_ss_exception=>format( lv_vbeln ).
ELSEIF sy-subrc NE 0 OR ( ls_likp-werks IS NOT INITIAL AND ls_likp-w
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>po_delivery_does_not_exist
msgv1  = ycx_ss_exception=>format( lv_vbeln )
msgv2  = ycx_ss_exception=>format( im_req_params-werks ).
ELSE.
ex_header_details = ls_likp.
ENDIF.

*Fetch Delivery Item Data LIPS
SELECT * FROM lips
INTO TABLE lt_lips
WHERE vbeln = ls_likp-vbeln.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>delivery_details_not_found.
ELSE.
ex_item_details = lt_lips.
ENDIF.

* Get the Salesorder requested delivery date.
READ TABLE lt_lips INTO DATA(ls_lips) INDEX 1.
IF sy-subrc EQ 0.
SELECT SINGLE vdatu FROM vbak INTO ex_header_details-aedat WHERE v
IF sy-subrc EQ 0.
* Do nothing
ENDIF.
ENDIF.

* Get the delivery status details whether PGI completed or not
DATA : lv_wbstk TYPE wbstk.
SELECT SINGLE wbstk FROM vbuk INTO lv_wbstk WHERE vbeln EQ lv_vbeln.
IF sy-subrc EQ 0 AND lv_wbstk NE yss_cl_type_pool=>yss_c_c.
ex_pgi_pending = abap_true.
ENDIF.


*Fetch delivery open quantity data VBBE
SELECT vbeln
posnr
etenr
matnr
werks
charg
vbtyp
omeng
vmeng
FROM vbbe
INTO TABLE lt_open_quantity
FOR ALL ENTRIES IN lt_lips WHERE vbeln = lt_lips-vgbel AND
posnr = lt_lips-vgpos.
IF sy-subrc EQ 0.
ex_open_quantity = lt_open_quantity.
ENDIF.
ENDMETHOD.
GET_SD_DOCUMENT_FLOW
item
METHOD get_sd_document_flow.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 12-March-2018
* Description : Get Document Flow data for SD
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*
TYPES : ltr_vbtyp TYPE RANGE OF vbtyp_n.
DATA : lr_vbtyp TYPE ltr_vbtyp,
ls_vbtyp TYPE LINE OF ltr_vbtyp.

ls_vbtyp-sign = 'I'.
ls_vbtyp-option = 'EQ'.
ls_vbtyp-low = 'C'. APPEND ls_vbtyp to lr_vbtyp.
ls_vbtyp-low = 'J'. APPEND ls_vbtyp to lr_vbtyp.
ls_vbtyp-low = 'M'. APPEND ls_vbtyp to lr_vbtyp.
ls_vbtyp-low = 'H'. APPEND ls_vbtyp to lr_vbtyp.
ls_vbtyp-low = 'T'. APPEND ls_vbtyp to lr_vbtyp.
ls_vbtyp-low = 'O'. APPEND ls_vbtyp to lr_vbtyp.

* Call Bapi to get SD Document Flow
CALL FUNCTION 'SD_DOCUMENT_FLOW_GET'
EXPORTING
iv_docnum    = im_document_no
iv_itemnum   = im_itemnum
iv_all_items = im_all_items "abap_true
*       IV_SELF_IF_EMPTY       = ' '
IMPORTING
et_docflow   = ex_doc_flow.
IF ex_doc_flow IS NOT INITIAL.
*      DELETE ex_doc_flow WHERE rfmng IS INITIAL.
DELETE ex_doc_flow WHERE vbtyp_n NOT IN lr_vbtyp.
ENDIF.


ENDMETHOD.
GET_BATCH_MATERIAL_STOCK
item
METHOD get_batch_material_stock.

DATA : lt_mchb TYPE yss_tt_batch_mat_stock.

lt_mchb = ch_batch_mat_stock.
REFRESH ch_batch_mat_stock.

IF lt_mchb IS NOT INITIAL.
SELECT matnr werks lgort charg clabs INTO TABLE ch_batch_mat_stock
FROM mchb FOR ALL ENTRIES IN lt_mchb
WHERE matnr EQ lt_mchb-matnr
AND werks EQ lt_mchb-werks
AND lgort EQ lt_mchb-lgort
AND charg EQ lt_mchb-charg.
IF sy-subrc EQ 0.

ENDIF.
ENDIF.


ENDMETHOD.
GET_SALESORDER_REASONS
item
METHOD get_salesorder_reasons.

DATA: lt_r_augru TYPE RANGE OF augru,
lt_tvaut   TYPE yss_tt_tvaut.

*If im_augru is given, then fill lt_r_augru
IF im_augru IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_augru ASSIGNING FIELD-SYMBOL(<lfs_augr
<lfs_augru>-sign = 'I'.
<lfs_augru>-option = 'EQ'.
<lfs_augru>-low = im_augru.
ENDIF.

*Fetch data from tvaut
SELECT * FROM tvaut
INTO TABLE ex_tvaut
WHERE spras EQ 'E' AND
augru IN lt_r_augru.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>reason_code_not_found.
ENDIF.

ENDMETHOD.
GET_AMOUNT_NOTATION
item
METHOD get_amount_notation.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 14-March-2018
* Description : Amount Notation
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*
TYPES : BEGIN OF t_tab,
sample_value(30) TYPE c,
END OF t_tab.

TYPES : BEGIN OF t_number,
text(30) TYPE c,
END OF t_number.

DATA: li_number  TYPE STANDARD TABLE OF t_number,
lwa_number TYPE t_number,
l_flag     TYPE c.
DATA: l_temp              TYPE i,
l_previous          TYPE i,
l_previous_text(30) TYPE c,
g_decimal(30)       TYPE c,
g_strlen            TYPE i,
name(30)            TYPE c.

REFRESH: li_number.
CLEAR:   lwa_number,
l_previous,
l_temp,
l_flag,
l_previous_text.

* initially *
CLEAR: lwa_number,
l_temp.
IF NOT im_nmod IS INITIAL.
lwa_number-text = im_whole_value(im_nmod).
APPEND lwa_number TO li_number.
l_temp = im_nmod.
ENDIF.

CLEAR: l_previous.
DO im_ndiv TIMES.
lwa_number-text = im_whole_value+l_temp(3).
l_temp = l_previous + 3.
l_previous = l_temp.
APPEND lwa_number TO li_number.
CLEAR: lwa_number.
ENDDO.

CLEAR: l_flag,
l_previous_text.
LOOP AT li_number INTO lwa_number.
IF l_flag IS INITIAL.
CONCATENATE l_previous_text
lwa_number-text
INTO im_whole_value
SEPARATED BY im_delimiter.

REPLACE FIRST OCCURRENCE OF im_delimiter IN im_whole_value WITH
CONDENSE im_whole_value NO-GAPS.

l_previous_text = im_whole_value.
l_flag = 'X'.
ELSE.
CONCATENATE l_previous_text
lwa_number-text
INTO im_whole_value
SEPARATED BY im_delimiter.
l_previous_text = im_whole_value.

ENDIF.
ex_value = im_whole_value.
ENDLOOP.
ENDMETHOD.
GET_INCOMING_PAYMENT_DETAILS
item
METHOD get_incoming_payment_details.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 13-March-2018
* Description : Get Incoming Payment Details
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF t_tab,
sample_value(30) TYPE c,
END OF t_tab.

*Data Declarations
DATA : lt_ftpost      TYPE TABLE OF ftpost,
ls_ftpost      TYPE ftpost,
lt_blntab      TYPE TABLE OF blntab,
ls_blntab      TYPE blntab,
lt_fttax       TYPE TABLE OF fttax,
ls_fttax       TYPE fttax,
lv_bldat       TYPE char10,
lv_budat       TYPE char10,
lv_wrbtr       TYPE char30,
i_tab          TYPE STANDARD TABLE OF t_tab,
wa_tab         TYPE t_tab,
lv_dcpfm       TYPE usr01-dcpfm,
lv_whole(30)   TYPE c,
lv_decimal(30) TYPE c,
lv_strlen      TYPE i,
lv_ndiv        TYPE i,
lv_nmod        TYPE i,
lv_delimiter   TYPE c,
lv_separator   TYPE c,
lv_name(30)    TYPE c,
lo_exception   TYPE REF TO ycx_ss_exception,
lv_msgno       TYPE syst_msgno,
ls_return      TYPE bapiret2,
ls_posted      TYPE blntab,
lv_bupla       TYPE bupla,
lv_gsber       TYPE gsber.

*Convert Date's to required Format
CONCATENATE im_document_date+6(2) '.' im_document_date+4(2) '.' im_d
CONCATENATE im_posting_date+6(2)  '.' im_posting_date+4(2)  '.' im_p

*Pass Profit Center to Business Place and Business Area
lv_bupla = im_profit_center.
lv_gsber = im_profit_center.

*Convert Amount to required Format
lv_wrbtr = im_amount.
CONDENSE lv_wrbtr.

SELECT SINGLE dcpfm
INTO lv_dcpfm
FROM usr01
WHERE bname = sy-uname.
IF sy-subrc NE 0.
lv_dcpfm = space. "by default
ENDIF.

*Split Amount
SPLIT lv_wrbtr AT '.' INTO lv_whole
lv_decimal.
lv_strlen = strlen( lv_whole ).
lv_ndiv   = lv_strlen DIV 3.
lv_nmod   = lv_strlen MOD 3.

*Based on Decimal Format set the amount
CASE lv_dcpfm.
WHEN space.
lv_delimiter = '.'.
lv_separator = ','.
TRY.
CALL METHOD yss_cl_sd_process=>get_amount_notation
EXPORTING
im_delimiter   = lv_delimiter
im_separator   = lv_separator
im_ndiv        = lv_ndiv
im_nmod        = lv_nmod
CHANGING
im_whole_value = lv_wrbtr.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
CONCATENATE lv_wrbtr
lv_decimal
INTO lv_wrbtr
SEPARATED BY lv_separator.
*
WHEN 'X'.
lv_delimiter = ','.
lv_separator = '.'.
TRY.
CALL METHOD yss_cl_sd_process=>get_amount_notation
EXPORTING
im_delimiter   = lv_delimiter
im_separator   = lv_separator
im_ndiv        = lv_ndiv
im_nmod        = lv_nmod
CHANGING
im_whole_value = lv_wrbtr.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
CONCATENATE lv_wrbtr
lv_decimal
INTO lv_wrbtr
SEPARATED BY lv_separator.
*
WHEN 'Y'.
lv_delimiter = space.
lv_separator = ','.
TRY.
CALL METHOD yss_cl_sd_process=>get_amount_notation
EXPORTING
im_delimiter   = lv_delimiter
im_separator   = lv_separator
im_ndiv        = lv_ndiv
im_nmod        = lv_nmod
CHANGING
im_whole_value = lv_wrbtr.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
CONCATENATE lv_wrbtr
lv_decimal
INTO lv_wrbtr
SEPARATED BY lv_separator.
WHEN OTHERS.
ENDCASE.
* Header Details

*Document Date
ls_ftpost-stype = 'K'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BKPF-BLDAT'.
ls_ftpost-fval = lv_bldat.
APPEND ls_ftpost TO lt_ftpost.
*Posting Date
ls_ftpost-stype = 'K'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BKPF-BLART'.
ls_ftpost-fval = 'ZD'.
APPEND ls_ftpost TO lt_ftpost.
*Company Code
ls_ftpost-stype = 'K'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BKPF-BUKRS'.
ls_ftpost-fval = 'RMSS'.
APPEND ls_ftpost TO lt_ftpost.
*Posting Date
ls_ftpost-stype = 'K'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BKPF-BUDAT'.
ls_ftpost-fval = lv_budat.
APPEND ls_ftpost TO lt_ftpost.
*Currency Key
ls_ftpost-stype = 'K'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BKPF-WAERS'.
ls_ftpost-fval = 'INR'.
APPEND ls_ftpost TO lt_ftpost.
*Reference Text
ls_ftpost-stype = 'K'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BKPF-XBLNR'.
ls_ftpost-fval = im_reference.
APPEND ls_ftpost TO lt_ftpost.

* Item Details

*Posting Key
ls_ftpost-stype = 'P'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'RF05A-NEWBS'.
ls_ftpost-fval = '40'.
APPEND ls_ftpost TO lt_ftpost.
* Account
ls_ftpost-stype = 'P'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'RF05A-NEWKO'.
ls_ftpost-fval = '255020'.
APPEND ls_ftpost TO lt_ftpost.
* Amount
ls_ftpost-stype = 'P'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BSEG-WRBTR'.
ls_ftpost-fval = lv_wrbtr.
APPEND ls_ftpost TO lt_ftpost.
* Profit Center
ls_ftpost-stype = 'P'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'COBL-PRCTR'.
ls_ftpost-fval = im_profit_center.
APPEND ls_ftpost TO lt_ftpost.
* Business Area
ls_ftpost-stype = 'P'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'COBL-GSBER'.
ls_ftpost-fval = lv_gsber.
APPEND ls_ftpost TO lt_ftpost.
* Business Place
ls_ftpost-stype = 'P'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BSEG-BUPLA'.
ls_ftpost-fval = lv_bupla.
APPEND ls_ftpost TO lt_ftpost.
* Item Text
ls_ftpost-stype = 'P'.
ls_ftpost-count = 001.
ls_ftpost-fnam = 'BSEG-SGTXT'.
ls_ftpost-fval = im_text.
APPEND ls_ftpost TO lt_ftpost.
* Posting Key
ls_ftpost-stype = 'P'.
ls_ftpost-count = 002.
ls_ftpost-fnam = 'RF05A-NEWBS'.
ls_ftpost-fval = '15'.
APPEND ls_ftpost TO lt_ftpost.
* Customer Account
ls_ftpost-stype = 'P'.
ls_ftpost-count = 002.
ls_ftpost-fnam = 'RF05A-NEWKO'.
ls_ftpost-fval = im_customer_account.
APPEND ls_ftpost TO lt_ftpost.
* Business Area for customer account
ls_ftpost-stype = 'P'.
ls_ftpost-count = 002.
ls_ftpost-fnam = 'BSEG-GSBER'.
ls_ftpost-fval = lv_gsber.
APPEND ls_ftpost TO lt_ftpost.
* Amount
ls_ftpost-stype = 'P'.
ls_ftpost-count = 002.
ls_ftpost-fnam = 'BSEG-WRBTR'.
ls_ftpost-fval = lv_wrbtr.
APPEND ls_ftpost TO lt_ftpost.

* Initial information for internal accounting interface
CALL FUNCTION 'POSTING_INTERFACE_START'
EXPORTING
i_function         = 'C'
i_group            = 'FB01'
i_user             = sy-uname
EXCEPTIONS
client_incorrect   = 1
function_invalid   = 2
group_name_missing = 3
mode_invalid       = 4
update_invalid     = 5
OTHERS             = 6.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

*Post document using the internal posting interface
CALL FUNCTION 'POSTING_INTERFACE_DOCUMENT'
EXPORTING
i_tcode                  = 'FB01'
IMPORTING
e_msgid                  = ex_msgid
e_msgno                  = ex_msgno
e_msgty                  = ex_msgty
e_msgv1                  = ex_msgv1
e_msgv2                  = ex_msgv2
e_msgv3                  = ex_msgv3
e_msgv4                  = ex_msgv4
e_subrc                  = ex_subrc
TABLES
t_blntab                 = ex_posted_documents
t_ftpost                 = lt_ftpost
t_fttax                  = lt_fttax
EXCEPTIONS
account_missing          = 1
company_code_missing     = 2
posting_key_invalid      = 3
posting_key_missing      = 4
record_type_invalid      = 5
transaction_code_invalid = 6
amount_format_error      = 7
too_many_line_items      = 8
company_code_invalid     = 9
screen_not_found         = 10
no_authorization         = 11
OTHERS                   = 12.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

*Successful Message
IF ex_posted_documents IS NOT INITIAL.
*Commit Work
COMMIT WORK.
READ TABLE ex_posted_documents INTO ls_posted INDEX 1.
IF sy-subrc = 0.
CONCATENATE 'Document' ls_posted-belnr 'posted in Company Code'
ENDIF.
ENDIF.
*Error Message
IF ex_msgty NE 'S'.
CALL FUNCTION 'BALW_BAPIRETURN_GET2'
EXPORTING
type   = ex_msgty
cl     = ex_msgid
number = ex_msgno
IMPORTING
return = ls_return.
ex_msgv3 = ls_return-message.
ENDIF.
*End information for internal accounting interface
CALL FUNCTION 'POSTING_INTERFACE_END'.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.
ENDMETHOD.
CANCEL_INCOMING_PAYMENTS
item
METHOD cancel_incoming_payments.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 15-March-2018
* Description : Cancel Incoming Payments
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_bkpf,
bukrs TYPE bkpf-bukrs,
belnr TYPE bkpf-belnr,
gjahr TYPE bkpf-gjahr,
blart TYPE bkpf-blart,
budat TYPE bkpf-budat,
monat TYPE bkpf-monat,
stgrd TYPE bkpf-stgrd,
stblg TYPE bkpf-stblg,
END OF lty_bkpf.
*Data Declarations
DATA : lt_bkpf     TYPE TABLE OF lty_bkpf,
ls_return   TYPE bapiret2,
lv_document TYPE vwpostdoc-sto_docfi,
lv_year     TYPE vwpostdoc-gjahr.

*Field Symbols
FIELD-SYMBOLS : <lfs_documents> TYPE yss_s_payments,
<lfs_bkpf>      TYPE lty_bkpf.

*Fetch Accouning Document Data
SELECT bukrs
belnr
gjahr
blart
budat
monat
stgrd
stblg
FROM bkpf
INTO TABLE lt_bkpf
FOR ALL ENTRIES IN im_documents
WHERE bukrs = im_documents-bukrs
AND belnr   = im_documents-belnr
AND gjahr   = im_documents-gjahr.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

SORT lt_bkpf BY bukrs belnr gjahr.
*Cancel Incoming Payments
LOOP AT im_documents ASSIGNING <lfs_documents>.
READ TABLE lt_bkpf ASSIGNING <lfs_bkpf> WITH KEY bukrs = <lfs_docu
belnr = <lfs_docu
gjahr = <lfs_docu
BINARY SEARCH.
IF sy-subrc = 0 AND <lfs_bkpf>-stblg IS INITIAL.
CALL FUNCTION 'TR_SE_FI_DOCUMENT_REVERSAL'
EXPORTING
i_bukrs              = <lfs_bkpf>-bukrs
i_docnrfi            = <lfs_bkpf>-belnr
i_gjahr              = <lfs_bkpf>-gjahr
i_budat              = <lfs_bkpf>-budat
i_period             = <lfs_bkpf>-monat
i_fi_reversal_reason = '03'
IMPORTING
e_reversal_docnrfi   = lv_document
e_reversal_gjahr     = lv_year
EXCEPTIONS
error_occured        = 1
OTHERS               = 2.
IF lv_document IS NOT INITIAL AND lv_year IS NOT INITIAL.
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait = abap_true.
ls_return-message_v1 = <lfs_documents>-belnr.
ls_return-message_v2 = lv_document.
ls_return-message_v3 = lv_year.
ls_return-message    = 'The Document is Reveresed'.
ls_return-type       = 'S'.
ls_return-number     = '001'.
APPEND ls_return TO ex_return.
ELSE.
ls_return-message_v1 = <lfs_documents>-belnr.
ls_return-message    = 'The Document is not Reveresed'.
ls_return-type       = 'E'.
ls_return-number     = '002'.
APPEND ls_return TO ex_return.
ENDIF.
ELSEIF <lfs_bkpf>-stblg IS NOT INITIAL.
ls_return-message_v1 = <lfs_documents>-belnr.
ls_return-message    = 'The Document is already Reversed'.
ls_return-type       = 'E'.
ls_return-number     = '003'.
APPEND ls_return TO ex_return.
ENDIF.
CLEAR : ls_return,lv_document,lv_year.
ENDLOOP.

ENDMETHOD.
ADD_SO_BDC
item
METHOD add_so_bdc.
DATA: lt_bdcdata   TYPE STANDARD TABLE OF bdcdata,
lt_errmsgs   TYPE STANDARD TABLE OF bdcmsgcoll,
lo_exception TYPE REF TO ycx_ss_exception,
ls_likp      TYPE likp,
lwa_return   TYPE bapiret2,
lv_errmsg    TYPE bapi_msg,
lv_fval      TYPE bdc_fval.

CALL METHOD bdc_dynpro EXPORTING im_program = 'SAPMV50A' im_dynpro =

CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_CURSOR' im_fval = 'LI
CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_OKCODE' im_fval = '/0
lv_fval = im_delivery.
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-VBELN' im_fval = lv_
READ TABLE ch_delivery_tables-likp INTO ls_likp WITH KEY vbeln = im_
IF sy-subrc EQ 0 .
WRITE ls_likp-bldat TO lv_fval.
ENDIF.

CALL METHOD bdc_dynpro EXPORTING im_program = 'SAPMV50A' im_dynpro =
CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_OKCODE' im_fval = '=R
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-BLDAT' im_fval = lv_

WRITE ls_likp-wadat TO lv_fval.
CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_CURSOR' im_fval = 'LI
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-WADAT' im_fval = lv_
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-WAUHR' im_fval = '00

CLEAR lv_fval. lv_fval = ls_likp-btgew. SHIFT lv_fval LEFT DELETING
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-BTGEW' im_fval = lv_
CLEAR lv_fval. lv_fval = ls_likp-gewei.
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-GEWEI' im_fval = lv_

CALL METHOD bdc_dynpro EXPORTING im_program = 'SAPMV50A' im_dynpro =
CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_CURSOR' im_fval = 'LV
CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_OKCODE' im_fval = '=E

CLEAR lv_fval. WRITE im_selection_date TO lv_fval.
CALL METHOD bdc_field EXPORTING im_fnam = 'LV50C-DATBI' im_fval = lv
CLEAR lv_fval. lv_fval = im_salesorder.
CALL METHOD bdc_field EXPORTING im_fnam = 'LV50C-VBELN' im_fval = lv
CLEAR lv_fval. lv_fval = im_from_item. SHIFT lv_fval LEFT DELETING L
CALL METHOD bdc_field EXPORTING im_fnam = 'LV50C-ABPOS' im_fval = lv
CLEAR lv_fval. lv_fval = im_to_item.   SHIFT lv_fval LEFT DELETING L
CALL METHOD bdc_field EXPORTING im_fnam = 'LV50C-BIPOS' im_fval = lv

CALL METHOD bdc_dynpro EXPORTING im_program = 'SAPMV50A' im_dynpro =
CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_OKCODE' im_fval = '=S

CLEAR lv_fval.  WRITE ls_likp-bldat TO lv_fval.
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-BLDAT' im_fval = lv_
CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_CURSOR' im_fval = 'LI
CLEAR lv_fval.  WRITE ls_likp-wadat TO lv_fval.
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-WADAT' im_fval = lv_
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-WAUHR' im_fval = '00
*    CLEAR lv_fval. lv_fval = ls_likp-btgew.
*    CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-BTGEW' im_fval = '4
CLEAR lv_fval. lv_fval = ls_likp-gewei.
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-GEWEI' im_fval = lv_

CALL TRANSACTION 'VL02N' USING lt_bdcdata UPDATE 'S' MODE 'N' MESSAG

LOOP AT lt_errmsgs INTO DATA(ls_errmsgs).
CALL FUNCTION 'FORMAT_MESSAGE'
EXPORTING
id        = ls_errmsgs-msgid
lang      = sy-langu
no        = ls_errmsgs-msgnr
v1        = ls_errmsgs-msgv1
v2        = ls_errmsgs-msgv2
v3        = ls_errmsgs-msgv3
v4        = ls_errmsgs-msgv4
IMPORTING
msg       = lv_errmsg
EXCEPTIONS
not_found = 1
OTHERS    = 2.
lwa_return-type    = ls_errmsgs-msgtyp.
lwa_return-id      = ls_errmsgs-msgid.
lwa_return-number  = ls_errmsgs-msgnr.
lwa_return-message = lv_errmsg.
APPEND lwa_return TO ex_return.
ENDLOOP.

REFRESH : ch_delivery_tables-likp, ch_delivery_tables-lips,ch_open_q

TRY.
CALL METHOD get_delivery_details
EXPORTING
im_req_params     = im_req_params
im_deliv_num      = im_delivery
IMPORTING
ex_header_details = ls_likp
ex_item_details   = ch_delivery_tables-lips
ex_open_quantity  = ch_open_quantity.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
* Prepare Return Message
APPEND LINES OF lo_exception->prepare_bapi_return( ) TO ex_retur
ENDTRY.
APPEND ls_likp TO ch_delivery_tables-likp.
CLEAR ls_likp.
ENDMETHOD.
BDC_DYNPRO
item
METHOD bdc_dynpro.
DATA : lwa_bdcdata TYPE bdcdata.

lwa_bdcdata-program  = im_program.
lwa_bdcdata-dynpro   = im_dynpro.
lwa_bdcdata-dynbegin = 'X'.
APPEND lwa_bdcdata TO ex_bdcdata.

ENDMETHOD.
BDC_FIELD
item
METHOD bdc_field.
DATA : lwa_bdcdata TYPE bdcdata.

*    IF im_fval <> nodata.
CLEAR lwa_bdcdata.
lwa_bdcdata-fnam = im_fnam.
lwa_bdcdata-fval = im_fval.
APPEND lwa_bdcdata TO ex_bdcdata.
*    ENDIF.
ENDMETHOD.
CREATE_EDIT_DELIVERY_SO
item
METHOD create_edit_delivery_so.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  : Gangadhar
* Created on  : 28.02.2018
* Description : Method to create delivery order
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
TYPES :BEGIN OF lty_lips,
vbeln TYPE vbeln_vl,  "Delivery
posnr TYPE posnr_vl,  "Delivery Item
pstyv TYPE pstyv_vl,  "Delivery item category
matnr TYPE matnr,     "Material Number
matwa TYPE matwa,     "Material entered
matkl TYPE matkl,     "Material Group
werks TYPE werks,     "Plant
lgort TYPE lgort_d,   "Storage Location
charg TYPE charg_d,   "Batch Number
lfimg TYPE lfimg,     "Actual quantity delivered (in sales
meins TYPE meins,
vrkme TYPE vrkme,     "Sales unit
umvkz TYPE umvkz,
umvkn TYPE umvkn,
vgbel TYPE vgbel,     "Document number of the reference doc
vgpos TYPE vgpos,     "Item number of the reference item
vkbur TYPE vkbur,     "Sales Office
vkgrp TYPE vkgrp,     "Sales Group
vtweg TYPE vtweg,     "Distribution Channel
spart TYPE spart,     "Division
uecha TYPE uecha,     "Higher-Level Item of Batch Split Ite
END OF lty_lips.

DATA :ls_header_data       TYPE bapiobdlvhdrchg,
ls_header_control    TYPE bapiobdlvhdrctrlchg,
ls_techn_control     TYPE bapidlvcontrol,
lt_item_data         TYPE STANDARD TABLE OF bapiobdlvitemchg,
ls_item_data         TYPE bapiobdlvitemchg,
lt_item_control      TYPE STANDARD TABLE OF bapiobdlvitemctrlc
ls_item_control      TYPE bapiobdlvitemctrlchg,
ls_created_items     TYPE bapidlvitemcreated,
ls_created_items_tmp TYPE bapidlvitemcreated,
lt_return            TYPE TABLE OF bapiret2,
lv_errmsg            TYPE bapi_msg,
lv_del_flag          TYPE flag,
lv_item_num          TYPE posnr,
lv_batch_num         TYPE posnr,
lv_index             TYPE i,
lt_header_deadlines  TYPE STANDARD TABLE OF bapidlvdeadln,
ls_header_deadlines  TYPE bapidlvdeadln,
lv_date              TYPE char14,
lv_inco1             TYPE inco1,
lt_lips              TYPE STANDARD TABLE OF lty_lips,
lt_lips_tmp          TYPE STANDARD TABLE OF lty_lips,
lwa_lips             TYPE lty_lips.

DATA : ls_return TYPE bapiret2.
DATA : lt_serial_num TYPE STANDARD TABLE OF bapidlvserialnumber.

READ TABLE ch_delivery_tables-lips WITH KEY lfimg = '' TRANSPORTING
IF sy-subrc EQ 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>delivery_qty_zero.
ENDIF.
IF im_action EQ yss_cl_type_pool=>yss_c_cd OR im_action EQ yss_cl_ty
CALL FUNCTION 'BAPI_OUTB_DELIVERY_CREATE_SLS'
EXPORTING
ship_point        = im_dlvcreateheader-ship_point
due_date          = im_dlvcreateheader-due_date
debug_flg         = im_dlvcreateheader-debug_flg
no_dequeue        = ' '
IMPORTING
delivery          = ex_delivery
num_deliveries    = ex_num_deliveries
TABLES
serial_numbers    = lt_serial_num
sales_order_items = im_dlvreftosalesorder
deliveries        = ex_deliveries
created_items     = ex_created_items
return            = ex_return.

CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait   = 'X'
IMPORTING
return = ls_return.
*      WAIT UP TO 5 SECONDS.
IF ls_return IS NOT INITIAL.
APPEND ls_return TO ex_return.
ENDIF.

CALL FUNCTION 'DEQUEUE_EVVBLKE'
EXPORTING
mode_likp = yss_cl_type_pool=>yss_c_e
mandt     = sy-mandt
vbeln     = ex_delivery.
IF ex_delivery IS INITIAL OR im_action EQ yss_cl_type_pool=>yss_c_
RETURN.
ENDIF.

*** Edit the ch_delivery_Tables - LIPS table based on the newly created
SORT ch_delivery_tables-lips BY vgbel vgpos.
lv_item_num = 0. lv_batch_num = 900001.
LOOP AT ch_delivery_tables-lips ASSIGNING FIELD-SYMBOL(<lfs_lips>)
IF <lfs_lips>-uecha IS INITIAL .
lv_item_num = lv_item_num + 10.
<lfs_lips>-posnr = lv_item_num.
ENDIF.
IF <lfs_lips>-uecha IS NOT INITIAL .
<lfs_lips>-uecha = lv_item_num.
<lfs_lips>-posnr = lv_batch_num.
lv_batch_num = lv_batch_num + 1.
ENDIF.
ENDLOOP.
CLEAR : lv_batch_num,lv_item_num.
ENDIF.

IF ex_delivery IS INITIAL.
READ TABLE ch_delivery_tables-likp INTO DATA(ls_likp) INDEX 1.
IF sy-subrc EQ 0.
ex_delivery = ls_likp-vbeln.
ENDIF.
ENDIF.

ls_header_data-deliv_numb    = ex_delivery.
ls_header_control-deliv_numb = ex_delivery.
ls_techn_control-upd_ind     = yss_cl_type_pool=>yss_c_x.

************************************************************************
IF im_action EQ yss_cl_type_pool=>yss_c_ud AND im_salesorder IS NOT
SELECT SINGLE inco1 FROM vbkd INTO lv_inco1 WHERE vbeln EQ im_sale
IF sy-subrc EQ 0.
IF lv_inco1 NE ls_likp-inco1.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>different_incoterms.
ENDIF.
ENDIF.
CALL METHOD yss_cl_sd_process=>add_so_bdc
EXPORTING
im_req_params      = im_req_params
im_salesorder      = im_salesorder
im_from_item       = im_from_item
im_to_item         = im_to_item
im_selection_date  = im_selection_date
im_delivery        = ex_delivery
IMPORTING
ex_return          = ex_return
CHANGING
ch_delivery_tables = ch_delivery_tables
ch_open_quantity   = ch_open_quantity.
RETURN.
ENDIF.
************************************************************************

SELECT  vbeln posnr pstyv matnr matwa matkl werks lgort charg lfimg
vrkme umvkz umvkn vgbel vgpos vkbur vkgrp vtweg spart uecha
FROM lips INTO TABLE lt_lips
WHERE vbeln EQ ex_delivery.
IF sy-subrc EQ 0.
*     Do nothing
ENDIF.


* Check if any delivery item is deleted
*    READ TABLE im_delivery_tables_inx WITH KEY upd_flag = yss_cl_type_p
*    IF sy-subrc EQ 0.
*      lv_del_flag = abap_true.
* If delivery item is delete then delete all the item using flag del_ite
LOOP AT lt_lips INTO lwa_lips.

APPEND INITIAL LINE TO lt_item_control ASSIGNING FIELD-SYMBOL(<lfs
<lfs_item_control>-deliv_numb = ex_delivery.
<lfs_item_control>-deliv_item = lwa_lips-posnr.

APPEND INITIAL LINE TO lt_item_data ASSIGNING FIELD-SYMBOL(<lfs_it
<lfs_item_data>-deliv_numb      = lwa_lips-vbeln.
<lfs_item_data>-deliv_item      = lwa_lips-posnr.
<lfs_item_data>-material        = lwa_lips-matnr.
<lfs_item_data>-dlv_qty         = lwa_lips-lfimg.     " Pass requi
<lfs_item_data>-dlv_qty_imunit  = lwa_lips-lfimg.     " Pass unit
<lfs_item_data>-sales_unit      = lwa_lips-meins.
<lfs_item_data>-fact_unit_nom   = lwa_lips-umvkz.
<lfs_item_data>-fact_unit_denom = lwa_lips-umvkn.
<lfs_item_data>-batch           = lwa_lips-charg.     " Pass the b

READ TABLE im_delivery_tables_inx WITH KEY item_num = lwa_lips-pos
upd_flag = yss_cl_type_
IF sy-subrc EQ 0." AND im_action EQ yss_cl_type_pool=>yss_c_ud.
<lfs_item_control>-del_item   = yss_cl_type_pool=>yss_c_x. "Set
CONTINUE.
ENDIF.
IF lwa_lips-charg IS INITIAL OR lwa_lips-lfimg IS INITIAL OR lwa_l
<lfs_item_control>-chg_delqty = yss_cl_type_pool=>yss_c_x.
CONTINUE.
ELSE.
<lfs_item_control>-del_item   = yss_cl_type_pool=>yss_c_x. "Set
ENDIF.

CLEAR lwa_lips.
ENDLOOP.

* Get the highest item number
SORT lt_lips BY posnr DESCENDING.
READ TABLE lt_lips INTO lwa_lips INDEX 1.
IF sy-subrc EQ 0.
lv_item_num = lwa_lips-posnr.
ENDIF.

SORT lt_lips BY vbeln posnr.
lt_lips_tmp = lt_lips.

***    SORT ch_delivery_tables-lips BY vgbel vgpos.
*    Delete the line items where batch numbers are not initial
DELETE lt_lips_tmp WHERE charg NE ''.

*      Loop on main item numbers like 10,20,30...
LOOP AT lt_lips_tmp INTO lwa_lips.
CLEAR lv_index.

*    Read the line items(90001,90002....) from the simulated LIPS(portal
READ TABLE ch_delivery_tables-lips INTO DATA(ls_sim_lips_tmp) WITH


IF sy-subrc NE 0.
CONTINUE.
ENDIF.

lv_index = sy-tabix.

LOOP AT ch_delivery_tables-lips INTO DATA(ls_sim_lips) FROM lv_ind
IF ls_sim_lips-vgbel NE ls_sim_lips_tmp-vgbel OR ls_sim_lips-vgp
EXIT.
ENDIF.
IF ls_sim_lips-charg IS INITIAL OR ls_sim_lips-lfimg IS INITIAL
CONTINUE.
ENDIF.
lv_item_num = lv_item_num + 1.
APPEND INITIAL LINE TO lt_item_control ASSIGNING <lfs_item_contr
<lfs_item_control>-deliv_numb = ex_delivery.
<lfs_item_control>-deliv_item = lv_item_num.
<lfs_item_control>-chg_delqty = yss_cl_type_pool=>yss_c_x.

APPEND INITIAL LINE TO lt_item_data ASSIGNING <lfs_item_data>.
<lfs_item_data>-deliv_numb      = ex_delivery.
<lfs_item_data>-deliv_item      = lv_item_num.
<lfs_item_data>-material        = ls_sim_lips-matnr.
<lfs_item_data>-sales_unit      = ls_sim_lips-meins.
<lfs_item_data>-fact_unit_nom   = ls_sim_lips-umvkz.
<lfs_item_data>-fact_unit_denom = ls_sim_lips-umvkn.
<lfs_item_data>-batch           = ls_sim_lips-charg.  " Pass the
<lfs_item_data>-hieraritem      = lwa_lips-posnr.     " Pass par
<lfs_item_data>-usehieritm      = '1'.                " Pass par
<lfs_item_data>-dlv_qty         = ls_sim_lips-lfimg.  " Pass req
<lfs_item_data>-dlv_qty_imunit  = ls_sim_lips-lfimg.  " Pass uni

ENDLOOP.
ENDLOOP.
*    ENDIF.

* For Delivery document date
READ TABLE ch_delivery_tables-likp INTO ls_likp INDEX 1.
IF sy-subrc EQ 0 AND ( ls_likp-bldat LE sy-datum OR ls_likp-wadat_is

*      ls_header_control-unload_pt_flg  = abap_true.
*      ls_header_control-pick_date_flg  = abap_true.
*      ls_header_control-trsp_date_flg  = abap_true.
*      ls_header_control-load_date_flg  = abap_true.
*      ls_header_control-gdsi_date_flg  = abap_true.
*      ls_header_control-deliv_date_flg = abap_true.

ls_header_deadlines-timetype = 'WSHDRLFDAT'.   "Delivery date
lv_date = ls_likp-bldat.
CONCATENATE lv_date '000000' INTO lv_date.
ls_header_deadlines-deliv_numb = ex_delivery.
ls_header_deadlines-timestamp_utc = lv_date.
*      ls_header_deadlines-timezone = 'INDIA'.
APPEND ls_header_deadlines TO lt_header_deadlines.
CLEAR ls_header_deadlines.

ls_header_deadlines-timetype = 'WSHDRWADAT'.   "Planned goods issu
lv_date = ls_likp-wadat.
CONCATENATE lv_date '000000' INTO lv_date.
ls_header_deadlines-deliv_numb = ex_delivery.
ls_header_deadlines-timestamp_utc = lv_date.
*      ls_header_deadlines-timezone = 'INDIA'.
APPEND ls_header_deadlines TO lt_header_deadlines.
CLEAR ls_header_deadlines.

ls_header_deadlines-timetype = 'WSHDRWADTI'.   "Actual goods issue
*      lv_date = ls_likp-wadat.
*      CONCATENATE lv_date '000000' INTO lv_date.
ls_header_deadlines-deliv_numb = ex_delivery.
ls_header_deadlines-timestamp_utc = lv_date.
*      ls_header_deadlines-timezone = 'INDIA'.
APPEND ls_header_deadlines TO lt_header_deadlines.
CLEAR ls_header_deadlines.

ls_header_deadlines-timetype = 'WSHDRLDDAT'.   "Loading date
lv_date = ls_likp-bldat.
CONCATENATE lv_date '000000' INTO lv_date.
ls_header_deadlines-deliv_numb = ex_delivery.
ls_header_deadlines-timestamp_utc = lv_date.
*      ls_header_deadlines-timezone = 'INDIA'.
APPEND ls_header_deadlines TO lt_header_deadlines.
CLEAR ls_header_deadlines.

ls_header_deadlines-timetype = 'WSHDRTDDAT'.   "Transportation pla
*      lv_date = ls_likp-wadat.
*      CONCATENATE lv_date '000000' INTO lv_date.
ls_header_deadlines-deliv_numb = ex_delivery.
ls_header_deadlines-timestamp_utc = lv_date.
*      ls_header_deadlines-timezone = 'INDIA'.
APPEND ls_header_deadlines TO lt_header_deadlines.
CLEAR ls_header_deadlines.

ls_header_deadlines-timetype = 'WSHDRKODAT'.   "Picking date
*      lv_date = ls_likp-wadat.
*      CONCATENATE lv_date '000000' INTO lv_date.
ls_header_deadlines-deliv_numb = ex_delivery.
ls_header_deadlines-timestamp_utc = lv_date.
ls_header_deadlines-timezone = 'INDIA'.
APPEND ls_header_deadlines TO lt_header_deadlines.
CLEAR ls_header_deadlines.

ENDIF.

CALL FUNCTION 'BAPI_OUTB_DELIVERY_CHANGE'
EXPORTING
header_data      = ls_header_data
header_control   = ls_header_control
delivery         = ex_delivery
techn_control    = ls_techn_control
TABLES
header_deadlines = lt_header_deadlines
item_data        = lt_item_data
item_control     = lt_item_control
return           = lt_return.

LOOP AT lt_return INTO DATA(lwa_return).
APPEND INITIAL LINE TO ex_return ASSIGNING FIELD-SYMBOL(<lfs_retur
CALL FUNCTION 'FORMAT_MESSAGE'
EXPORTING
id        = lwa_return-id
lang      = sy-langu
no        = lwa_return-number     "msgnr
v1        = lwa_return-message_v1 "msgv1
v2        = lwa_return-message_v2 "msgv2
v3        = lwa_return-message_v3 "msgv3
v4        = lwa_return-message_v4 "msgv4
IMPORTING
msg       = lv_errmsg
EXCEPTIONS
not_found = 1
OTHERS    = 2.
<lfs_return> = lwa_return.
<lfs_return>-message = lv_errmsg.
ENDLOOP.

CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
wait   = 'X'
IMPORTING
return = ls_return.
IF ls_return IS NOT INITIAL.
APPEND ls_return TO ex_return.
ENDIF.

*   Backdated sales order
IF ls_likp-bldat LE sy-datum.
CALL METHOD delv_back_dated_bdc
EXPORTING
im_delivery        = ex_delivery
IMPORTING
ex_return          = ex_return
CHANGING
ch_delivery_tables = ch_delivery_tables.
ENDIF.


ENDMETHOD.
GET_INCOMING_PAYMENTS_LIST
item
METHOD get_incoming_payments_list.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 20-March-2018
* Description : Get Incoming Payments List
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_bkpf,
bukrs TYPE bkpf-bukrs,
belnr TYPE bkpf-belnr,
gjahr TYPE bkpf-gjahr,
blart TYPE bkpf-blart,
bldat TYPE bkpf-bldat,
budat TYPE bkpf-budat,
stblg TYPE bkpf-stblg,
END OF lty_bkpf.

TYPES : BEGIN OF lty_bseg,
bukrs TYPE bseg-bukrs,
belnr TYPE bseg-belnr,
gjahr TYPE bseg-gjahr,
buzei TYPE bseg-buzei,
koart TYPE bseg-koart, " +++ KRISHNA 17.10.2018
gsber TYPE bseg-gsber,
dmbtr TYPE bseg-dmbtr,
kunnr TYPE bseg-kunnr,
prctr TYPE bseg-prctr,
bupla TYPE bseg-bupla,
END OF lty_bseg.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
name1 TYPE kna1-name1,
name2 TYPE kna1-name2,
END OF lty_kna1.

TYPES: BEGIN OF lty_fagl,
ryear  TYPE faglflexa-ryear,
docnr  TYPE faglflexa-docnr,
rldnr  TYPE faglflexa-rldnr,
rbukrs TYPE faglflexa-rbukrs,
docln  TYPE faglflexa-docln,
prctr  TYPE faglflexa-prctr,
END OF lty_fagl.

*Data Declarations
DATA : lt_tvarvc       TYPE rsdsselopt_t,
lwa_tvarvc      TYPE LINE OF rsdsselopt_t,
lt_r_date       TYPE yss_cl_type_pool=>yss_r_date,
lv_from_date    TYPE sy-datum,
lt_bkpf         TYPE TABLE OF lty_bkpf,
ls_bkpf         TYPE lty_bkpf,
lt_bseg         TYPE TABLE OF lty_bseg,
lt_bseg_tmp     TYPE TABLE OF lty_bseg, " +++ KRISHNA 15.10.2
ls_bseg         TYPE lty_bseg,
ls_bseg_tmp     TYPE lty_bseg, " +++ KRISHNA 15.10.2018
lt_kna1         TYPE TABLE OF lty_kna1,
ls_kna1         TYPE lty_kna1,
ls_payment_list TYPE yss_s_in_payments,
lt_fagl         TYPE TABLE OF lty_fagl,
ls_fagl         TYPE lty_fagl.

CONSTANTS:lc_zc    TYPE blart VALUE 'ZC',
lc_racct TYPE racct VALUE '0000255020'.
*Field Symbols declarations
FIELD-SYMBOLS: <lfs_date>  TYPE LINE OF yss_cl_type_pool=>yss_r_date
*To fill lt_r_date
IF im_date IS INITIAL.
*If im_date is initial, Get no. of days from TVARVC table
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_c_incoming_payment_days
IMPORTING
ex_range       = lt_tvarvc.
READ TABLE lt_tvarvc INTO lwa_tvarvc INDEX 1.
IF sy-subrc EQ 0.
lv_from_date = sy-datum - lwa_tvarvc-low.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = lv_from_date.
<lfs_date>-high = sy-datum.
ENDIF.
ELSE.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = im_date-low.
<lfs_date>-high = im_date-high.
ENDIF.

*Fetch Accounting Document Header data
SELECT bukrs
belnr
gjahr
blart
bldat
budat
stblg
FROM bkpf
INTO TABLE lt_bkpf
WHERE ( blart = yss_cl_type_pool=>yss_c_zd
OR blart = lc_zc )
AND   budat IN lt_r_date.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_bkpf BY belnr.

*General Ledger: Actual Line Items
SELECT ryear
docnr
rldnr
rbukrs
docln
prctr
FROM faglflexa
INTO TABLE lt_fagl
FOR ALL ENTRIES IN lt_bkpf
WHERE ryear  = lt_bkpf-gjahr
AND   docnr  = lt_bkpf-belnr
AND   rbukrs = lt_bkpf-bukrs
*           AND   prctr  = im_plant_id.    " ---KRISHNA20180912
AND   racct  = lc_racct
AND   rbusa  = im_plant_id.    " +++KRISHNA20180912
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_fagl BY ryear docnr rbukrs.

*Fetch Accounting Document Segment data
SELECT bukrs
belnr
gjahr
buzei
koart
gsber
dmbtr
kunnr
prctr
bupla
FROM bseg
INTO TABLE lt_bseg
FOR ALL ENTRIES IN lt_fagl
WHERE belnr = lt_fagl-docnr
AND   gjahr = lt_fagl-ryear
AND   bukrs = lt_fagl-rbukrs
*           AND   koart = yss_cl_type_pool=>yss_c_d. " --- KRISHNA201809
*           and   koart = yss_cl_type_pool=>yss_c_s.  " +++ KRISHNA20180
AND   koart IN ( yss_cl_type_pool=>yss_c_s, yss_cl_type_pool=
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_bseg BY bukrs belnr gjahr buzei.

lt_bseg_tmp = lt_bseg.
SORT lt_bseg_tmp BY kunnr.
DELETE ADJACENT DUPLICATES FROM lt_bseg_tmp COMPARING kunnr.
IF lt_bseg_tmp IS NOT INITIAL.
*Fetch Customer Master Name
SELECT kunnr
name1
name2
FROM kna1
INTO TABLE lt_kna1
*             FOR ALL ENTRIES IN lt_bseg
FOR ALL ENTRIES IN lt_bseg_tmp " +++ KRISHNA 15.10.2018
*             WHERE kunnr = lt_bseg-kunnr.
WHERE kunnr = lt_bseg_tmp-kunnr. " +++ KRISHNA 15.10.2018
IF sy-subrc EQ 0.
SORT lt_kna1 BY kunnr.
ENDIF.
ENDIF.

CLEAR:lt_bseg_tmp.
lt_bseg_tmp = lt_bseg.
** Delete G/L account entries
DELETE lt_bseg_tmp WHERE koart EQ yss_cl_type_pool=>yss_c_s.
SORT lt_bseg_tmp BY bukrs belnr gjahr.

**Delete customer entries
DELETE lt_bseg  WHERE koart EQ yss_cl_type_pool=>yss_c_d.
*Display List
LOOP AT lt_bseg INTO ls_bseg.
*Company Code
ls_payment_list-company_code = ls_bseg-bukrs.
*Payment ID
ls_payment_list-payment_id   = ls_bseg-belnr.
*Fiscal Year
ls_payment_list-fiscal_year  = ls_bseg-gjahr.
*** >>> Start Krishna 15.10.2018
READ TABLE lt_bseg_tmp INTO ls_bseg_tmp
WITH KEY bukrs = ls_bseg-bukrs
belnr = ls_bseg-belnr
gjahr = ls_bseg-gjahr
BINARY SEARCH.
IF sy-subrc EQ 0.
ls_bseg-kunnr = ls_bseg_tmp-kunnr.
ENDIF.
*** <<< End Krishna 15.10.2018
*Customer Account
ls_payment_list-customer_account = ls_bseg-kunnr.
*Customer Name
READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_bseg-kunnr BIN
IF sy-subrc = 0.
ls_payment_list-customer_name = ls_kna1-name1.
ENDIF.
*Date's
READ TABLE lt_bkpf INTO ls_bkpf WITH KEY belnr = ls_bseg-belnr BIN
IF sy-subrc = 0.
*Document Date
ls_payment_list-document_date = ls_bkpf-bldat.
*Posting Date
ls_payment_list-posting_date  = ls_bkpf-budat.
*Reversal/Cancelled Document
ls_payment_list-reversal_doc  = ls_bkpf-stblg.
ENDIF.
*Amount
ls_payment_list-amount = ls_bseg-dmbtr.

APPEND ls_payment_list TO ex_payments_list.
CLEAR : ls_bseg,ls_kna1,ls_bkpf,ls_payment_list.
ENDLOOP.

ENDMETHOD.
CREATE_GOODS_RECEIPT
item
METHOD create_goods_receipt.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 28-March-2018
* Description : Create Goods Receipt w.r.t Outbound Delivery
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*


ENDMETHOD.
DOWNLOAD_TO_EXCEL
item
METHOD download_to_excel.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 23-March-2018
* Description : Get EWB Excel Format for Download
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_vbrk,
vbeln TYPE vbrk-vbeln,
fkart TYPE vbrk-fkart,
fktyp TYPE vbrk-fktyp,
fkdat TYPE vbrk-fkdat,
bukrs TYPE vbrk-bukrs,
kunrg TYPE vbrk-kunrg,
kunag TYPE vbrk-kunag,
knumv TYPE vbrk-knumv,
bupla TYPE vbrk-bupla,
END OF lty_vbrk.

TYPES : BEGIN OF lty_vbrp,
vbeln TYPE vbrp-vbeln,
posnr TYPE vbrp-posnr,
fkimg TYPE vbrp-fkimg,
vrkme TYPE vbrp-vrkme,
meins TYPE vbrp-meins,
netwr TYPE vbrp-netwr,
matnr TYPE vbrp-matnr,
arktx TYPE vbrp-arktx,
werks TYPE vbrp-werks,
mwsbp TYPE vbrp-mwsbp,
END OF lty_vbrp.

TYPES : BEGIN OF lty_konv,
knumv TYPE konv-knumv,
kposn TYPE konv-kposn,
kschl TYPE konv-kschl,
kbetr TYPE konv-kbetr,
kwert TYPE konv-kwert,
END OF lty_konv.

TYPES : BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
parvw TYPE vbpa-parvw,
kunnr TYPE vbpa-kunnr,
adrnr TYPE vbpa-adrnr,
END OF lty_vbpa.

TYPES : BEGIN OF lty_adrc,
addrnumber TYPE adrc-addrnumber,
name1      TYPE adrc-name1,
name2      TYPE adrc-name2,
city1      TYPE adrc-city1,
post_code1 TYPE adrc-post_code1,
country    TYPE adrc-country,
region     TYPE adrc-region,
str_suppl1 TYPE adrc-str_suppl1,
str_suppl2 TYPE adrc-str_suppl2,
END OF lty_adrc.

TYPES : BEGIN OF lty_tvfkt,
spras TYPE tvfkt-spras,
fkart TYPE tvfkt-fkart,
vtext TYPE tvfkt-vtext,
END OF lty_tvfkt.

TYPES : BEGIN OF lty_marc,
matnr TYPE marc-matnr,
werks TYPE marc-werks,
steuc TYPE marc-steuc,
END OF lty_marc.

TYPES : BEGIN OF lty_t001w,
werks TYPE t001w-werks,
adrnr TYPE t001w-adrnr,
regio TYPE t001w-regio,
END OF lty_t001w.

TYPES : BEGIN OF lty_branch,
bukrs  TYPE j_1bbranch-bukrs,
branch TYPE j_1bbranch-branch,
gstin  TYPE j_1bbranch-gstin,
END OF lty_branch.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
stcd3 TYPE kna1-stcd3,
regio TYPE kna1-regio,
END OF lty_kna1.

TYPES : BEGIN OF lty_fieldnames,
title(100),
END OF lty_fieldnames.
*Data Declarations
DATA : lt_vbrk        TYPE TABLE OF lty_vbrk,
ls_vbrk        TYPE lty_vbrk,
lt_vbrp        TYPE TABLE OF lty_vbrp,
ls_vbrp        TYPE lty_vbrp,
lt_vbpa        TYPE TABLE OF lty_vbpa,
ls_vbpa        TYPE lty_vbpa,
lt_adrc        TYPE TABLE OF lty_adrc,
ls_adrc        TYPE lty_adrc,
lt_konv        TYPE TABLE OF lty_konv,
ls_konv        TYPE lty_konv,
lt_tvfkt       TYPE TABLE OF lty_tvfkt,
ls_tvfkt       TYPE lty_tvfkt,
lt_t001w       TYPE TABLE OF lty_t001w,
ls_t001w       TYPE lty_t001w,
lt_marc        TYPE TABLE OF lty_marc,
ls_marc        TYPE lty_marc,
lt_from        TYPE TABLE OF lty_adrc,
ls_from        TYPE lty_adrc,
lt_branch      TYPE TABLE OF lty_branch,
ls_branch      TYPE lty_branch,
lt_kna1        TYPE TABLE OF lty_kna1,
lt_excel_data  TYPE yss_tt_ewb_format,
lt_excel_data1 TYPE yss_tt_ewb_format,
ls_excel_data  TYPE yss_s_ewb_format,
lt_fieldnames  TYPE TABLE OF lty_fieldnames,
ls_fieldnames  TYPE lty_fieldnames,
ls_kna1        TYPE lty_kna1,
lv_rate        TYPE konv-kbetr,
ls_return      TYPE bapiret2,
lv_filename    TYPE string,
lv_path        TYPE string,
lv_fullpath    TYPE string,
lv_result      TYPE i.


* Billing Header Data
SELECT vbeln
fkart
fktyp
fkdat
bukrs
kunrg
kunag
knumv
bupla
FROM vbrk
INTO TABLE lt_vbrk
WHERE vbeln IN im_vbeln
AND   bupla = im_bupla.

IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_vbrk BY vbeln.

* Billing Item Data
SELECT vbeln
posnr
fkimg
vrkme
meins
netwr
matnr
arktx
werks
mwsbp
FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln.
IF sy-subrc = 0.
SORT lt_vbrp BY vbeln.
ENDIF.

* Sold to Party & Ship to Party Address No's
SELECT vbeln
posnr
parvw
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln
AND   parvw IN (yss_cl_type_pool=>yss_c_we,yss_cl_type_pool=>
IF sy-subrc = 0.
SORT lt_vbpa BY vbeln parvw.
* Address
SELECT addrnumber
name1
name2
city1
post_code1
country
region
FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber = lt_vbpa-adrnr.
IF sy-subrc = 0.
SORT lt_adrc BY addrnumber.
ENDIF.
*To GSTIN
SELECT kunnr
stcd3
regio
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_vbpa
WHERE kunnr = lt_vbpa-kunnr.
IF sy-subrc = 0.
SORT lt_kna1 BY kunnr.
ENDIF.
ENDIF.
* Condition Taxes and Amounts
SELECT knumv
kposn
kschl
kbetr
kwert
FROM konv
INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv = lt_vbrk-knumv
AND   kschl IN (yss_cl_type_pool=>yss_c_cgst,yss_cl_type_pool
IF sy-subrc = 0.
SORT lt_konv BY knumv kposn kschl.
ENDIF.

*Billing Type Description
*    SELECT spras
*           fkart
*           vtext
*           FROM tvfkt
*           INTO TABLE lt_tvfkt
*           FOR ALL ENTRIES IN lt_vbrk
*           WHERE spras = 'EN'
*           AND   fkart = lt_vbrk-fkart.
*    IF sy-subrc = 0.
*      SORT lt_tvfkt BY fkart.
*    ENDIF.

*HSN
SELECT matnr
werks
steuc
FROM marc
INTO TABLE lt_marc
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr = lt_vbrp-matnr
AND   werks = lt_vbrp-werks.
IF sy-subrc = 0.
SORT lt_marc BY matnr werks.
ENDIF.

*From Address
SELECT werks
adrnr
regio
FROM t001w
INTO TABLE lt_t001w
FOR ALL ENTRIES IN lt_vbrp
WHERE werks = lt_vbrp-werks.
IF sy-subrc = 0.
SORT lt_t001w BY werks.
SELECT addrnumber
name1
name2
city1
post_code1
country
region
FROM adrc
INTO TABLE lt_from
FOR ALL ENTRIES IN lt_t001w
WHERE addrnumber = lt_t001w-adrnr.
IF sy-subrc = 0.
SORT lt_from BY addrnumber.
ENDIF.
ENDIF.

*From GSTIN
SELECT bukrs
branch
gstin
FROM j_1bbranch
INTO TABLE lt_branch
FOR ALL ENTRIES IN lt_vbrk
WHERE branch = lt_vbrk-bupla.
IF sy-subrc = 0.
SORT lt_branch BY branch.
ENDIF.

*Excel Data structure
LOOP AT lt_vbrp INTO ls_vbrp.
*Supply Type
ls_excel_data-supply_type = 'Outward'(040).
*Sub Type
ls_excel_data-sub_type    = 'Supply'(041).
*Doc Type
ls_excel_data-doc_type    = 'Tax Invoice'(042).
*Item No
ls_excel_data-item_no     = ls_vbrp-posnr.
*Product
ls_excel_data-product     = ls_vbrp-matnr.
*Description
ls_excel_data-description = ls_vbrp-arktx.
*HSN
READ TABLE lt_marc INTO ls_marc WITH KEY matnr = ls_vbrp-matnr
werks = ls_vbrp-werks BIN
IF sy-subrc = 0.
ls_excel_data-hsn = ls_marc-steuc.
ENDIF.
*Units
ls_excel_data-units = ls_vbrp-vrkme.
*Quantity
ls_excel_data-qty   = ls_vbrp-fkimg.
*Assessable Value
ls_excel_data-assessable_value = ls_vbrp-netwr.
*Total Invoice Value
ls_excel_data-total_invoice_value = ls_vbrp-netwr + ls_vbrp-mwsbp.
*Condition Rates and Amounts
READ TABLE lt_vbrk INTO ls_vbrk WITH KEY vbeln = ls_vbrp-vbeln BIN
IF sy-subrc = 0.
LOOP AT lt_konv INTO ls_konv WHERE knumv = ls_vbrk-knumv
AND   kposn = ls_vbrp-posnr.
CASE ls_konv-kschl.
*CGST Rate & CGST Amt
WHEN yss_cl_type_pool=>yss_c_cgst.
lv_rate = lv_rate + ls_konv-kbetr.
ls_excel_data-cgst_amount  = ls_excel_data-cgst_amount  +
*SGST/UTGST Rate & SGST/UTGST Amt
WHEN yss_cl_type_pool=>yss_c_sgst OR yss_cl_type_pool=>yss_c
lv_rate = lv_rate + ls_konv-kbetr.
ls_excel_data-sgst_amount  = ls_excel_data-sgst_amount  +
*IGST Rate & IGST Amt
WHEN yss_cl_type_pool=>yss_c_igst.
lv_rate = lv_rate + ls_konv-kbetr.
ls_excel_data-igst_amount  = ls_excel_data-igst_amount  +
ENDCASE.
CLEAR : ls_konv.
ENDLOOP.
*Rate's CGST/SGST/IGST
ls_excel_data-tax_rate = lv_rate.
*Doc type
*        READ TABLE lt_tvfkt INTO ls_tvfkt WITH KEY fkart = ls_vbrk-fkar
*        IF sy-subrc = 0.
*          ls_excel_data-doc_type = ls_tvfkt-vtext.
*        ENDIF.
*Doc No
ls_excel_data-doc_no = ls_vbrp-vbeln.
*Doc Date
CONCATENATE ls_vbrk-fkdat+6(2) '.' ls_vbrk-fkdat+4(2) '.' ls_vbr
*From GSTIN and From State
READ TABLE lt_branch INTO ls_branch WITH KEY branch = ls_vbrk-bu
IF sy-subrc = 0.
ls_excel_data-from_gstin = ls_branch-gstin.
ls_excel_data-from_state = ls_excel_data-from_gstin+0(2).
ENDIF.
*Mode of Transport
ls_excel_data-transport_mode = 'Road'(043).
*Transport Date
CONCATENATE ls_vbrk-fkdat+6(2) '.' ls_vbrk-fkdat+4(2) '.' ls_vbr
ENDIF.
*From Address
READ TABLE lt_t001w INTO ls_t001w WITH KEY werks = ls_vbrp-werks B
IF sy-subrc = 0.
*Dispatch State
ls_excel_data-dispatch_state = ls_t001w-regio.
READ TABLE lt_from INTO ls_from WITH KEY addrnumber = ls_t001w-a
IF sy-subrc = 0.
ls_excel_data-from_name       = ls_from-name1.
ls_excel_data-from_street1    = ls_from-str_suppl1.
ls_excel_data-from_street2    = ls_from-str_suppl2.
ls_excel_data-from_city       = ls_from-city1.
ls_excel_data-from_post_code1 = ls_from-post_code1.
ENDIF.
ENDIF.
*To Address
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=
IF sy-subrc = 0.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-ad
IF sy-subrc = 0.
ls_excel_data-to_name       = ls_adrc-name1.
ls_excel_data-to_street1    = ls_adrc-str_suppl1.
ls_excel_data-to_street2    = ls_adrc-str_suppl2.
ls_excel_data-to_city       = ls_adrc-city1.
ls_excel_data-to_post_code1 = ls_adrc-post_code1.
ENDIF.
*Ship to State
READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbpa-kunnr B
IF sy-subrc = 0.
ls_excel_data-ship_to_state = ls_kna1-regio.
ENDIF.
ENDIF.

*To GSTIN and To State
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=
IF sy-subrc = 0.
READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbpa-kunnr B
IF sy-subrc = 0.
ls_excel_data-to_gstin = ls_kna1-stcd3.
ls_excel_data-to_state = ls_kna1-regio.
ENDIF.
ENDIF.
APPEND ls_excel_data TO ex_excel_data.
CLEAR: ls_vbrp,ls_marc,ls_excel_data,ls_vbrk,lv_rate,ls_tvfkt,ls_a
ENDLOOP.
ENDMETHOD.
FIND_MATERIAL_GROUP
item
METHOD find_material_group.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  : Zareena Begum
* Created on  :
* Description : Generic method to get material groups with description
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
TYPES: BEGIN OF lty_mvgr1,
mvgr1 TYPE mvgr1,
END OF lty_mvgr1.
DATA: lv_mat_grp TYPE char4,
lt_mat_grp TYPE TABLE OF lty_mvgr1,
lt_tvm1t   TYPE TABLE OF tvm1t,
lt_r_vkorg TYPE rsdsselopt_t.

* Get the sales organizations from tvarvc entries
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_sales_org
IMPORTING
ex_range       = lt_r_vkorg.

IF im_mat_grp_id IS NOT INITIAL.
lv_mat_grp = im_mat_grp_id.
TRANSLATE lv_mat_grp TO UPPER CASE.
ENDIF.
CONCATENATE  lv_mat_grp '%' INTO lv_mat_grp.
CONDENSE lv_mat_grp NO-GAPS.

*Fetch mat groups from mvke table
SELECT mvgr1 FROM mvke
INTO TABLE lt_mat_grp
WHERE mvgr1 LIKE lv_mat_grp AND
vkorg IN lt_r_vkorg .
IF sy-subrc NE 0.
*If no data found
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found
msgv1  = ycx_ss_exception=>format( im_mat_grp_id )
msgv2  = ycx_ss_exception=>format( im_req_params-werks ).
ENDIF.

*Fetch the text for mvgr1
IF lt_mat_grp IS NOT INITIAL.
SORT lt_mat_grp.
DELETE ADJACENT DUPLICATES FROM lt_mat_grp COMPARING mvgr1.
SELECT * FROM tvm1t
INTO TABLE lt_tvm1t
FOR ALL ENTRIES IN lt_mat_grp
WHERE mvgr1 = lt_mat_grp-mvgr1.
IF sy-subrc EQ 0.
"Do nothing
ENDIF.
ENDIF.

*To get the material group description in the final table
LOOP AT lt_mat_grp ASSIGNING FIELD-SYMBOL(<lfs_mat_grp>).
IF <lfs_mat_grp>-mvgr1 IS INITIAL.  "Do not append when material g
CONTINUE.
ENDIF.
APPEND INITIAL LINE TO ex_mat_grp ASSIGNING FIELD-SYMBOL(<lfs_fin_
<lfs_fin_mat_grp>-mat_group_id = <lfs_mat_grp>-mvgr1.
READ TABLE lt_tvm1t ASSIGNING FIELD-SYMBOL(<lfs_tvm1t>) WITH KEY m
IF sy-subrc EQ 0.
<lfs_fin_mat_grp>-mat_group_text = <lfs_tvm1t>-bezei.
ENDIF.
ENDLOOP.

ENDMETHOD.
GET_RETURN_SALES_QTY_DETAILS
item
METHOD get_return_sales_qty_details.
DATA : lt_ret_sales_qty TYPE yss_tt_vbfa.
SELECT vbelv posnv vbtyp_n rfmng FROM vbfa
INTO TABLE lt_ret_sales_qty
WHERE vbelv EQ im_vbeln
AND vbtyp_n EQ yss_cl_type_pool=>yss_c_h.
IF sy-subrc EQ 0.
DELETE lt_ret_sales_qty WHERE rfmng EQ '' OR posnv EQ ''.
LOOP AT lt_ret_sales_qty INTO DATA(ls_ret_sales_qty).
COLLECT ls_ret_sales_qty INTO ex_ret_sales_qty.
CLEAR ls_ret_sales_qty.
ENDLOOP.
ENDIF.
ENDMETHOD.
EDIT_CUSTOMER_CREDIT_LIMIT
item
METHOD edit_customer_credit_limit.
DATA : ls_knkk TYPE knkk.
SELECT SINGLE * FROM knkk INTO ls_knkk WHERE kunnr = im_customer.
IF sy-subrc EQ 0.
ls_knkk-klimk = im_creditlimit.
ELSE.
ls_knkk-kunnr = im_customer.
ls_knkk-kkber = yss_cl_type_pool=>yss_c_rmss.
ls_knkk-klimk = im_creditlimit.
ENDIF.
MODIFY knkk FROM ls_knkk.
IF sy-subrc EQ 0.
COMMIT WORK.
ex_status = yss_cl_type_pool=>yss_c_0.
ELSE.
ex_status = yss_cl_type_pool=>yss_c_1.
ROLLBACK WORK.
ENDIF.

IF ex_status EQ yss_cl_type_pool=>yss_c_1.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>credit_limit_not_success
msgv1  = ycx_ss_exception=>format( im_customer ).
ENDIF.
ENDMETHOD.
GET_CUSTOMER_ANALYSIS
item
METHOD get_customer_analysis.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 05-April-2018
* Description : Get Customer Analysis Orders
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Data Declarations
DATA : lo_exception TYPE REF TO ycx_ss_exception.

IF im_werks+0(1) = yss_cl_type_pool=>yss_c_s.
TRY.
CALL METHOD yss_cl_sd_process=>get_customer_analysis_sk
EXPORTING
im_werks    = im_werks
im_kunnr    = im_kunnr
im_period   = im_period
im_kdgrp    = im_kdgrp
im_vtweg    = yss_cl_type_pool=>yss_c_ds
IMPORTING
ex_analysis = ex_analysis.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
ELSEIF im_werks+0(1) = yss_cl_type_pool=>yss_c_k.
TRY.
CALL METHOD yss_cl_sd_process=>get_customer_analysis_sk
EXPORTING
im_werks    = im_werks
im_kunnr    = im_kunnr
im_period   = im_period
im_kdgrp    = im_kdgrp
im_vtweg    = yss_cl_type_pool=>yss_c_dh
IMPORTING
ex_analysis = ex_analysis.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
ENDIF.
ENDMETHOD.
GET_CUSTOMER_ANALYSIS_SK
item
METHOD get_customer_analysis_sk.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 05-April-2018
* Description : Get Customer Analysis Orders
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_knvv,
kunnr TYPE knvv-kunnr,
vkorg TYPE knvv-vkorg,
vtweg TYPE knvv-vtweg,
spart TYPE knvv-spart,
kdgrp TYPE knvv-kdgrp,
END OF lty_knvv.

TYPES : BEGIN OF lty_s001,
ssour   TYPE s001-ssour,
vrsio   TYPE s001-vrsio,
spmon   TYPE s001-spmon,
sptag   TYPE s001-sptag,
spwoc   TYPE s001-spwoc,
spbup   TYPE s001-spbup,
kunnr   TYPE s001-kunnr,
vkorg   TYPE s001-vkorg,
vtweg   TYPE s001-vtweg,
spart   TYPE s001-spart,
matnr   TYPE s001-matnr,
stwae   TYPE s001-stwae,
aenetwr TYPE s001-aenetwr,
umnetwr TYPE s001-umnetwr,
oauwe   TYPE s001-oauwe,
END OF lty_s001.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
name1 TYPE kna1-name1,
name2 TYPE kna1-name2,
END OF lty_kna1.

TYPES : lty_r_vrsio TYPE RANGE OF mcs0-vrsio,
lty_r_spmon TYPE RANGE OF mcs0-spmon,
lty_r_sptag TYPE RANGE OF mcs0-sptag,
lty_r_spwoc TYPE RANGE OF mcs0-spwoc,
lty_r_matnr TYPE RANGE OF s001-matnr.

*Data Declarations
DATA : lt_s001      TYPE TABLE OF lty_s001,
ls_s001      TYPE lty_s001,
lt_s001_temp TYPE TABLE OF lty_s001,
ls_s001_temp TYPE lty_s001.

DATA : lt_knvv TYPE TABLE OF lty_knvv,
ls_knvv TYPE lty_knvv.

DATA : lt_kna1 TYPE TABLE OF lty_kna1,
ls_kna1 TYPE lty_kna1.

DATA : ls_cust_analysis  TYPE yss_s_customer_analysis,
lv_index          TYPE i,
lv_incoming       TYPE s001-aenetwr,
lv_incoming_final TYPE s001-aenetwr,
lv_sales          TYPE s001-umnetwr,
lv_sales_final    TYPE s001-umnetwr,
lv_open           TYPE s001-oauwe,
lv_open_final     TYPE s001-oauwe.

DATA  : lr_vrsio TYPE lty_r_vrsio,
ls_vrsio TYPE LINE OF lty_r_vrsio,
lr_spmon TYPE lty_r_spmon,
ls_spmon TYPE LINE OF lty_r_spmon,
lr_sptag TYPE lty_r_sptag,
ls_sptag TYPE LINE OF lty_r_sptag,
lr_spwoc TYPE lty_r_spwoc,
ls_spwoc TYPE LINE OF lty_r_spwoc,
lr_matnr TYPE lty_r_matnr,
ls_matnr TYPE LINE OF lty_r_matnr.

*Customer Master Sales Data
SELECT kunnr
vkorg
vtweg
spart
kdgrp
FROM knvv
INTO TABLE lt_knvv
WHERE kunnr IN im_kunnr
AND   vkorg = yss_cl_type_pool=>yss_c_rmss
AND   vtweg = im_vtweg
AND   spart = yss_cl_type_pool=>yss_c_md
AND   kdgrp IN im_kdgrp
AND   vwerk = im_werks.

IF lt_knvv IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

SORT lt_knvv BY kunnr vkorg vtweg spart.

ls_vrsio-sign   = 'I'.
ls_vrsio-option = 'EQ'.
ls_vrsio-low    = '000'.
ls_vrsio-high   = '000'.
APPEND ls_vrsio TO lr_vrsio.

ls_spmon-sign   = 'I'.
ls_spmon-option = 'EQ'.
ls_spmon-low    = '000000'.
ls_spmon-high   = '000000'.
APPEND ls_spmon TO lr_spmon.

ls_sptag-sign   = 'I'.
ls_sptag-option = 'EQ'.
ls_sptag-low    = '00000000'.
ls_sptag-high   = '00000000'.
APPEND ls_sptag TO lr_sptag.

ls_spwoc-sign   = 'I'.
ls_spwoc-option = 'EQ'.
ls_spwoc-low    = '000000'.
ls_spwoc-high   = '000000'.
APPEND ls_spwoc TO lr_spwoc.

*Customer Statistics
SELECT ssour
vrsio
spmon
sptag
spwoc
spbup
kunnr
vkorg
vtweg
spart
matnr
stwae
aenetwr
umnetwr
oauwe
FROM s001
INTO TABLE lt_s001
FOR ALL ENTRIES IN lt_knvv
WHERE ssour = space
AND   vrsio IN lr_vrsio
AND   spmon IN lr_spmon
AND   sptag IN lr_sptag
AND   spwoc IN lr_spwoc
AND   spbup IN im_period
AND   kunnr = lt_knvv-kunnr
AND   vkorg = yss_cl_type_pool=>yss_c_rmss
AND   vtweg = im_vtweg
AND   spart = yss_cl_type_pool=>yss_c_md
AND   matnr IN lr_matnr.

IF lt_s001 IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

SORT lt_s001 BY kunnr.
DELETE lt_s001 WHERE aenetwr IS INITIAL AND umnetwr IS INITIAL AND o
*Customer Master Data
SELECT kunnr
name1
name2
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_s001
WHERE kunnr = lt_s001-kunnr.
IF sy-subrc = 0.
SORT lt_kna1 BY kunnr.
ENDIF.

lt_s001_temp = lt_s001.
DELETE ADJACENT DUPLICATES FROM lt_s001 COMPARING kunnr.
*Customer Analysis structure
LOOP AT lt_s001 INTO ls_s001.
*Dealer Code
ls_cust_analysis-dealer_code = ls_s001-kunnr.
*Dealer Name
READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_s001-kunnr BIN
IF sy-subrc = 0.
ls_cust_analysis-dealer_name = ls_kna1-name1.
ENDIF.

READ TABLE lt_s001_temp TRANSPORTING NO FIELDS
WITH KEY kunnr = ls_s001-kunnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index.
lv_index = sy-tabix.
LOOP AT lt_s001_temp INTO ls_s001_temp FROM lv_index.
IF ls_s001_temp-kunnr NE ls_s001-kunnr.
EXIT.
ENDIF.
lv_incoming = lv_incoming + ls_s001_temp-aenetwr.
lv_sales    = lv_sales    + ls_s001_temp-umnetwr.
lv_open     = lv_open     + ls_s001_temp-oauwe.
CLEAR : ls_s001_temp.
ENDLOOP.
*Incoming Order
ls_cust_analysis-incoming_order = lv_incoming.
lv_incoming_final = lv_incoming_final + lv_incoming.
*Sales
ls_cust_analysis-sales          = lv_sales.
lv_sales_final = lv_sales_final + lv_sales.
*Open Orders
ls_cust_analysis-open_order     = lv_open.
lv_open_final = lv_open_final + lv_open.
*Currency
ls_cust_analysis-currency       = ls_s001-stwae.
APPEND ls_cust_analysis TO ex_analysis.
CLEAR : ls_cust_analysis.
*For Total
AT LAST.
ls_cust_analysis-dealer_code    = 'Total'.
ls_cust_analysis-incoming_order = lv_incoming_final.
ls_cust_analysis-sales          = lv_sales_final.
ls_cust_analysis-open_order     = lv_open_final.
APPEND ls_cust_analysis TO ex_analysis.
ENDAT.
CLEAR : ls_kna1,lv_incoming,lv_sales,lv_open,lv_index,ls_s001.
ENDIF.
ENDLOOP.
ENDMETHOD.
GET_CUSTOMER_ANALYSIS_QTY
item
METHOD get_customer_analysis_qty.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 06-April-2018
* Description : Get Customer Analysis Quantity
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Data Declarations
DATA : lo_exception TYPE REF TO ycx_ss_exception.

IF im_werks+0(1) = yss_cl_type_pool=>yss_c_s.
TRY.
CALL METHOD yss_cl_sd_process=>get_customer_analysis_qty_sk
EXPORTING
im_werks    = im_werks
im_kunnr    = im_kunnr
im_period   = im_period
im_matnr    = im_matnr
im_vtweg    = yss_cl_type_pool=>yss_c_ds
im_mat_grp  = im_mat_grp
IMPORTING
ex_analysis = ex_analysis.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
ELSEIF im_werks+0(1) = yss_cl_type_pool=>yss_c_k.
TRY.
CALL METHOD yss_cl_sd_process=>get_customer_analysis_qty_sk
EXPORTING
im_werks    = im_werks
im_kunnr    = im_kunnr
im_period   = im_period
im_matnr    = im_matnr
im_vtweg    = yss_cl_type_pool=>yss_c_dh
im_mat_grp  = im_mat_grp
IMPORTING
ex_analysis = ex_analysis.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
ENDIF.
ENDMETHOD.
GET_CUSTOMER_ANALYSIS_QTY_SK
item
METHOD get_customer_analysis_qty_sk.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 06-April-2018
* Description : Get Customer Analysis Quantity
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_knvv,
kunnr TYPE knvv-kunnr,
vkorg TYPE knvv-vkorg,
vtweg TYPE knvv-vtweg,
spart TYPE knvv-spart,
kdgrp TYPE knvv-kdgrp,
END OF lty_knvv.

TYPES : BEGIN OF lty_s001,
ssour   TYPE s001-ssour,
vrsio   TYPE s001-vrsio,
spmon   TYPE s001-spmon,
sptag   TYPE s001-sptag,
spwoc   TYPE s001-spwoc,
spbup   TYPE s001-spbup,
kunnr   TYPE s001-kunnr,
vkorg   TYPE s001-vkorg,
vtweg   TYPE s001-vtweg,
spart   TYPE s001-spart,
matnr   TYPE s001-matnr,
aemenge TYPE s001-aemenge,
ummenge TYPE s001-ummenge,
oaume   TYPE s001-oaume,
END OF lty_s001.

TYPES : BEGIN OF lty_makt,
matnr TYPE makt-matnr,
spras TYPE makt-spras,
maktx TYPE makt-maktx,
maktg TYPE makt-maktg,
END OF lty_makt.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
name1 TYPE kna1-name1,
name2 TYPE kna1-name2,
END OF lty_kna1.

*Ranges Declarations
TYPES : lty_r_vrsio TYPE RANGE OF mcs0-vrsio,
lty_r_spmon TYPE RANGE OF mcs0-spmon,
lty_r_sptag TYPE RANGE OF mcs0-sptag,
lty_r_spwoc TYPE RANGE OF mcs0-spwoc,
lty_r_matnr TYPE RANGE OF s001-matnr.
*** >>> START GANGADHAR20180628
TYPES : BEGIN OF lty_mvke,
matnr TYPE matnr,
vkorg TYPE vkorg,
vtweg TYPE vtweg,
mvgr1 TYPE mvgr1,
END OF lty_mvke.
DATA : lt_mvke  TYPE STANDARD TABLE OF lty_mvke,
lt_tvm1t TYPE STANDARD TABLE OF tvm1t.
*** <<< END GANGADHAR20180628

*Data Declarations
DATA : lt_s001      TYPE TABLE OF lty_s001,
ls_s001      TYPE lty_s001,
lt_s001_temp TYPE TABLE OF lty_s001,
ls_s001_temp TYPE lty_s001.

DATA : lt_knvv TYPE TABLE OF lty_knvv,
ls_knvv TYPE lty_knvv.

DATA : lt_makt TYPE TABLE OF lty_makt,
ls_makt TYPE lty_makt.

DATA : lt_kna1 TYPE TABLE OF lty_kna1,
ls_kna1 TYPE lty_kna1.

DATA : ls_cust_analysis  TYPE yss_s_customer_qty,
lv_index          TYPE i,
lv_incoming       TYPE s001-aemenge,
lv_incoming_final TYPE s001-aemenge,
lv_sales          TYPE s001-ummenge,
lv_sales_final    TYPE s001-ummenge,
lv_open           TYPE s001-oaume,
lv_open_final     TYPE s001-oaume.

DATA  : lr_vrsio TYPE lty_r_vrsio,
ls_vrsio TYPE LINE OF lty_r_vrsio,
lr_spmon TYPE lty_r_spmon,
ls_spmon TYPE LINE OF lty_r_spmon,
lr_sptag TYPE lty_r_sptag,
ls_sptag TYPE LINE OF lty_r_sptag,
lr_spwoc TYPE lty_r_spwoc,
ls_spwoc TYPE LINE OF lty_r_spwoc,
lr_matnr TYPE lty_r_matnr,
ls_matnr TYPE LINE OF lty_r_matnr.

*Customer Master Sales Data
SELECT kunnr
vkorg
vtweg
spart
kdgrp
FROM knvv
INTO TABLE lt_knvv
WHERE kunnr IN im_kunnr
AND   vkorg = yss_cl_type_pool=>yss_c_rmss
AND   vtweg = im_vtweg
AND   spart = yss_cl_type_pool=>yss_c_md
AND   vwerk = im_werks.

IF lt_knvv IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

SORT lt_knvv BY kunnr vkorg vtweg spart.

ls_vrsio-sign   = 'I'.
ls_vrsio-option = 'EQ'.
ls_vrsio-low    = '000'.
ls_vrsio-high   = '000'.
APPEND ls_vrsio TO lr_vrsio.

ls_spmon-sign   = 'I'.
ls_spmon-option = 'EQ'.
ls_spmon-low    = '000000'.
ls_spmon-high   = '000000'.
APPEND ls_spmon TO lr_spmon.

ls_sptag-sign   = 'I'.
ls_sptag-option = 'EQ'.
ls_sptag-low    = '00000000'.
ls_sptag-high   = '00000000'.
APPEND ls_sptag TO lr_sptag.

ls_spwoc-sign   = 'I'.
ls_spwoc-option = 'EQ'.
ls_spwoc-low    = '000000'.
ls_spwoc-high   = '000000'.
APPEND ls_spwoc TO lr_spwoc.

*Customer Statistics
SELECT ssour
vrsio
spmon
sptag
spwoc
spbup
kunnr
vkorg
vtweg
spart
matnr
aemenge
ummenge
oaume
FROM s001
INTO TABLE lt_s001
FOR ALL ENTRIES IN lt_knvv
WHERE ssour = space
AND   vrsio IN lr_vrsio
AND   spmon IN lr_spmon
AND   sptag IN lr_sptag
AND   spwoc IN lr_spwoc
AND   spbup IN im_period
AND   kunnr = lt_knvv-kunnr
AND   vkorg = yss_cl_type_pool=>yss_c_rmss
AND   vtweg = im_vtweg
AND   spart = yss_cl_type_pool=>yss_c_md
AND   matnr IN im_matnr.

IF lt_s001 IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_s001 BY kunnr matnr.
DELETE lt_s001 WHERE aemenge IS INITIAL AND ummenge IS INITIAL AND o
*Material Master Data
SELECT matnr
spras
maktx
maktg
FROM makt
INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_s001
WHERE matnr = lt_s001-matnr.
IF sy-subrc = 0.
SORT lt_makt BY matnr.
ENDIF.

*** >>> START GANGADHAR20180628
*  Fetch material group
IF lt_s001 IS NOT INITIAL.
SELECT matnr vkorg vtweg mvgr1 FROM mvke INTO TABLE lt_mvke
FOR ALL ENTRIES IN lt_s001
WHERE matnr EQ lt_s001-matnr
AND vkorg EQ lt_s001-vkorg
AND vtweg EQ lt_s001-vtweg.
IF sy-subrc EQ 0.
SORT lt_mvke BY matnr.
*  Fetch material group description
SELECT * FROM tvm1t INTO TABLE lt_tvm1t
FOR ALL ENTRIES IN lt_mvke
WHERE spras EQ sy-langu
AND mvgr1 EQ lt_mvke-mvgr1.
IF sy-subrc EQ 0.
SORT lt_tvm1t BY mvgr1.
ENDIF.
ENDIF.
ENDIF.

*** <<< END GANGADHAR20180628
*Customer Master Data
SELECT kunnr
name1
name2
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_s001
WHERE kunnr = lt_s001-kunnr.
IF sy-subrc = 0.
SORT lt_kna1 BY kunnr.
ENDIF.

lt_s001_temp = lt_s001.
DELETE ADJACENT DUPLICATES FROM lt_s001 COMPARING kunnr matnr.
*Customer Analysis structure
LOOP AT lt_s001 INTO ls_s001.
*Dealer Code
ls_cust_analysis-dealer_code = ls_s001-kunnr.
*Dealer Name
READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_s001-kunnr BIN
IF sy-subrc = 0.
ls_cust_analysis-dealer_name = ls_kna1-name1.
ENDIF.
*Material Code
ls_cust_analysis-material_code = ls_s001-matnr.
*Material Name
READ TABLE lt_makt INTO ls_makt WITH KEY matnr = ls_s001-matnr BIN
IF sy-subrc = 0.
ls_cust_analysis-material_name = ls_makt-maktg.
ENDIF.
*** >>> START GANGADHAR20180628
* Material group & description
READ TABLE lt_mvke INTO DATA(ls_mvke) WITH KEY matnr = ls_s001-mat
IF sy-subrc EQ 0.
IF im_mat_grp IS NOT INITIAL AND im_mat_grp NE ls_mvke-mvgr1.  "
CONTINUE.
ENDIF.

READ TABLE lt_tvm1t INTO DATA(ls_tvm1t) WITH KEY mvgr1 = ls_mvke
IF sy-subrc EQ 0.
ls_cust_analysis-mat_grp_desc = ls_tvm1t-bezei.
ls_cust_analysis-mat_grp      = ls_tvm1t-mvgr1.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180628

READ TABLE lt_s001_temp TRANSPORTING NO FIELDS
WITH KEY kunnr = ls_s001-kunnr
matnr = ls_s001-matnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index.
lv_index = sy-tabix.
LOOP AT lt_s001_temp INTO ls_s001_temp FROM lv_index.
IF ls_s001_temp-kunnr NE ls_s001-kunnr OR ls_s001_temp-matnr N
EXIT.
ENDIF.
lv_incoming = lv_incoming + ls_s001_temp-aemenge.
lv_sales    = lv_sales    + ls_s001_temp-ummenge.
lv_open     = lv_open     + ls_s001_temp-oaume.
CLEAR : ls_s001_temp.
ENDLOOP.
*Incoming Order
ls_cust_analysis-incoming_qty = lv_incoming.
lv_incoming_final = lv_incoming_final + lv_incoming.
*Sales
ls_cust_analysis-sales_qty      = lv_sales.
lv_sales_final = lv_sales_final + lv_sales.
*Open Orders
ls_cust_analysis-open_qty     = lv_open.
lv_open_final = lv_open_final + lv_open.
APPEND ls_cust_analysis TO ex_analysis.
CLEAR : ls_cust_analysis.
*For Total
AT LAST.
ls_cust_analysis-dealer_code  = 'Total'.
ls_cust_analysis-incoming_qty = lv_incoming_final.
ls_cust_analysis-sales_qty    = lv_sales_final.
ls_cust_analysis-open_qty     = lv_open_final.
APPEND ls_cust_analysis TO ex_analysis.
ENDAT.
CLEAR : ls_kna1,lv_incoming,lv_sales,lv_open,lv_index,ls_s001,ls
ENDIF.
ENDLOOP.
ENDMETHOD.
GET_GSTR1_DETAILS
item
METHOD get_gstr1_details.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 17-April-2018
* Description : Get GSTR1 Report Details
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_vbrk,
vbeln TYPE vbrk-vbeln,
fkart TYPE vbrk-fkart,
fktyp TYPE vbrk-fktyp,
vbtyp TYPE vbtyp,
fkdat TYPE vbrk-fkdat,
netwr TYPE vbrk-netwr,
kunrg TYPE vbrk-kunrg,
kunag TYPE vbrk-kunag,
knumv TYPE vbrk-knumv,
END OF lty_vbrk.

TYPES : BEGIN OF lty_vbrp,
vbeln TYPE vbrp-vbeln,
posnr TYPE vbrp-posnr,
netwr TYPE vbrp-netwr,
END OF lty_vbrp.

TYPES : BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
parvw TYPE vbpa-parvw,
kunnr TYPE vbpa-kunnr,
adrnr TYPE vbpa-adrnr,
xcpdk TYPE vbpa-xcpdk,  " One time customer
END OF lty_vbpa.

TYPES : BEGIN OF lty_adrc,
addrnumber TYPE adrc-addrnumber,
name1      TYPE adrc-name1,
name2      TYPE adrc-name2,
home_city  TYPE adrc-home_city,  "GSTIN number
country    TYPE adrc-country,
region     TYPE adrc-region,
END OF lty_adrc.

TYPES : BEGIN OF lty_konv,
knumv TYPE konv-knumv,
kposn TYPE konv-kposn,
kschl TYPE konv-kschl,
kbetr TYPE konv-kbetr,
kwert TYPE konv-kwert,
END OF lty_konv.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
land1 TYPE kna1-land1,
name1 TYPE kna1-name1,
ort01 TYPE kna1-ort01,
regio TYPE kna1-regio,
xcpdk TYPE kna1-xcpdk,
stcd3 TYPE kna1-stcd3,
stceg TYPE kna1-stceg,
END OF lty_kna1.

TYPES : BEGIN OF lty_knvi,
kunnr TYPE knvi-kunnr,
aland TYPE knvi-aland,
tatyp TYPE knvi-tatyp,
taxkd TYPE knvi-taxkd,
END OF lty_knvi.

TYPES : BEGIN OF lty_t005u,
spras TYPE t005u-spras,
land1 TYPE t005u-land1,
bland TYPE t005u-bland,
bezei TYPE t005u-bezei,
END OF lty_t005u.

* Data Declarations
DATA : lt_vbrk          TYPE TABLE OF lty_vbrk,
ls_vbrk          TYPE lty_vbrk,
lt_vbpa          TYPE TABLE OF lty_vbpa,
ls_vbpa          TYPE lty_vbpa,
lt_adrc          TYPE TABLE OF lty_adrc,
ls_adrc          TYPE lty_adrc,
lt_konv          TYPE TABLE OF lty_konv,
ls_konv          TYPE lty_konv,
lt_konv_new      TYPE TABLE OF lty_konv,
ls_konv_new      TYPE lty_konv,
lt_kna1          TYPE TABLE OF lty_kna1,
ls_kna1          TYPE lty_kna1,
lt_knvi          TYPE TABLE OF lty_knvi,
ls_knvi          TYPE lty_knvi,
lt_t005u         TYPE TABLE OF lty_t005u,
ls_t005u         TYPE lty_t005u,
ls_data          TYPE yss_s_gstr1,
lv_taxable_value TYPE konv-kwert,
lt_vbrp          TYPE TABLE OF lty_vbrp,
ls_vbrp          TYPE lty_vbrp.

*Constants Declarations
CONSTANTS : lc_value TYPE konv-kwert VALUE '250000'.
* Billing Header Data
SELECT vbeln
fkart
fktyp
vbtyp
fkdat
netwr
kunrg
kunag
knumv
FROM vbrk
INTO TABLE lt_vbrk
WHERE vbeln IN im_vbeln
AND   fkdat IN im_date
AND   bukrs EQ im_bukrs
AND   bupla EQ im_bupla
AND   fkart NOT IN ('S1','S2')
AND   rfbsk NE 'E'
AND   fksto NE 'X'
AND   vbtyp IN ('M', 'O', 'P')." Invoice, Credit memo, Debit
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_vbrk BY vbeln.

SELECT vbeln
posnr
netwr
FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln.
IF sy-subrc = 0.
SORT lt_vbrp BY vbeln posnr.
ENDIF.

* Ship to Party
SELECT vbeln
posnr
parvw
kunnr
adrnr
xcpdk
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln
AND   parvw EQ yss_cl_type_pool=>yss_c_we.
IF sy-subrc = 0.
SORT lt_vbpa BY vbeln.

*GSTIN
SELECT kunnr
land1
name1
ort01
regio
xcpdk
stcd3
stceg
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_vbpa
WHERE kunnr = lt_vbpa-kunnr.
IF sy-subrc = 0.
SORT lt_kna1 BY kunnr.
ENDIF.

* Address details - GSTIN (For OTC customers)  "+++GANGADHAR20180528
SELECT addrnumber
name1
name2
home_city    " GSTIN number
country
region FROM adrc INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.

*Region
IF lt_kna1 IS NOT INITIAL.
SELECT spras
land1
bland
bezei
FROM t005u
INTO TABLE lt_t005u
FOR ALL ENTRIES IN lt_kna1
WHERE spras = 'EN'
AND   land1 = 'IN'
AND   bland = lt_kna1-regio.
IF sy-subrc = 0.
SORT lt_t005u BY bland.
ENDIF.
ENDIF.

*** >>> START GANGADHAR20180528 For One time customers
IF lt_adrc IS NOT INITIAL.
SELECT spras
land1
bland
bezei
FROM t005u
APPENDING TABLE lt_t005u
FOR ALL ENTRIES IN lt_adrc
WHERE spras = 'EN'
AND   land1 = 'IN'
AND   bland = lt_adrc-region.
IF sy-subrc = 0.
SORT lt_t005u BY bland.
ENDIF.
DELETE ADJACENT DUPLICATES FROM lt_t005u COMPARING bland.
ENDIF.
*** <<< END GANGADHAR20180528

*Invoice Type
SELECT kunnr
aland
tatyp
taxkd
FROM knvi
INTO TABLE lt_knvi
FOR ALL ENTRIES IN lt_vbpa
WHERE kunnr = lt_vbpa-kunnr
AND   aland = 'IN'
AND tatyp IN ('JOCG','JOSG','JOIG').
IF sy-subrc = 0.
SORT lt_knvi BY kunnr tatyp.
ENDIF.

* Condition Taxes and Amounts
SELECT knumv
kposn
kschl
kbetr
kwert
FROM konv
INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv = lt_vbrk-knumv
AND   kschl IN ('JOCG','JOSG','JOIG').
IF sy-subrc = 0.
SORT lt_konv BY knumv kbetr.
ENDIF.

*For Calculations
lt_konv_new = lt_konv.
DELETE ADJACENT DUPLICATES FROM lt_konv_new COMPARING knumv kbetr.
*GSTR1 Report Details
LOOP AT lt_vbrk INTO ls_vbrk.
*GSTIN of Recipient and Receiver Name
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln BIN
IF sy-subrc = 0 AND ls_vbpa-xcpdk IS INITIAL.
READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbpa-kunnr B
IF sy-subrc = 0.
*GSTIN of Recipient
ls_data-gstin_recipient = ls_kna1-stcd3.
*Receiver Name
ls_data-receiver_name   = ls_kna1-name1.
*Place of Supply
READ TABLE lt_t005u INTO ls_t005u WITH KEY bland = ls_kna1-reg
IF sy-subrc = 0.
ls_data-place_of_supply = ls_t005u-bezei.
ENDIF.
ENDIF.
ELSEIF sy-subrc = 0 AND ls_vbpa-xcpdk IS NOT INITIAL.  " One time
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-ad
*GSTIN of Recipient
ls_data-gstin_recipient = ls_adrc-home_city.
*Receiver Name
ls_data-receiver_name   = ls_adrc-name1.
*Place of Supply
READ TABLE lt_t005u INTO ls_t005u WITH KEY bland = ls_adrc-regio
IF sy-subrc = 0.
ls_data-place_of_supply = ls_t005u-bezei.
ENDIF.
ENDIF.  " <<< END GANGADHAR20180528
*Invoice No
ls_data-invoice_no    = ls_vbrk-vbeln.
*Invoice Date
ls_data-invoice_date  = ls_vbrk-fkdat.
*Invoice Value
*      ls_data-invoice_value = ls_vbrk-netwr.
*Reverse Charge
ls_data-reverse_charge = 'N'.
*E-Commerce GSTIN
*      ls_data-ecomm_gstin = ' '.

LOOP AT lt_konv_new INTO ls_konv_new WHERE knumv = ls_vbrk-knumv.
LOOP AT lt_konv INTO ls_konv WHERE knumv = ls_konv_new-knumv
AND   kbetr = ls_konv_new-kbetr.
lv_taxable_value = lv_taxable_value + ls_konv-kwert.

ENDLOOP.

*For CGST/SGST
LOOP AT lt_konv INTO ls_konv WHERE knumv = ls_konv_new-knumv
AND   kbetr = ls_konv_new-kbetr
AND   kschl = 'JOCG'.
READ TABLE lt_vbrp INTO ls_vbrp WITH KEY vbeln = ls_vbrk-vbeln
posnr = ls_konv-kposn
IF sy-subrc = 0.
ls_data-invoice_value = ls_data-invoice_value + ls_vbrp-netw
ENDIF.
CLEAR : ls_vbrp.
ENDLOOP.

*For IGST
LOOP AT lt_konv INTO ls_konv WHERE knumv = ls_konv_new-knumv
AND   kbetr = ls_konv_new-kbetr
AND   kschl = 'JOIG'.
READ TABLE lt_vbrp INTO ls_vbrp WITH KEY vbeln = ls_vbrk-vbeln
posnr = ls_konv-kposn
IF sy-subrc = 0.
ls_data-invoice_value = ls_data-invoice_value + ls_vbrp-netw
ENDIF.
CLEAR : ls_vbrp.
ENDLOOP.
*Rate
IF ls_konv-kbetr IS NOT INITIAL.
ls_data-rate = ls_konv-kbetr / 10.
ENDIF.

*Taxable Value
ls_data-taxable_value = lv_taxable_value.
*Invoice Type
READ TABLE lt_knvi INTO ls_knvi WITH KEY kunnr = ls_vbpa-kunnr
tatyp = ls_konv_new-ksc
IF sy-subrc = 0 AND ( ls_knvi-taxkd = '0' OR ls_knvi-taxkd = '1'
ls_data-invoice_type = 'Regular'.
ENDIF.
*Type
IF ls_data-gstin_recipient IS NOT INITIAL.
ls_data-type = 'B2B'.
ELSEIF ls_data-taxable_value LE lc_value.
ls_data-type = 'B2CS'.
ELSEIF ls_data-taxable_value GT lc_value.
ls_data-type = 'B2CL'.
ENDIF.

IF ls_vbrk-vbtyp NE 'M'.  " For Credit or Debit notes
IF ls_data-gstin_recipient IS NOT INITIAL.
ls_data-type = 'CDNR'.
ELSE.
ls_data-type = 'CDNUR'.
ENDIF.
IF ls_vbrk-vbtyp = 'O'.
ls_data-invoice_type = 'Credit memo'.
ELSEIF ls_vbrk-vbtyp = 'P'.
ls_data-invoice_type = 'Debit memo'.
ENDIF.
ENDIF.

APPEND ls_data TO ex_gstr1_details.
CLEAR : ls_data-invoice_value,ls_data-taxable_value,ls_data-rate
ENDLOOP.
CLEAR : ls_vbrk,ls_vbpa,ls_kna1,ls_t005u.
ENDLOOP.
ENDMETHOD.
GET_GSTR2_DETAILS
item
METHOD get_gstr2_details.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 17-April-2018
* Description : Get GSTR2 Report Details
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

**Types Declarations
TYPES : BEGIN OF lty_rbkp,
belnr TYPE rbkp-belnr,
gjahr TYPE rbkp-gjahr,
bldat TYPE rbkp-bldat,
budat TYPE rbkp-budat,
bukrs TYPE rbkp-bukrs,
lifnr TYPE rbkp-lifnr,
rmwwr TYPE rbkp-rmwwr,
END OF lty_rbkp.

TYPES : BEGIN OF lty_rseg,
belnr TYPE rseg-belnr,
gjahr TYPE rseg-gjahr,
buzei TYPE rseg-buzei,
ebeln TYPE rseg-ebeln,
ebelp TYPE rseg-ebelp,
matnr TYPE rseg-matnr,
werks TYPE rseg-werks,
wrbtr TYPE rseg-wrbtr,
mwskz TYPE rseg-mwskz,
menge TYPE rseg-menge,
END OF lty_rseg.

TYPES : BEGIN OF lty_bset,
bukrs TYPE bset-bukrs,
belnr TYPE bset-belnr,
gjahr TYPE bset-gjahr,
buzei TYPE bset-buzei,
shkzg TYPE bset-shkzg,
hwbas TYPE bset-hwbas,
fwbas TYPE bset-fwbas,
hwste TYPE bset-hwste,
fwste TYPE bset-fwste,
kschl TYPE bset-kschl,
bupla TYPE bset-bupla,
END OF lty_bset.

*Data Declarations
DATA : lt_rbkp TYPE TABLE OF lty_rbkp,
ls_rbkp TYPE lty_rbkp.

DATA : lt_rseg TYPE TABLE OF lty_rseg,
ls_rseg TYPE lty_rseg.

DATA : lt_bset TYPE TABLE OF lty_bset,
ls_bset TYPE lty_bset.

*Document Header: Invoice Receipt
SELECT belnr
gjahr
bldat
budat
bukrs
lifnr
rmwwr
FROM rbkp
INTO TABLE lt_rbkp
WHERE belnr IN im_belnr
AND   budat IN im_date
AND   bukrs EQ im_bukrs.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_rbkp BY belnr.

*Document Item: Incoming Invoice
SELECT belnr
gjahr
buzei
ebeln
ebelp
matnr
werks
wrbtr
mwskz
menge
FROM rseg
INTO TABLE lt_rseg
FOR ALL ENTRIES IN lt_rbkp
WHERE belnr = lt_rbkp-belnr
AND   gjahr = lt_rbkp-gjahr.
IF sy-subrc = 0.
SORT lt_rseg BY belnr gjahr buzei.
ENDIF.

SELECT bukrs
belnr
gjahr
buzei
shkzg
hwbas
fwbas
hwste
fwste
kschl
bupla
FROM bset
INTO TABLE lt_bset
FOR ALL ENTRIES IN lt_rseg
WHERE belnr = lt_rseg-belnr
AND   gjahr = lt_rseg-gjahr.
IF sy-subrc = 0.

ENDIF.
ENDMETHOD.
GET_BILLING_DATA
item
METHOD get_billing_data.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 19-April-2018
* Description : Get Billing Details
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*
* types declarations
TYPES : BEGIN OF lty_vbrk,
vbeln TYPE vbrk-vbeln,
fkart TYPE vbrk-fkart,
fktyp TYPE vbrk-fktyp,
vkorg TYPE vbrk-vkorg,
knumv TYPE vbrk-knumv,
fkdat TYPE vbrk-fkdat,
netwr TYPE vbrk-netwr,
erdat TYPE vbrk-erdat,
kunrg TYPE vbrk-kunrg,
kunag TYPE vbrk-kunag,
kalsm TYPE vbrk-kalsm,
rfbsk TYPE vbrk-rfbsk,
fksto TYPE vbrk-fksto,
vbtyp TYPE vbrk-vbtyp,
END OF lty_vbrk.

TYPES : BEGIN OF lty_vbrp,
vbeln TYPE vbrp-vbeln,
posnr TYPE vbrp-posnr,
fkimg TYPE vbrp-fkimg,
vrkme TYPE vbrp-vrkme,
ntgew TYPE vbrp-ntgew,
meins TYPE vbrp-meins,
netwr TYPE vbrp-netwr,
mwsbp TYPE vbrp-mwsbp,
vgbel TYPE vbrp-vgbel,
vgpos TYPE vbrp-vgpos,
aubel TYPE vbrp-aubel,
aupos TYPE vbrp-aupos,
matnr TYPE vbrp-matnr,
arktx TYPE vbrp-arktx,
matkl TYPE vbrp-matkl,
spart TYPE vbrp-spart,
werks TYPE vbrp-werks,
vkgrp TYPE vbrp-vkgrp,
mvgr1 TYPE vbrp-mvgr1,
mvgr2 TYPE vbrp-mvgr2,
END OF lty_vbrp.

TYPES : BEGIN OF lty_konv,
knumv TYPE konv-knumv,
kposn TYPE konv-kposn,
kschl TYPE konv-kschl,
kbetr TYPE konv-kbetr,
waers TYPE konv-waers,
kwert TYPE konv-kwert,
END OF lty_konv.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
name1 TYPE kna1-name1,
END OF lty_kna1.

TYPES : BEGIN OF lty_likp,
vbeln TYPE likp-vbeln,
lfdat TYPE likp-lfdat,
END OF lty_likp.

TYPES:BEGIN OF lty_t001w,
werks TYPE werks_d,
name1 TYPE name1,
END OF lty_t001w.

TYPES : BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
parvw TYPE vbpa-parvw,
kunnr TYPE vbpa-kunnr,
adrnr TYPE vbpa-adrnr,
END OF lty_vbpa.

TYPES : BEGIN OF lty_adrc,
addrnumber TYPE adrc-addrnumber,
name1      TYPE adrc-name1,
name2      TYPE adrc-name2,
city1      TYPE adrc-city1,
post_code1 TYPE adrc-post_code1,
country    TYPE adrc-country,
region     TYPE adrc-region,
city2      TYPE adrc-city2,     " Drug License number
home_city  TYPE adrc-home_city, " GSTIN number
name_co    TYPE adrc-name_co,   " PAN number
str_suppl1 TYPE adrc-str_suppl1,
str_suppl2 TYPE adrc-str_suppl2,
END OF lty_adrc.
* Data Declarations
DATA : lt_r_date           TYPE yss_cl_type_pool=>yss_r_date,
lt_r_kunnr          TYPE yss_cl_type_pool=>yss_r_kunnr,
lt_tvarvc           TYPE rsdsselopt_t,
lwa_tvarvc          TYPE LINE OF rsdsselopt_t,
lv_from_date        TYPE sy-datum,
lt_vbrk             TYPE TABLE OF lty_vbrk,
ls_vbrk             TYPE lty_vbrk,
lt_vbrp             TYPE TABLE OF lty_vbrp,
ls_vbrp             TYPE lty_vbrp,
lt_konv             TYPE TABLE OF lty_konv,
ls_konv             TYPE lty_konv,
lt_konv1            TYPE TABLE OF lty_konv,
lt_sditem_sg        TYPE TABLE OF yss_t_sditem_sg,
lt_t001w            TYPE TABLE OF lty_t001w,
lt_tvm1t            TYPE TABLE OF tvm1t,
lt_tvm2t            TYPE TABLE OF tvm2t,
lt_adrc             TYPE TABLE OF lty_adrc,
ls_adrc             TYPE lty_adrc,
lv_zspe             TYPE kbetr,
lv_zper             TYPE kbetr,
ls_bill_details_itm TYPE yss_s_billing_item,
ls_bill_list        TYPE yss_s_billing_list,
lt_kna1             TYPE TABLE OF lty_kna1,
ls_kna1             TYPE lty_kna1,
lv_index            TYPE i,
lv_index1           TYPE i,
lv_index2           TYPE i,
lt_vbpa             TYPE TABLE OF lty_vbpa,
ls_vbpa             TYPE lty_vbpa,
lt_likp             TYPE TABLE OF lty_likp,
ls_likp             TYPE lty_likp,
lo_exception        TYPE REF TO ycx_ss_exception.

DATA:lv_1ilstno   TYPE j_1ilstno,      "++ sapabap.08052018
lv_1ipanno   TYPE j_1ipanno,      "++ sapabap.08052018
lv_stcd3     TYPE stcd3,        "++ sapabap.08052018
lv_kunnr_tmp TYPE kunnr.        "++ sapabap.08052018
* Field Symbols
FIELD-SYMBOLS : <lfs_date>  TYPE LINE OF yss_cl_type_pool=>yss_r_dat
<lfs_kunnr> TYPE LINE OF yss_cl_type_pool=>yss_r_kun

* To fill lt_r_date
IF im_date IS INITIAL.
*Get no. of days from TVARVC table
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_P_BO_DAYS'
IMPORTING
ex_range       = lt_tvarvc.
READ TABLE lt_tvarvc INTO lwa_tvarvc INDEX 1.
IF sy-subrc EQ 0.
lv_from_date = sy-datum - lwa_tvarvc-low.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = lv_from_date.
<lfs_date>-high = sy-datum.
ENDIF.
ELSE.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = im_date-low.
<lfs_date>-high = im_date-high.
ENDIF.

* Fill lt_r_kunnr if im_clientid is provided
IF im_clientid IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_kunnr ASSIGNING <lfs_kunnr>.
<lfs_kunnr>-sign = 'I'.
<lfs_kunnr>-option = 'EQ'.
<lfs_kunnr>-low = im_clientid.
ENDIF.

* To get Billing Doc Header Data

SELECT vbeln
fkart
fktyp
vkorg
knumv
fkdat
netwr
erdat
kunrg
kunag
kalsm
rfbsk
fksto
vbtyp
FROM vbrk
INTO TABLE lt_vbrk
WHERE fkdat IN lt_r_date
AND   kunag IN lt_r_kunnr
AND   bupla EQ im_bupla
*           AND   fksto EQ abap_false
AND   vbtyp NOT IN ('N','S')
ORDER BY fkdat ASCENDING
%_HINTS ORACLE 'INDEX("VBRK" "VBRK~YSS")'.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

* Get Item data Billing Doc
IF lt_vbrk IS NOT INITIAL.
SELECT vbeln
posnr
fkimg
vrkme
ntgew
meins
netwr
mwsbp
vgbel
vgpos
aubel
aupos
matnr
arktx
matkl
spart
werks
vkgrp
mvgr1
mvgr2
FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln.
IF sy-subrc = 0.
SORT lt_vbrp BY vbeln.

**********************************************************************
SELECT * FROM yss_t_sditem_sg
INTO TABLE lt_sditem_sg
FOR ALL ENTRIES IN lt_vbrp
WHERE vbeln = lt_vbrp-aubel
AND posnr = lt_vbrp-aupos.
IF sy-subrc EQ 0.
SORT lt_sditem_sg BY vbeln posnr.
ENDIF.
SELECT * FROM tvm1t
INTO TABLE lt_tvm1t
FOR ALL ENTRIES IN lt_vbrp
WHERE spras EQ 'E'
AND mvgr1 = lt_vbrp-mvgr1.
IF sy-subrc EQ 0.
SORT lt_tvm1t BY mvgr1.
ENDIF.
SELECT * FROM tvm2t
INTO TABLE lt_tvm2t
FOR ALL ENTRIES IN lt_vbrp
WHERE spras EQ 'E'
AND mvgr2 = lt_vbrp-mvgr2.
IF sy-subrc EQ 0.
SORT lt_tvm2t BY mvgr2.
ENDIF.
SELECT werks name1
FROM t001w
INTO TABLE lt_t001w
FOR ALL ENTRIES IN lt_vbrp
WHERE werks = lt_vbrp-werks.
IF sy-subrc EQ 0.
SORT lt_t001w BY werks.
ENDIF.
**********************************************************************
* Get Delivery Date
SELECT vbeln
lfdat
FROM likp
INTO TABLE lt_likp
FOR ALL ENTRIES IN lt_vbrp
WHERE vbeln = lt_vbrp-vgbel.
IF sy-subrc = 0.
SORT lt_likp BY vbeln.
ENDIF.
ENDIF.
* Get Condition Types
SELECT knumv
kposn
kschl
kbetr
waers
kwert
FROM konv
INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv = lt_vbrk-knumv
AND   koaid = yss_cl_type_pool=>yss_c_koaid.
IF sy-subrc = 0 AND lt_konv IS NOT INITIAL .
SORT lt_konv BY knumv kposn.
ENDIF.
* Get Sold to Party Name
SELECT vbeln
posnr
parvw
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln
AND   parvw IN (yss_cl_type_pool=>yss_c_ag,yss_cl_type_pool
IF sy-subrc = 0.
SORT lt_vbpa BY vbeln parvw.

SELECT kunnr
name1
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_vbpa
WHERE kunnr = lt_vbpa-kunnr.
IF sy-subrc = 0.
SORT lt_kna1 BY kunnr.
ENDIF.
ENDIF.

**********************************************************************
* Address
SELECT addrnumber
name1
name2
city1
post_code1
country
region
city2        " drug details
home_city    " gstin
name_co      " pan
FROM adrc
INTO CORRESPONDING FIELDS OF TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber = lt_vbpa-adrnr.
IF sy-subrc = 0.
SORT lt_adrc BY addrnumber.
ENDIF.

* Condition Taxes and Amounts
SELECT knumv
kposn
kschl
kbetr
waers
kwert
FROM konv
INTO TABLE lt_konv1
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv = lt_vbrk-knumv
AND   kschl IN (yss_cl_type_pool=>yss_c_zpro,yss_cl_type_po
yss_cl_type_pool=>yss_c_zper,yss_cl_type_po
yss_cl_type_pool=>yss_c_sgst,yss_cl_type_po
IF sy-subrc = 0.
SORT lt_konv1 BY knumv kposn kschl.
ENDIF.
ENDIF.
**********************************************************************

LOOP AT lt_vbrk INTO ls_vbrk.
*Billing Doc No
ls_bill_list-bill_doc    = ls_vbrk-vbeln.
*Billing Type
ls_bill_list-bill_type   = ls_vbrk-fkart.
*Billing Category
ls_bill_list-bill_cat    = ls_vbrk-fktyp.
*Document Category description
CASE ls_vbrk-vbtyp.
WHEN 'M'.
ls_bill_list-doc_cat = 'Invoice'(035).
WHEN 'N'.
ls_bill_list-doc_cat = 'Cancellation'(036).
WHEN 'O'.
ls_bill_list-doc_cat = 'Credit Memo'(037).
WHEN 'S'.
ls_bill_list-doc_cat = 'Cancellation of Credit Memo'(039).
ENDCASE.
*Billing Creation Date
ls_bill_list-bill_date   = ls_vbrk-erdat.
*Condition Record
ls_bill_list-doc_cond    = ls_vbrk-knumv.
*Sold to Details
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=
IF sy-subrc = 0 AND ls_vbpa-kunnr IS NOT INITIAL.
*Sold to Num
ls_bill_list-sold_to_num = ls_vbpa-kunnr.
***        READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbpa-kunn
***        IF sy-subrc = 0.
****Sold to Party Name
***          ls_bill_list-sold_to_name = ls_kna1-name1.
***        ENDIF.
**Address
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-ad
IF sy-subrc = 0.
ls_bill_list-sold_to_street1 = ls_adrc-str_suppl1.
ls_bill_list-sold_to_street2 = ls_adrc-str_suppl2.
ls_bill_list-sold_to_city    = ls_adrc-city1.
ls_bill_list-sold_to_state   = ls_adrc-region.
ls_bill_list-sold_post_code1 = ls_adrc-post_code1.
ls_bill_list-sold_to_country = ls_adrc-country.
ls_bill_list-pan_no          = ls_adrc-name_co.
ls_bill_list-drug_licence    = ls_adrc-city2.
ls_bill_list-gstin_number    = ls_adrc-home_city.
ls_bill_list-sold_to_name = ls_adrc-name1.


" check if one time customer
SELECT SINGLE kunnr FROM kna1
INTO lv_kunnr_tmp
WHERE kunnr  = ls_vbpa-kunnr
AND   xcpdk EQ ''.   " ktokd EQ 'ZOT
IF sy-subrc NE 0.
"fetch all the values from
*Fetch GSTIN from KNA1
SELECT SINGLE stcd3
FROM kna1
INTO lv_stcd3
WHERE kunnr = ls_vbpa-kunnr.
IF sy-subrc EQ 0.
ls_bill_list-gstin_number = lv_stcd3.
CLEAR lv_stcd3.
ENDIF.

*Fetch Sales Tax Number and PAN number from J_1IMOCUST table
SELECT SINGLE j_1ilstno
j_1ipanno
FROM j_1imocust
INTO (lv_1ilstno,lv_1ipanno)
WHERE kunnr = ls_vbpa-kunnr.
IF sy-subrc EQ 0.
ls_bill_list-pan_no          = lv_1ipanno.
ls_bill_list-drug_licence    = lv_1ilstno.
CLEAR: lv_1ilstno,lv_1ipanno.
ENDIF.
ENDIF.
ENDIF.
ENDIF.

*Ship to Details
CLEAR : ls_vbpa,ls_kna1.
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrk-vbeln
parvw = yss_cl_type_pool=
IF sy-subrc = 0 AND ls_vbpa-kunnr IS NOT INITIAL.
ls_bill_list-payer_num = ls_vbpa-kunnr.
***        READ TABLE lt_kna1 INTO ls_kna1 WITH KEY kunnr = ls_vbpa-kunn
***        IF sy-subrc = 0.
***          ls_bill_list-payer_name = ls_kna1-name1.
***        ENDIF.
**Address
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-ad
IF sy-subrc = 0.
ls_bill_list-ship_to_street1 = ls_adrc-str_suppl1.
ls_bill_list-ship_to_street2 = ls_adrc-str_suppl2.
ls_bill_list-ship_to_city    = ls_adrc-city1.
ls_bill_list-ship_to_state   = ls_adrc-region.
ls_bill_list-ship_post_code1 = ls_adrc-post_code1.
ls_bill_list-ship_to_country = ls_adrc-country.
ls_bill_list-payer_name      = ls_adrc-name1.
ls_bill_list-pan_no          = ls_adrc-name_co.
ls_bill_list-drug_licence    = ls_adrc-city2.
ls_bill_list-gstin_number    = ls_adrc-home_city.
ENDIF.

" check if one time customer
SELECT SINGLE kunnr FROM kna1
INTO lv_kunnr_tmp
WHERE kunnr  = ls_vbpa-kunnr
AND   xcpdk EQ '' . "ktokd EQ 'ZOTC'.
IF sy-subrc NE 0.
"fetch all the values from
*Fetch GSTIN from KNA1
SELECT SINGLE stcd3
FROM kna1
INTO lv_stcd3
WHERE kunnr = ls_vbpa-kunnr.
IF sy-subrc EQ 0.
ls_bill_list-gstin_number = lv_stcd3.
CLEAR lv_stcd3.
ENDIF.

*Fetch Sales Tax Number and PAN number from J_1IMOCUST table
SELECT SINGLE j_1ilstno
j_1ipanno
FROM j_1imocust
INTO (lv_1ilstno,lv_1ipanno)
WHERE kunnr = ls_vbpa-kunnr.
IF sy-subrc EQ 0.
ls_bill_list-pan_no          = lv_1ipanno.
ls_bill_list-drug_licence    = lv_1ilstno.
CLEAR: lv_1ilstno,lv_1ipanno.
ENDIF.
ENDIF.

ENDIF.
*Total Amount from Item Table
READ TABLE lt_vbrp WITH KEY vbeln = ls_vbrk-vbeln TRANSPORTING
NO FIELDS BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index.
lv_index = sy-tabix.
LOOP AT lt_vbrp INTO ls_vbrp FROM lv_index.
IF ls_vbrp-vbeln NE ls_vbrk-vbeln.
EXIT.
ENDIF.
ls_bill_list-total_amount = ls_bill_list-total_amount + ls_vbr
CLEAR :ls_vbrp.
ENDLOOP.
ENDIF.
*Condition Types Taxes
READ TABLE lt_vbrp WITH KEY vbeln = ls_vbrk-vbeln TRANSPORTING
NO FIELDS BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index1.
lv_index1 = sy-tabix.
LOOP AT lt_vbrp INTO ls_vbrp FROM lv_index1.
IF ls_vbrp-vbeln NE ls_vbrk-vbeln.
EXIT.
ENDIF.
*Process Taxes
READ TABLE lt_konv TRANSPORTING NO FIELDS
WITH KEY knumv = ls_vbrk-knumv
kposn = ls_vbrp-posnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index2.
lv_index2 = sy-tabix.
LOOP AT lt_konv INTO ls_konv FROM lv_index2.
IF ls_konv-knumv NE ls_vbrk-knumv OR ls_konv-kposn NE ls_v
EXIT.
ENDIF.
CASE ls_konv-kschl.
WHEN yss_cl_type_pool=>yss_c_cgst. "CGST Amount
ls_bill_list-sum_camt = ls_bill_list-sum_camt + ls_kon
WHEN yss_cl_type_pool=>yss_c_sgst  OR
yss_cl_type_pool=>yss_c_ugst. "SGST/UGST Amount
ls_bill_list-sum_samt = ls_bill_list-sum_samt + ls_kon
WHEN yss_cl_type_pool=>yss_c_igst. "IGST Amount
ls_bill_list-sum_iamt = ls_bill_list-sum_iamt + ls_kon
ENDCASE.
CLEAR : ls_konv.
ENDLOOP.
ENDIF.
CLEAR : ls_vbrp.
ENDLOOP.
ENDIF.
*Billing Doc Status
IF ls_vbrk-fksto IS INITIAL.
CASE ls_vbrk-rfbsk.
WHEN yss_cl_type_pool=>yss_c_c.
ls_bill_list-status = 'Posted'(021).
WHEN yss_cl_type_pool=>yss_c_b.
ls_bill_list-status = 'Accounting Error'(022).
WHEN yss_cl_type_pool=>yss_c_f.
ls_bill_list-status = 'Pricing Error'(023).
WHEN OTHERS.
ls_bill_list-status = 'Other Errors'(024).
ENDCASE.
ELSE.
ls_bill_list-status = 'Cancelled'(038).
ENDIF.

*Delivery No
READ TABLE lt_vbrp INTO ls_vbrp WITH KEY vbeln = ls_vbrk-vbeln BIN
IF sy-subrc = 0.
ls_bill_list-delv_no = ls_vbrp-vgbel.
*Delivery Date
READ TABLE lt_likp INTO ls_likp WITH KEY vbeln = ls_bill_list-de
IF sy-subrc = 0.
ls_bill_list-delv_date = ls_likp-lfdat.
ENDIF.
ENDIF.

**********************************************************************
READ TABLE lt_vbrp WITH KEY vbeln = ls_vbrk-vbeln TRANSPORTING NO
IF sy-subrc EQ 0.
lv_index = sy-tabix.
*item details
LOOP AT lt_vbrp INTO ls_vbrp FROM lv_index.
IF ls_vbrp-vbeln NE ls_vbrk-vbeln.
EXIT.
ENDIF.
*Item No
ls_bill_details_itm-item_no  = ls_vbrp-posnr.
*Material
ls_bill_details_itm-material = ls_vbrp-matnr.
*Material Description
ls_bill_details_itm-mat_desc = ls_vbrp-arktx.
*Quantity
ls_bill_details_itm-qty      = ls_vbrp-fkimg.
*UOM
ls_bill_details_itm-uom      = ls_vbrp-meins.
*Net Value
ls_bill_details_itm-net_val  = ls_vbrp-netwr.
**Plant
ls_bill_details_itm-plant = ls_vbrp-werks.
**Plant Name
READ TABLE lt_t001w ASSIGNING FIELD-SYMBOL(<lfs_t001w>) WITH K
IF sy-subrc EQ 0.
ls_bill_details_itm-plant_name = <lfs_t001w>-name1.
ENDIF.
**Division
ls_bill_details_itm-division = ls_vbrp-spart.
** Sales group
ls_bill_details_itm-sales_group = ls_vbrp-vkgrp.
** New sales group
READ TABLE lt_sditem_sg ASSIGNING FIELD-SYMBOL(<lfs_sditem_sg>
posnr = ls_vbrp-aupos BINARY SEARCH.
IF sy-subrc EQ 0.
ls_bill_details_itm-new_sales_group = <lfs_sditem_sg>-zzsale
ENDIF.
*Material group1
ls_bill_details_itm-mat_group1  = ls_vbrp-mvgr1.
*Material group1 description
READ TABLE lt_tvm1t ASSIGNING FIELD-SYMBOL(<lfs_tvm1t>) WITH K
IF sy-subrc EQ 0.
ls_bill_details_itm-mat_group1_desc  = <lfs_tvm1t>-bezei.
ENDIF.
*Material group2
ls_bill_details_itm-mat_group2  = ls_vbrp-mvgr2.
*Material group2 description
READ TABLE lt_tvm2t ASSIGNING FIELD-SYMBOL(<lfs_tvm2t>) WITH K
IF sy-subrc EQ 0.
ls_bill_details_itm-mat_group2_desc  = <lfs_tvm2t>-bezei.
ENDIF.
*Discounts & Values
LOOP AT lt_konv1 INTO ls_konv WHERE knumv = ls_vbrk-knumv
AND   kposn = ls_vbrp-posnr.
CASE ls_konv-kschl.
*Price
WHEN yss_cl_type_pool=>yss_c_zpro.
ls_bill_details_itm-rate  = ls_konv-kbetr.
ls_bill_details_itm-price = ls_bill_details_itm-price +
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zspe.
lv_zspe = lv_zspe + ls_konv-kbetr.
ls_bill_details_itm-sch_val = ls_bill_details_itm-sch_va
ls_bill_details_itm-sch_type = 'A'.  " Percentage
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zsvl.
ls_bill_details_itm-fix_sch = ls_bill_details_itm-fix_sc
ls_bill_details_itm-sch_val = ls_bill_details_itm-sch_va
ls_bill_details_itm-sch_type = 'B'.  " Amount
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zper.
lv_zper = lv_zper + ls_konv-kbetr.
ls_bill_details_itm-dis_amt = ls_bill_details_itm-dis_am
ls_bill_details_itm-dis_type = 'A'.  " Percentage
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zval.
ls_bill_details_itm-dis_val = ls_bill_details_itm-dis_va
ls_bill_details_itm-dis_amt = ls_bill_details_itm-dis_am
ls_bill_details_itm-dis_type = 'B'.  " Amount
*CGST Rate & CGST Amt
WHEN yss_cl_type_pool=>yss_c_cgst.
ls_bill_details_itm-cgst_rate = ls_bill_details_itm-cgst
ls_bill_details_itm-cgst_amt  = ls_bill_details_itm-cgst
*SGST/UTGST Rate & SGST/UTGST Amt
WHEN yss_cl_type_pool=>yss_c_sgst OR yss_cl_type_pool=>yss
ls_bill_details_itm-sgst_rate = ls_bill_details_itm-sgst
ls_bill_details_itm-sgst_amt  = ls_bill_details_itm-sgst
*IGST Rate & IGST Amt
WHEN yss_cl_type_pool=>yss_c_igst.
ls_bill_details_itm-igst_rate = ls_bill_details_itm-igst
ls_bill_details_itm-igst_amt  = ls_bill_details_itm-igst
ENDCASE.
CLEAR : ls_konv.
ENDLOOP.
*Fix Sch
IF lv_zspe IS NOT INITIAL.
ls_bill_details_itm-fix_sch = lv_zspe / 10.
ENDIF.
*Dis Val
IF lv_zper IS NOT INITIAL.
ls_bill_details_itm-dis_val = lv_zper / 10.
ENDIF.
*CGST Rate
ls_bill_details_itm-cgst_rate = ls_bill_details_itm-cgst_rate
*SGST/UGST Rate
ls_bill_details_itm-sgst_rate = ls_bill_details_itm-sgst_rate
*IGST Rate
ls_bill_details_itm-igst_rate = ls_bill_details_itm-igst_rate
*Total Amount
ls_bill_details_itm-total_amt = ls_vbrp-netwr + ls_vbrp-mwsbp.
APPEND ls_bill_details_itm TO ls_bill_list-item.
CLEAR : ls_vbrp,lv_zper,lv_zspe,ls_bill_details_itm.
ENDLOOP.
ENDIF.
**********************************************************************
**Get Billing Document details
*      TRY.
*          CALL METHOD yss_cl_sd_process=>get_billing_details
*            EXPORTING
*              im_bupla      = im_bupla
*              im_billing_no = ls_bill_list-bill_doc
*            IMPORTING
*              ex_bill_item  = ls_bill_list-item.
*        CATCH ycx_ss_exception INTO lo_exception.
*          lo_exception->log_exception( ).
*      ENDTRY.

APPEND ls_bill_list TO ex_bill_list.
CLEAR : ls_vbrk,ls_bill_list,ls_kna1,ls_vbpa,ls_kna1,ls_likp,ls_vb
ENDLOOP.
ENDMETHOD.
GET_DELIVERY_DATA
item
METHOD get_delivery_data.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created on  : 19-April 2018
* Description : Get delivery details(Header and Item) for delivery numbe
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------

** Local type declarations
TYPES: BEGIN OF lty_likp,
vbeln     TYPE vbeln_vl,
lfdat     TYPE lfdat_v,
wadat_ist TYPE wadat_ist,
vbtyp     TYPE vbtyp,
kunnr     TYPE kunwe,
END OF lty_likp,

BEGIN OF lty_vbuk,
vbeln TYPE vbeln,
wbstk TYPE wbstk,
fkstk TYPE fkstk,
END OF lty_vbuk,

BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
parvw TYPE vbpa-parvw,
kunnr TYPE vbpa-kunnr,
adrnr TYPE vbpa-adrnr,
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE adrc-addrnumber,
name1      TYPE adrc-name1,
name2      TYPE adrc-name2,
END OF lty_adrc,

BEGIN OF lty_kna1,
kunnr TYPE kunnr,
name1 TYPE name1_gp,
END OF lty_kna1.

DATA :ls_lips      TYPE lips,
lt_lips      TYPE TABLE OF lips,
lt_lips_temp TYPE TABLE OF lips,
lv_vbeln     TYPE vbeln_vl,
lv_index     TYPE i,
lt_vbpa      TYPE TABLE OF lty_vbpa,
lt_adrc      TYPE TABLE OF lty_adrc,
lt_likp      TYPE TABLE OF lty_likp,
lt_kna1      TYPE TABLE OF lty_kna1,
lt_vbuk      TYPE TABLE OF lty_vbuk,   "Billing Status
lv_date      TYPE sy-datum,
lt_tvarvc    TYPE rsdsselopt_t,
lt_kunnr     TYPE rsdsselopt_t,
lt_dd07v     TYPE TABLE OF dd07v.

FIELD-SYMBOLS: <lfs_tvarvc>   TYPE rsdsselopt,
<lfs_kunnr>    TYPE rsdsselopt,
<lfs_delivery> TYPE yss_s_delivery_list,
<lfs_likp>     TYPE lty_likp,
<lfs_kna1>     TYPE lty_kna1,
<lfs_vbuk>     TYPE lty_vbuk.

CLEAR : ex_delivery_list.

IF im_ship_to IS NOT INITIAL.
APPEND INITIAL LINE TO lt_kunnr ASSIGNING <lfs_kunnr>.
<lfs_kunnr>-sign = 'I'.
<lfs_kunnr>-option = 'EQ'.
<lfs_kunnr>-low = im_ship_to.
ENDIF.

IF im_from_date IS NOT INITIAL AND im_to_date IS INITIAL.
APPEND INITIAL LINE TO lt_tvarvc ASSIGNING <lfs_tvarvc>.
<lfs_tvarvc>-sign = 'I'.
<lfs_tvarvc>-option = 'EQ'.
<lfs_tvarvc>-low    = im_from_date.
ELSEIF im_from_date IS INITIAL AND im_to_date IS NOT INITIAL.
APPEND INITIAL LINE TO lt_tvarvc ASSIGNING <lfs_tvarvc>.
<lfs_tvarvc>-sign = 'I'.
<lfs_tvarvc>-option = 'EQ'.
<lfs_tvarvc>-low    = im_to_date.
ELSEIF im_from_date IS NOT INITIAL AND im_to_date IS NOT INITIAL.
APPEND INITIAL LINE TO lt_tvarvc ASSIGNING <lfs_tvarvc>.
<lfs_tvarvc>-sign = 'I'.
<lfs_tvarvc>-option = 'BT'.
<lfs_tvarvc>-low    = im_from_date.
<lfs_tvarvc>-high   = im_to_date.
ELSE.
*Get TVARVC entry
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = 'YSS_P_DEL_DAYS'
IMPORTING
ex_range       = lt_tvarvc.
READ TABLE lt_tvarvc ASSIGNING <lfs_tvarvc> INDEX 1.
IF sy-subrc EQ 0.
<lfs_tvarvc>-option = 'BT'.
lv_date             = sy-datum - <lfs_tvarvc>-low.
<lfs_tvarvc>-low    = lv_date.
<lfs_tvarvc>-high   = sy-datum.
ENDIF.
ENDIF.

**Get Delivery details from delivery header
SELECT vbeln
lfdat
wadat_ist
vbtyp
kunnr
FROM likp
INTO TABLE lt_likp
WHERE vstel EQ im_req_params-werks
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND kunnr IN lt_kunnr
AND bldat IN lt_tvarvc
%_HINTS ORACLE 'INDEX("LIKP" "LIKP~YSS")' . "
IF sy-subrc EQ 0.
*Get Delivery Item Data
SELECT *
FROM lips
INTO TABLE lt_lips
FOR ALL ENTRIES IN lt_likp
WHERE vbeln = lt_likp-vbeln.
IF sy-subrc EQ 0.
DELETE lt_lips WHERE uecha IS INITIAL.
SORT lt_lips BY vbeln.
ENDIF.

*** >>> START GANGADHAR20180523
***** Get Customer details
***      SELECT kunnr
***             name1
***        FROM kna1
***        INTO TABLE lt_kna1
***        FOR ALL ENTRIES IN lt_likp
***        WHERE kunnr = lt_likp-kunnr.
***      IF sy-subrc EQ 0.
***        SORT lt_kna1 BY kunnr.
***      ENDIF.
* Get Sold to Party Name
SELECT vbeln
posnr
parvw
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_likp
WHERE vbeln = lt_likp-vbeln
AND   parvw IN (yss_cl_type_pool=>yss_c_ag,yss_cl_type_pool
IF sy-subrc = 0.
SORT lt_vbpa BY vbeln parvw.
* Address
SELECT addrnumber
name1
name2
FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber = lt_vbpa-adrnr.
IF sy-subrc = 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180523

** Get Billing details "Sales Document: Header Status and Administrative
SELECT vbeln
wbstk
fkstk
FROM vbuk
INTO TABLE lt_vbuk
FOR ALL ENTRIES IN lt_likp
WHERE vbeln = lt_likp-vbeln.
IF sy-subrc EQ 0 AND lt_vbuk IS NOT INITIAL.
SORT lt_vbuk BY vbeln.
ENDIF.
*Get domain text for VBTYP  (for eg - J : delivery)
CALL FUNCTION 'DD_DOMVALUES_GET'
EXPORTING
domname        = 'VBTYP'
text           = abap_true
langu          = sy-langu
TABLES
dd07v_tab      = lt_dd07v
EXCEPTIONS
wrong_textflag = 1
OTHERS         = 2.
IF sy-subrc <> 0.
RETURN.
ENDIF.
ENDIF.
SORT lt_dd07v BY domvalue_l. "+++hana
**Process delivery data
LOOP AT lt_likp ASSIGNING <lfs_likp>.
APPEND INITIAL LINE TO ex_delivery_list ASSIGNING <lfs_delivery>.
<lfs_delivery>-del_num      = <lfs_likp>-vbeln.
<lfs_delivery>-del_date     = <lfs_likp>-lfdat.
<lfs_delivery>-act_pgi_date = <lfs_likp>-wadat_ist.

**Get delivery type
READ TABLE lt_dd07v ASSIGNING FIELD-SYMBOL(<lfs_dd07v>) WITH KEY d
IF sy-subrc EQ 0.
<lfs_delivery>-doc_category = <lfs_dd07v>-ddtext.
IF <lfs_likp>-vbtyp = 'T'.
<lfs_delivery>-doc_category = 'Returns delivery'(033).
ENDIF.
ENDIF.

***** Get ship to party details
***      READ TABLE lt_kna1 ASSIGNING <lfs_kna1> WITH KEY kunnr = <lfs_l
***      IF sy-subrc EQ 0.
***        <lfs_delivery>-ship_to = <lfs_kna1>-name1.
***      ENDIF.
READ TABLE lt_vbpa INTO DATA(ls_vbpa) WITH KEY vbeln = <lfs_likp>-
parvw = yss_cl_type
IF sy-subrc = 0 AND ls_vbpa-kunnr IS NOT INITIAL.
READ TABLE lt_adrc INTO DATA(ls_adrc) WITH KEY addrnumber = ls_v
IF sy-subrc EQ 0.
<lfs_delivery>-ship_to = ls_adrc-name1.
CLEAR :ls_adrc,ls_vbpa.
ENDIF.
ENDIF.

**Get billing status details
READ TABLE lt_vbuk ASSIGNING <lfs_vbuk> WITH KEY vbeln = <lfs_likp
IF sy-subrc EQ 0.
IF <lfs_vbuk>-fkstk = yss_cl_type_pool=>yss_c_c.
<lfs_delivery>-status = text-005.
ELSEIF <lfs_vbuk>-fkstk = yss_cl_type_pool=>yss_c_b.
<lfs_delivery>-status = text-028.
ELSEIF <lfs_vbuk>-wbstk = yss_cl_type_pool=>yss_c_a.
<lfs_delivery>-status = text-014.
ELSEIF <lfs_vbuk>-wbstk = yss_cl_type_pool=>yss_c_b.
<lfs_delivery>-status =  text-027.
ELSEIF <lfs_vbuk>-wbstk = yss_cl_type_pool=>yss_c_c.
<lfs_delivery>-status = text-029.
ENDIF.
ENDIF.

**Get delivery item details
READ TABLE lt_lips WITH KEY vbeln = <lfs_likp>-vbeln TRANSPORTING
IF sy-subrc EQ 0.
lv_index = sy-tabix.
LOOP AT lt_lips INTO ls_lips FROM lv_index.
IF ls_lips-vbeln NE <lfs_likp>-vbeln.
EXIT.
ELSE.
APPEND ls_lips TO lt_lips_temp.
CLEAR:ls_lips.
ENDIF.
ENDLOOP.
ENDIF.
<lfs_delivery>-item = lt_lips_temp.
CLEAR:lt_lips_temp,lv_index,ls_lips.
ENDLOOP.
SORT ex_delivery_list BY del_date DESCENDING del_num DESCENDING.
ENDMETHOD.
GET_PENDING_SO_LIST
item
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 25-April-2018
* Description : Get pending sales order list due for delivery index
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*
METHOD get_pending_so_list.
TYPES: BEGIN OF lty_lips,
vbeln TYPE vbeln_vl,
posnr TYPE posnr_vl,
matnr TYPE matnr,
charg TYPE charg_d,
lfimg TYPE lfimg,
vgbel TYPE vgbel,
vgpos TYPE vgpos,
END OF lty_lips,

BEGIN OF lty_vbap,
vbeln  TYPE vbeln_va,
posnr  TYPE posnr_va,
matnr  TYPE matnr,
charg  TYPE charg_d,
kwmeng TYPE kwmeng,
END OF lty_vbap,

BEGIN OF lty_vbak,
vbeln TYPE vbeln_va,
audat TYPE audat,
bstnk TYPE bstnk,
END OF lty_vbak,

lty_r_lifsp TYPE RANGE OF lifsp.

DATA : lt_vepvg TYPE STANDARD TABLE OF vepvg,
lt_lips  TYPE STANDARD TABLE OF lty_lips,
lt_vbap  TYPE STANDARD TABLE OF lty_vbap,
lt_vbak  TYPE STANDARD TABLE OF lty_vbak,
lt_makt  TYPE STANDARD TABLE OF makt,
lr_lifsp TYPE lty_r_lifsp,
ls_lifsp TYPE LINE OF lty_r_lifsp,
lv_index TYPE i.

ls_lifsp-sign = yss_cl_type_pool=>yss_c_e.
ls_lifsp-option = 'BT'.
ls_lifsp-low = '08'.
ls_lifsp-high = 'Z5'.
APPEND ls_lifsp TO lr_lifsp.
CLEAR ls_lifsp.

* Fetch the Delivery Due Index sales order documents
SELECT * FROM vepvg INTO TABLE lt_vepvg
WHERE vstel EQ im_req_params-werks
AND ledat IN im_deliv_date
AND kunwe IN im_ship_to_party
AND vbeln IN im_salesorder
AND lifsp IN lr_lifsp.
IF sy-subrc NE 0 OR lt_vepvg IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_deliv_pending_so_orders.
ENDIF.

SELECT vbeln audat bstnk FROM vbak INTO TABLE lt_vbak
FOR ALL ENTRIES IN lt_vepvg
WHERE vbeln EQ lt_vepvg-vbeln.
IF sy-subrc EQ 0.
SORT lt_vepvg BY vbeln.
SORT lt_vbak  BY vbeln.
ENDIF.
* Fetch the delivery pending sales order item details
SELECT vbeln posnr matnr charg kwmeng FROM vbap
INTO TABLE lt_vbap FOR ALL ENTRIES IN lt_vepvg
WHERE vbeln EQ lt_vepvg-vbeln
AND matnr IN im_material.
IF sy-subrc EQ 0.
*   Fetch the delivery order details to check for any partial sales orde
SELECT vbeln posnr matnr charg lfimg vgbel vgpos FROM lips INTO TA
FOR ALL ENTRIES IN lt_vbap
WHERE vgbel EQ lt_vbap-vbeln
AND vgpos EQ lt_vbap-posnr.
IF sy-subrc EQ 0.
SORT lt_lips BY vgbel vgpos.
ENDIF.

* Get the material description
SELECT * FROM makt INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_vbap
WHERE matnr EQ lt_vbap-matnr
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.
ENDIF.

LOOP AT lt_vbap INTO DATA(lwa_vbap).

APPEND INITIAL LINE TO ex_so_list ASSIGNING FIELD-SYMBOL(<lfs_so_l

* Read the Ship-to-party and salesorder number
READ TABLE lt_vepvg INTO DATA(lwa_vepvg) WITH KEY vbeln = lwa_vbap
IF sy-subrc EQ 0.
<lfs_so_list>-ship_to  = lwa_vepvg-kunwe.
<lfs_so_list>-ord_num  = lwa_vepvg-vbeln.
<lfs_so_list>-gi_date  = lwa_vepvg-wadat.
ENDIF.

* Read the salesorder date and PO num
READ TABLE lt_vbak INTO DATA(lwa_vbak) WITH KEY vbeln = lwa_vepvg-
IF sy-subrc EQ 0.
<lfs_so_list>-ord_date = lwa_vbak-audat.
<lfs_so_list>-po_num   = lwa_vbak-bstnk.
ENDIF.

* Populate the order quantity, material number and item num
<lfs_so_list>-ord_qty    = lwa_vbap-kwmeng.
<lfs_so_list>-material   = lwa_vbap-matnr.
<lfs_so_list>-item_num   = lwa_vbap-posnr.

* Read material description
READ TABLE lt_makt INTO DATA(lwa_makt) WITH KEY matnr = lwa_vbap-m
IF sy-subrc EQ 0.
<lfs_so_list>-description = lwa_makt-maktx.
ENDIF.

* Calculate the delivered quantity
READ TABLE lt_lips INTO DATA(lwa_lips_tmp) WITH KEY vgbel = lwa_vb
IF sy-subrc EQ 0.
lv_index = sy-tabix.
LOOP AT lt_lips INTO DATA(lwa_lips) FROM lv_index.
IF lwa_lips_tmp-vgbel NE lwa_lips-vgbel OR lwa_lips_tmp-vgpos
EXIT.
ENDIF.

<lfs_so_list>-dlv_qty  = <lfs_so_list>-dlv_qty + lwa_lips-lfim
CLEAR lwa_lips.
ENDLOOP.
ENDIF.

* Calculate the Open quantity
<lfs_so_list>-open_qty = <lfs_so_list>-ord_qty - <lfs_so_list>-dlv

CLEAR: lwa_vepvg, lwa_vbap, lwa_vbak, lwa_lips, lwa_lips_tmp, lwa_
ENDLOOP.

ENDMETHOD.
DEALERWISE_SALE_LIST
item
METHOD dealerwise_sale_list.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 25-April-2018
* Description : Get Dealer Wise Sale List
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

*Types Declarations
TYPES : BEGIN OF lty_vbrk,
vbeln TYPE vbrk-vbeln,
fkart TYPE vbrk-fkart,
vkorg TYPE vbrk-vkorg,
vtweg TYPE vbrk-vtweg,
fkdat TYPE vbrk-fkdat,
netwr TYPE vbrk-netwr,
kunrg TYPE vbrk-kunrg,
kunag TYPE vbrk-kunag,
END OF lty_vbrk.


TYPES : BEGIN OF lty_vbrp,
vbeln TYPE vbrp-vbeln,
posnr TYPE vbrp-posnr,
fkimg TYPE vbrp-fkimg,
vrkme TYPE vbrp-vrkme,
meins TYPE vbrp-meins,
netwr TYPE vbrp-netwr,
mwsbp TYPE vbrp-mwsbp,
werks TYPE vbrp-werks,
aubel TYPE vbrp-aubel,
aupos TYPE vbrp-aupos,
mvgr2 TYPE vbrp-mvgr2,
END OF lty_vbrp.

TYPES : BEGIN OF lty_kna1,
kunnr TYPE kna1-kunnr,
land1 TYPE kna1-land1,
name1 TYPE kna1-name1,
name2 TYPE kna1-name2,
ort01 TYPE kna1-ort01,
pstlz TYPE kna1-pstlz,
regio TYPE kna1-regio,
xcpdk TYPE kna1-xcpdk,
adrnr TYPE kna1-adrnr,
END OF lty_kna1.

TYPES : BEGIN OF lty_vbpa,
vbeln TYPE vbpa-vbeln,
posnr TYPE vbpa-posnr,
kunnr TYPE vbpa-kunnr,
parvw TYPE vbpa-parvw,
adrnr TYPE vbpa-adrnr,
END OF lty_vbpa.

TYPES : BEGIN OF lty_adrc,
addrnumber TYPE adrc-addrnumber,
name1      TYPE adrc-name1,
name2      TYPE adrc-name2,
city1      TYPE adrc-city1,
post_code1 TYPE adrc-post_code1,
country    TYPE adrc-country,
region     TYPE adrc-region,
str_suppl1 TYPE adrc-str_suppl1,
str_suppl2 TYPE adrc-str_suppl2,
END OF lty_adrc.

TYPES : BEGIN OF lty_t005u,
spras TYPE t005u-spras,
land1 TYPE t005u-land1,
bland TYPE t005u-bland,
bezei TYPE t005u-bezei,
END OF lty_t005u.

TYPES : BEGIN OF lty_sales_group,
vbeln         TYPE yss_t_sditem_sg-vbeln,
posnr         TYPE yss_t_sditem_sg-posnr,
zzsales_group TYPE yss_t_sditem_sg-zzsales_group,
END OF lty_sales_group.

TYPES : BEGIN OF lty_list,
sold_to_party TYPE yss_s_dealerwise_sales-sold_to_party,
sold_to_name  TYPE yss_s_dealerwise_sales-sold_to_name,
ship_to_party TYPE yss_s_dealerwise_sales-ship_to_party,
ship_to_name  TYPE yss_s_dealerwise_sales-ship_to_name,
city          TYPE yss_s_dealerwise_sales-city,
state         TYPE yss_s_dealerwise_sales-state,
mdd           TYPE yss_s_dealerwise_sales-mdd,
pcd           TYPE yss_s_dealerwise_sales-pcd,
kad           TYPE yss_s_dealerwise_sales-kad,
END OF lty_list.


TYPES : BEGIN OF lty_temp,
vbeln         TYPE vbeln,
sold_to_party TYPE kunnr,
ship_to_party TYPE kunnr,
sold_to_name  TYPE name1,
ship_to_name  TYPE name1,
city          TYPE ad_city1,
state         TYPE bezei20,
END OF lty_temp.

DATA : lt_temp     TYPE TABLE OF lty_temp,
ls_temp     TYPE lty_temp,
lt_temp_new TYPE TABLE OF lty_temp,
ls_temp_new TYPE lty_temp.

TYPES : BEGIN OF lty_group,
zzsales_group TYPE vkgrp,
vbeln         TYPE vbeln,
sold_to_party TYPE kunnr,
ship_to_party TYPE kunnr,
sold_to_name  TYPE name1,
ship_to_name  TYPE name1,
city          TYPE ad_city1,
state         TYPE bezei20,
END OF lty_group.

DATA : lt_group     TYPE TABLE OF lty_group,
ls_group     TYPE lty_group,
lt_group_new TYPE TABLE OF lty_group,
ls_group_new TYPE lty_group.

*Data Declarations
DATA : lt_vbrk             TYPE TABLE OF lty_vbrk,
ls_vbrk             TYPE lty_vbrk,
lt_vbrp             TYPE TABLE OF lty_vbrp,
ls_vbrp             TYPE lty_vbrp,
lt_vbpa             TYPE TABLE OF lty_vbpa,
ls_vbpa             TYPE lty_vbpa,
lt_vbpa_temp        TYPE TABLE OF lty_vbpa,
ls_vbpa_temp        TYPE lty_vbpa,
lt_kna1             TYPE TABLE OF lty_kna1,
ls_kna1             TYPE lty_kna1,
lt_adrc             TYPE TABLE OF lty_adrc,
ls_adrc             TYPE lty_adrc,
lt_t005u            TYPE TABLE OF lty_t005u,
ls_t005u            TYPE lty_t005u,
lt_list             TYPE yss_tt_dealerwise_sales,
ls_list             TYPE yss_s_dealerwise_sales,
lt_list_temp        TYPE yss_tt_dealerwise_sales,
ls_list_temp        TYPE yss_s_dealerwise_sales,
lv_mdd              TYPE vbrp-netwr,
lv_pcd              TYPE vbrp-netwr,
lv_kad              TYPE vbrp-netwr,
lt_sales_group      TYPE TABLE OF lty_sales_group,
ls_sales_group      TYPE lty_sales_group,
lt_sales_group_temp TYPE TABLE OF lty_sales_group,
ls_sales_group_temp TYPE lty_sales_group,
lv_index            TYPE i,
lv_index1           TYPE i,
ls_lists            TYPE yss_s_dealerwise_sales.

*Billing Document: Header Data
SELECT vbeln
fkart
vkorg
vtweg
fkdat
netwr
kunrg
kunag
FROM vbrk
INTO TABLE lt_vbrk
WHERE vtweg IN im_vtweg
AND   fkdat IN im_fkdat
AND   kunag IN im_kunag
AND   bupla IN im_werks
AND   fkart NOT IN ('S1','S2')
AND   rfbsk NE 'E'
AND   fksto NE 'X'.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.
SORT lt_vbrk BY vbeln.

* Sold to Party & Ship to Party Address No's
SELECT vbeln
posnr
kunnr
parvw
adrnr
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln
AND   parvw IN (yss_cl_type_pool=>yss_c_ag,yss_cl_type_pool=>
IF sy-subrc = 0.
SORT lt_vbpa BY vbeln kunnr parvw.
* Address
SELECT addrnumber
name1
name2
city1
post_code1
country
region
FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber = lt_vbpa-adrnr.
IF sy-subrc = 0.
SORT lt_adrc BY addrnumber.
*State
SELECT spras
land1
bland
bezei
FROM t005u
INTO TABLE lt_t005u
FOR ALL ENTRIES IN lt_adrc
WHERE spras = 'EN'
AND   land1 = 'IN'
AND   bland = lt_adrc-region.
IF sy-subrc = 0.
SORT lt_t005u BY bland.
ENDIF.
ENDIF.
*Billing Document: Item Data
SELECT vbeln
posnr
fkimg
vrkme
meins
netwr
mwsbp
werks
aubel
aupos
mvgr2
FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbpa
WHERE vbeln = lt_vbpa-vbeln
AND   werks IN im_werks
AND   mvgr2 IN (yss_cl_type_pool=>yss_c_mdd,yss_cl_type_poo
IF sy-subrc = 0.
SORT lt_vbrp BY vbeln posnr aubel aupos mvgr2.

IF im_vkgrp IS NOT INITIAL.
SELECT vbeln
posnr
zzsales_group
FROM yss_t_sditem_sg
INTO TABLE lt_sales_group
FOR ALL ENTRIES IN lt_vbrp
WHERE vbeln = lt_vbrp-aubel
AND   posnr = lt_vbrp-aupos
AND   zzsales_group IN im_vkgrp.
IF sy-subrc NE 0.
" Do Nothing
ENDIF.
SORT lt_sales_group BY zzsales_group.
ENDIF.
ENDIF.
ENDIF.

IF im_vkgrp IS NOT INITIAL.

LOOP AT lt_sales_group INTO ls_sales_group.

READ TABLE lt_vbrp INTO ls_vbrp WITH KEY aubel = ls_sales_group-
aupos = ls_sales_group-
IF sy-subrc = 0.
ls_group-zzsales_group = ls_sales_group-zzsales_group.
ls_group-vbeln         = ls_vbrp-vbeln.

READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrp-vbeln
parvw = yss_cl_type_p
ls_group-sold_to_party = ls_vbpa-kunnr.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-
IF sy-subrc = 0.
*Sold to Party Name
ls_group-sold_to_name = ls_adrc-name1.
ENDIF.
ENDIF.

*Ship to Party
READ TABLE lt_vbpa INTO ls_vbpa WITH KEY vbeln = ls_vbrp-vbeln
parvw = yss_c
IF sy-subrc = 0.
ls_group-ship_to_party = ls_vbpa-kunnr.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa-
IF sy-subrc = 0.
*Ship to Name
ls_group-ship_to_name = ls_adrc-name1.
*City
ls_group-city = ls_adrc-city1.
*State
READ TABLE lt_t005u INTO ls_t005u WITH KEY bland = ls_adrc-r
IF sy-subrc = 0.
ls_group-state = ls_t005u-bezei.
ENDIF.
ENDIF.
ENDIF.
APPEND ls_group TO lt_group.
CLEAR : ls_group,ls_vbrp,ls_vbpa,ls_adrc,ls_t005u,ls_sales_group
ENDLOOP.

SORT lt_group BY vbeln sold_to_party ship_to_party.
DELETE ADJACENT DUPLICATES FROM lt_group COMPARING vbeln sold_to_p

SORT lt_group BY sold_to_party ship_to_party.
lt_group_new = lt_group.
DELETE ADJACENT DUPLICATES FROM lt_group COMPARING sold_to_party s

LOOP AT lt_group INTO ls_group.
ls_lists-sold_to_party = ls_group-sold_to_party.
ls_lists-ship_to_party = ls_group-ship_to_party.
ls_lists-sold_to_name  = ls_group-sold_to_name.
ls_lists-ship_to_name  = ls_group-ship_to_name.
ls_lists-city          = ls_group-city.
ls_lists-state         = ls_group-state.

LOOP AT lt_group_new INTO ls_group_new WHERE sold_to_party = ls_
AND   ship_to_party = ls_
LOOP AT lt_vbrp INTO ls_vbrp WHERE vbeln = ls_group_new-vbeln.
CASE ls_vbrp-mvgr2.
WHEN yss_cl_type_pool=>yss_c_mdd.
lv_mdd = lv_mdd + ls_vbrp-netwr.
WHEN yss_cl_type_pool=>yss_c_pcd.
lv_pcd = lv_pcd + ls_vbrp-netwr.
WHEN yss_cl_type_pool=>yss_c_kad.
lv_kad = lv_kad + ls_vbrp-netwr.
ENDCASE.
CLEAR : ls_vbrp.
ENDLOOP.
CLEAR : ls_group_new.
ENDLOOP.
*MDD
ls_lists-mdd = lv_mdd.
*PCD
ls_lists-pcd = lv_pcd.
*KAD
ls_lists-kad = lv_kad.
APPEND ls_lists TO ex_dealerwise_list.
CLEAR : ls_lists,lv_mdd,lv_pcd,lv_kad,ls_group.
ENDLOOP.

ELSEIF im_vkgrp IS INITIAL.

lt_vbpa_temp = lt_vbpa.

LOOP AT lt_vbpa INTO ls_vbpa.

*Sold to Party
READ TABLE lt_vbpa_temp INTO ls_vbpa_temp WITH KEY vbeln = ls_vb
parvw = yss_c
IF sy-subrc = 0.
ls_temp-vbeln = ls_vbpa-vbeln.
ls_temp-sold_to_party = ls_vbpa_temp-kunnr.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa_
IF sy-subrc = 0.
*Sold to Party Name
ls_temp-sold_to_name = ls_adrc-name1.
ENDIF.
ENDIF.

*Ship to Party
READ TABLE lt_vbpa_temp INTO ls_vbpa_temp WITH KEY vbeln = ls_vb
parvw = yss_c
IF sy-subrc = 0.
ls_temp-ship_to_party = ls_vbpa_temp-kunnr.
READ TABLE lt_adrc INTO ls_adrc WITH KEY addrnumber = ls_vbpa_
IF sy-subrc = 0.
*Ship to Name
ls_temp-ship_to_name = ls_adrc-name1.
*City
ls_temp-city = ls_adrc-city1.
*State
READ TABLE lt_t005u INTO ls_t005u WITH KEY bland = ls_adrc-r
IF sy-subrc = 0.
ls_temp-state = ls_t005u-bezei.
ENDIF.
ENDIF.
ENDIF.
APPEND ls_temp TO lt_temp.
CLEAR : ls_vbpa_temp,ls_vbpa,ls_temp,ls_adrc,ls_t005u.
ENDLOOP.

SORT lt_temp BY vbeln sold_to_party ship_to_party.
DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING vbeln sold_to_pa

SORT lt_temp BY sold_to_party ship_to_party.
lt_temp_new = lt_temp.
DELETE ADJACENT DUPLICATES FROM lt_temp COMPARING sold_to_party sh

LOOP AT lt_temp INTO ls_temp.
ls_lists-sold_to_party = ls_temp-sold_to_party.
ls_lists-ship_to_party = ls_temp-ship_to_party.
ls_lists-sold_to_name  = ls_temp-sold_to_name.
ls_lists-ship_to_name  = ls_temp-ship_to_name.
ls_lists-city          = ls_temp-city.
ls_lists-state         = ls_temp-state.

LOOP AT lt_temp_new INTO ls_temp_new WHERE sold_to_party = ls_te
AND   ship_to_party = ls_te
LOOP AT lt_vbrp INTO ls_vbrp WHERE vbeln = ls_temp_new-vbeln.
CASE ls_vbrp-mvgr2.
WHEN yss_cl_type_pool=>yss_c_mdd.
lv_mdd = lv_mdd + ls_vbrp-netwr.
WHEN yss_cl_type_pool=>yss_c_pcd.
lv_pcd = lv_pcd + ls_vbrp-netwr.
WHEN yss_cl_type_pool=>yss_c_kad.
lv_kad = lv_kad + ls_vbrp-netwr.
ENDCASE.
CLEAR : ls_vbrp.
ENDLOOP.
CLEAR : ls_temp_new.
ENDLOOP.
*MDD
ls_lists-mdd = lv_mdd.
*PCD
ls_lists-pcd = lv_pcd.
*KAD
ls_lists-kad = lv_kad.
APPEND ls_lists TO ex_dealerwise_list.
CLEAR : ls_lists,lv_mdd,lv_pcd,lv_kad,ls_temp.
ENDLOOP.
ENDIF.
ENDMETHOD.
GET_OTC_ADDRESS_DETAILS
item
METHOD get_otc_address_details.
TYPES: BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
name_co    TYPE ad_name_co,
city1      TYPE ad_city1,
city2      TYPE ad_city2,
home_city  TYPE ad_city3,
post_code1 TYPE ad_pstcd1,
street     TYPE ad_street,
house_num1 TYPE ad_hsnm1,
country    TYPE land1,
region     TYPE regio,
tel_number TYPE ad_tlnmbr1,
END OF lty_adrc.
DATA : lv_adrnr TYPE adrnr,
ls_adrc  TYPE lty_adrc.

* Get the address number based on the Sales and Distribution Document Nu
SELECT SINGLE kunnr adrnr xcpdk FROM vbpa INTO (ex_address-cust_id,
WHERE vbeln EQ im_vbeln
AND parvw EQ 'WE'.
IF sy-subrc NE 0 OR lv_adrnr IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>otc_address_not_found
msgv1  = ycx_ss_exception=>format( im_vbeln ).
ENDIF.

* If customer is not OTC then return
IF ex_otc_flag IS INITIAL.
RETURN.
ENDIF.

SELECT SINGLE addrnumber name1 name_co city1 city2 home_city post_co
FROM adrc INTO ls_adrc
WHERE addrnumber EQ lv_adrnr.
IF sy-subrc EQ 0.
* Get the email id from ADR6
SELECT SINGLE smtp_addr FROM adr6 INTO ex_address-email
WHERE addrnumber EQ lv_adrnr.
IF sy-subrc EQ 0.
* Do nothing
ENDIF.

*    Get the State name based on the REGION(E.g. 36 - Telangana)
SELECT SINGLE bezei INTO ex_address-state FROM t005u
WHERE spras EQ sy-langu
AND land1 EQ 'IN'
AND bland EQ ls_adrc-region.
IF sy-subrc EQ 0.
* Do nothing
ENDIF.
ex_address-cust_name = ls_adrc-name1.
ex_address-city      = ls_adrc-city1.
ex_address-post_code = ls_adrc-post_code1.
ex_address-region    = ls_adrc-region.
ex_address-street    = ls_adrc-street.
ex_address-house_num = ls_adrc-house_num1.
ex_address-telefone  = ls_adrc-tel_number.
ex_address-country   = ls_adrc-country.
ex_address-dl_num    = ls_adrc-city2.     " Drug License number
ex_address-gstin_num = ls_adrc-home_city. " GSTIN number
ex_address-pan_num   = ls_adrc-name_co.   " PAN number
ENDIF.
ENDMETHOD.
DELV_BACK_DATED_BDC
item
METHOD delv_back_dated_bdc.
DATA: lt_bdcdata   TYPE STANDARD TABLE OF bdcdata,
lt_errmsgs   TYPE STANDARD TABLE OF bdcmsgcoll,
lo_exception TYPE REF TO ycx_ss_exception,
lwa_return   TYPE bapiret2,
lv_errmsg    TYPE bapi_msg,
lv_fval      TYPE bdc_fval,
lv_bldat     TYPE bdc_fval,
lv_wadti     TYPE bdc_fval,
lv_btgew     TYPE bdc_fval,
lv_num(2)    TYPE n,
lv_mbdat     TYPE char20 VALUE 'LIPS-MBDAT(&)'.

CALL METHOD bdc_dynpro EXPORTING im_program = 'SAPMV50A' im_dynpro =

CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_CURSOR' im_fval = 'LI

CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_OKCODE' im_fval = '/0

lv_fval = im_delivery.
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-VBELN' im_fval = lv_

READ TABLE ch_delivery_tables-likp INTO DATA(ls_likp) INDEX 1. " WIT
IF sy-subrc EQ 0 .
WRITE ls_likp-bldat     TO lv_bldat.      "Document date
lv_btgew = ls_likp-btgew. SHIFT lv_btgew LEFT DELETING LEADING spa
ENDIF.

LOOP AT ch_delivery_tables-lips INTO DATA(ls_lips).
IF lv_num EQ 00.
CALL METHOD bdc_dynpro EXPORTING im_program = 'SAPMV50A' im_dynp

CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_OKCODE' im_fval =

CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-BLDAT' im_fval =

CALL METHOD bdc_field EXPORTING im_fnam = 'BDC_CURSOR' im_fval =

CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-BTGEW' im_fval =

IF ls_likp-wadat_ist IS NOT INITIAL.
WRITE ls_likp-wadat_ist TO lv_wadti.      "Actual PGI date
CALL METHOD bdc_field EXPORTING im_fnam = 'LIKP-WADAT_IST' im_
ENDIF.
ENDIF.

* Update the Item date MBDAT
lv_num = lv_num + 1. CLEAR lv_fval.
lv_fval = lv_mbdat.
REPLACE ALL OCCURRENCES OF '&' IN lv_fval WITH lv_num.
SHIFT lv_fval LEFT DELETING LEADING space.
CALL METHOD bdc_field EXPORTING im_fnam = lv_fval im_fval = lv_bld
IF lv_num EQ 07.
CLEAR lv_num.
ENDIF.
ENDLOOP.

CALL TRANSACTION 'VL02N' USING lt_bdcdata UPDATE 'S' MODE 'N' MESSAG
LOOP AT lt_errmsgs INTO DATA(ls_errmsgs).
CALL FUNCTION 'FORMAT_MESSAGE'
EXPORTING
id        = ls_errmsgs-msgid
lang      = sy-langu
no        = ls_errmsgs-msgnr
v1        = ls_errmsgs-msgv1
v2        = ls_errmsgs-msgv2
v3        = ls_errmsgs-msgv3
v4        = ls_errmsgs-msgv4
IMPORTING
msg       = lv_errmsg
EXCEPTIONS
not_found = 1
OTHERS    = 2.
lwa_return-type    = ls_errmsgs-msgtyp.
lwa_return-id      = ls_errmsgs-msgid.
lwa_return-number  = ls_errmsgs-msgnr.
lwa_return-message = lv_errmsg.
APPEND lwa_return TO ex_return.
ENDLOOP.

ENDMETHOD.
PRODUCTWISE_HQWISE_SALES
item
METHOD productwise_hqwise_sales.
***********************************************************************
* Administration:                                                     *
*---------------------------------------------------------------------*
* Created by  : Incresol Software Services Pvt. Ltd.
* Created on  : 08-May-2018
* Description : Get Product wise HQ wise Sales List
***********************************************************************
* Change History:                                                     *
* --------------------------------------------------------------------*
* Date       | Change ID     |  Short Description                     *
* --------------------------------------------------------------------*
* DD-MM-YYYY | USERID.DDMMYY |                                        *
* --------------------------------------------------------------------*

***Types declarations
***DATA DECLARATION
**    TYPES : BEGIN OF lty_vbrk,
**              vbeln TYPE vbrk-vbeln,
**              fkart TYPE vbrk-fkart,
**              fktyp TYPE vbrk-fktyp,
**              vtweg TYPE vbrk-vtweg,
**              kalsm TYPE vbrk-kalsm,
**              belnr TYPE vbrk-belnr,
**              gjahr TYPE vbrk-gjahr,
**              zterm TYPE vbrk-zterm,
**              bukrs TYPE vbrk-bukrs,
**              netwr TYPE vbrk-netwr,
**              erdat TYPE vbrk-erdat,
**              kunrg TYPE vbrk-kunrg,
**              kunag TYPE vbrk-kunag,
**            END OF lty_vbrk.
**
**    TYPES : BEGIN OF lty_vbrp,
**              vbeln   TYPE vbrp-vbeln,
**              posnr   TYPE vbrp-posnr,
**              fkimg   TYPE i,
**              vrkme   TYPE vbrp-vrkme,
**              meins   TYPE vbrp-meins,
**              gewei   TYPE vbrp-gewei,
**              kursk   TYPE vbrp-kursk,
**              netwr   TYPE vbrp-netwr,
**              vbelv   TYPE vbrp-vbelv,
**              posnv   TYPE vbrp-posnv,
**              vgbel   TYPE vbrp-vgbel,
**              vgpos   TYPE vbrp-vgpos,
**              vgtyp   TYPE vbrp-vgtyp,
**              aubel   TYPE vbrp-aubel,
**              aupos   TYPE vbrp-aupos,
**              matnr   TYPE vbrp-matnr,
**              arktx   TYPE vbrp-arktx,
**              charg   TYPE vbrp-charg,
**              matkl   TYPE vbrp-matkl,
**              pstyv   TYPE vbrp-pstyv,
**              werks   TYPE vbrp-werks,
**              aland   TYPE vbrp-aland,
**              wkreg   TYPE vbrp-wkreg,
**              wkcou   TYPE vbrp-wkcou,
**              vkgrp   TYPE vbrp-vkgrp,
**              vkbur   TYPE vbrp-vkbur,
**              erdat   TYPE vbrp-erdat,
**              lgort   TYPE vbrp-lgort,
**              mvgr1   TYPE vbrp-mvgr1,
**              catcode TYPE zdemandplan-catcode,
**            END OF lty_vbrp.
**
**    TYPES : BEGIN OF lty_lips,
**              vbeln TYPE lips-vbeln,
**              posnr TYPE lips-posnr,
**              charg TYPE lips-charg,
**              bwart TYPE lips-bwart,
**            END OF lty_lips.
**
**    TYPES : BEGIN OF lty_final,
**              vbeln     TYPE vbrk-vbeln,
**              fkart     TYPE vbrk-fkart,
**              fktyp     TYPE vbrk-fktyp,
**              vkorg     TYPE vbrk-vkorg,
**              vtweg     TYPE vbrk-vtweg,
**              kalsm     TYPE vbrk-kalsm,
**              belnr     TYPE vbrk-belnr,
**              gjahr     TYPE vbrk-gjahr,
**              zterm     TYPE vbrk-zterm,
**              bukrs     TYPE vbrk-bukrs,
**              erdat     TYPE vbrk-erdat,
**              kunrg     TYPE vbrk-kunrg,
**              kunag     TYPE vbrk-kunag,
**              p_vbeln   TYPE vbrp-vbeln,
**              posnr     TYPE vbrp-posnr,
**              fkimg     TYPE i,
**              vrkme     TYPE vbrp-vrkme,
**              netwr     TYPE vbrp-netwr,
**              vgbel     TYPE vbrp-vgbel,
**              vgpos     TYPE vbrp-vgpos,
**              matnr     TYPE vbrp-matnr,
**              arktx     TYPE vbrp-arktx,
**              charg     TYPE vbrp-charg,
**              matkl     TYPE vbrp-matkl,
**              werks     TYPE vbrp-werks,
**              vkgrp     TYPE vbrp-vkgrp,
**              vkbur     TYPE vbrp-vkbur,
**              lgort     TYPE vbrp-lgort,
**              l_vbeln   TYPE lips-vbeln,
**              l_posnr   TYPE lips-posnr,
**              l_charg   TYPE lips-charg,
**              l_bwart   TYPE lips-bwart,
**              mvgr1     TYPE vbrp-mvgr1,
**              catcode   TYPE zdemandplan-catcode,
**              knumh     TYPE konp-knumh,
**              kbetr     TYPE konp-kbetr,
**              avg_fkimg TYPE i,
**              avg_netwr TYPE vbrp-netwr,
**              bezei     TYPE tvm1t-bezei,
**            END OF lty_final.
**
***Data declarations
**    DATA : lt_vbrk  TYPE TABLE OF lty_vbrk,
**           ls_vbrk  TYPE lty_vbrk,
**           lt_vbrp  TYPE TABLE OF lty_vbrp,
**           ls_vbrp  TYPE lty_vbrp,
**           lt_lips  TYPE lty_lips,
**           ls_lips  TYPE lty_lips,
**           ls_final TYPE lty_final,
**           lt_final TYPE TABLE OF lty_final.
**
***Billing Header data
**    SELECT  vbeln
**            fkart
**            fktyp
**            vtweg
**            kalsm
**            belnr
**            gjahr
**            zterm
**            bukrs
**            netwr
**            erdat
**            kunrg
**            kunag
**            FROM vbrk
**            INTO TABLE lt_vbrk
**            WHERE fkart NOT IN ('ZFSD','YFSD','S1','S2')
**            AND   rfbsk NE 'E'
**            AND   fkdat IN im_fkdat
**            AND   bupla IN im_werks
**            AND   fksto NE 'X'.
**    IF sy-subrc NE 0.
**      RAISE EXCEPTION TYPE ycx_ss_exception
**        EXPORTING
**          textid = ycx_ss_exception=>not_found.
**    ENDIF.
**    SORT lt_vbrk BY vbeln.
**
***Billing Item data
**    SELECT vbeln
**           posnr
**           fkimg
**           vrkme
**           meins
**           gewei
**           kursk
**           netwr
**           vbelv
**           posnv
**           vgbel
**           vgpos
**           vgtyp
**           aubel
**           aupos
**           matnr
**           arktx
**           charg
**           matkl
**           pstyv
**           werks
**           aland
**           wkreg
**           wkcou
**           vkgrp
**           vkbur
**           erdat
**           lgort
**           mvgr1
**           FROM vbrp
**           INTO TABLE lt_vbrp
**           FOR ALL ENTRIES IN lt_vbrk
**           WHERE vbeln = lt_vbrk-vbeln
**           AND matnr IN im_matnr
**           AND werks IN im_werks
**           AND vkgrp IN im_vkgrp.
**    IF sy-subrc = 0.
**      SORT lt_vbrp BY vbeln posnr.
**    ENDIF.
**
**    LOOP AT lt_vbrp INTO ls_vbrp.
**      ls_final-p_vbeln  = ls_vbrp-vbeln.
**      ls_final-posnr    = ls_vbrp-posnr.
**      ls_final-fkimg    = ls_vbrp-fkimg.
**      ls_final-vrkme    = ls_vbrp-vrkme.
**      ls_final-netwr    = ls_vbrp-netwr.
**      ls_final-vgbel    = ls_vbrp-vgbel.
**      ls_final-vgpos    = ls_vbrp-vgpos.
**      ls_final-matnr    = ls_vbrp-matnr.
**      ls_final-arktx    = ls_vbrp-arktx.
**      ls_final-charg    = ls_vbrp-charg.
**      ls_final-matkl    = ls_vbrp-matkl.
**      ls_final-werks    = ls_vbrp-werks.
**      ls_final-vkgrp    = ls_vbrp-vkgrp.
**      ls_final-vkbur    = ls_vbrp-vkbur.
**      ls_final-lgort    = ls_vbrp-lgort.
**      ls_final-mvgr1    = ls_vbrp-mvgr1.
***      ls_final-catcode = ls_vbrp-catcode.
**
**      READ TABLE lt_vbrk INTO ls_vbrk WITH KEY  vbeln = ls_vbrp-vbeln.
**      IF sy-subrc = 0.
**        ls_final-vbeln = ls_vbrk-vbeln.
**        ls_final-fkart = ls_vbrk-fkart.
**        ls_final-fktyp = ls_vbrk-fktyp.
**        ls_final-vtweg = ls_vbrk-vtweg.
**        ls_final-kalsm = ls_vbrk-kalsm.
**        ls_final-belnr = ls_vbrk-belnr.
**        ls_final-gjahr = ls_vbrk-gjahr.
**        ls_final-zterm = ls_vbrk-zterm.
**        ls_final-bukrs = ls_vbrk-bukrs.
**        ls_final-erdat = ls_vbrk-erdat.
**        ls_final-kunrg = ls_vbrk-kunrg.
**        ls_final-kunag = ls_vbrk-kunag.
**      ENDIF.
**
**
**      APPEND ls_final TO lt_final.
**      CLEAR : ls_vbrp,ls_final,ls_vbrk.
**    ENDLOOP.



ENDMETHOD.
GET_HSN_SUMMARY
item
METHOD get_hsn_summary.
TYPES: BEGIN OF lty_vbrk,
vbeln TYPE vbeln_vf,
vbtyp TYPE vbtyp,
vkorg TYPE vkorg,
knumv TYPE knumv,
fkdat TYPE fkdat,
netwr TYPE netwr,
END OF lty_vbrk,

BEGIN OF lty_vbrp,
vbeln TYPE vbeln_vf,
posnr TYPE posnr_vf,
fkimg TYPE fkimg,
vrkme TYPE vrkme,
netwr TYPE netwr,
matnr TYPE matnr,
werks TYPE werks_d,
END OF lty_vbrp,

BEGIN OF lty_marc,
matnr TYPE matnr,
werks TYPE werks_d,
steuc TYPE steuc,
END OF lty_marc,

BEGIN OF lty_konv,
knumv TYPE	knumv,
kposn TYPE kposn,
stunr TYPE stunr,
zaehk TYPE dzaehk,
kappl TYPE kappl,
kschl TYPE kscha,
kawrt TYPE kawrt,
kbetr TYPE kbetr,
kwert TYPE kwert,
koaid TYPE koaid,
END OF lty_konv,

lty_r_fkdat TYPE RANGE OF fkdat.


DATA : lt_vbrk     TYPE STANDARD TABLE OF lty_vbrk,
lt_vbrp     TYPE STANDARD TABLE OF lty_vbrp,
lt_marc     TYPE STANDARD TABLE OF lty_marc,
lt_marc_tmp TYPE STANDARD TABLE OF lty_marc,
lt_konv     TYPE STANDARD TABLE OF lty_konv,
lt_makt     TYPE STANDARD TABLE OF makt,
lr_fkdat    TYPE lty_r_fkdat,
ls_fkdat    TYPE LINE OF lty_r_fkdat,
lv_tabix1   TYPE i,
lv_tabix2   TYPE i,
lv_tabix3   TYPE i.


*    ls_fkdat-sign   = yss_cl_type_pool=>yss_c_i.
*    ls_fkdat-option = yss_cl_type_pool=>yss_c_opt_bt.
*    ls_fkdat-low    = sy-datum - 30.
*    ls_fkdat-high   = sy-datum.
*    APPEND ls_fkdat TO lr_fkdat.

* Fetch billing header details (last 30 days)
SELECT vbeln vbtyp vkorg knumv fkdat netwr FROM vbrk
INTO TABLE lt_vbrk
WHERE fkdat IN im_date_range "lr_fkdat
AND vbtyp IN ('M','O','P')   "Invoice(M), Credit memo(O) and Deb
AND bukrs EQ 'RMSS'
AND fkart IN ('ZFKS', 'ZRKS')
AND fksto EQ space
AND bupla EQ im_req_params-bupla.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_hsn_summary_details_found.
ENDIF.
SORT lt_vbrk BY vbeln.

*   Fetch the billing item details
SELECT vbeln posnr fkimg vrkme netwr matnr werks FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln EQ lt_vbrk-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbrp BY matnr vrkme.
*   Fetch the HSN code
SELECT matnr werks steuc FROM marc
INTO TABLE lt_marc
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr EQ lt_vbrp-matnr
AND werks EQ lt_vbrp-werks.
IF sy-subrc EQ 0.
*       Fetch the material descriptions for all the materials
SELECT * FROM makt INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_marc
WHERE matnr EQ lt_marc-matnr
AND spras EQ sy-langu.
IF sy-subrc EQ 0.

ENDIF.
ENDIF.
ENDIF.
* Fetch the conditon records( IGST, SGST, CGST)
SELECT knumv kposn stunr zaehk kappl kschl kawrt kbetr kwert koaid
FROM konv INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv EQ lt_vbrk-knumv
AND koaid EQ yss_cl_type_pool=>yss_c_d. "Taxes
IF sy-subrc EQ 0.
SORT lt_konv BY knumv kposn.
ENDIF.

lt_marc_tmp = lt_marc.
SORT lt_marc_tmp BY steuc.
SORT lt_marc BY steuc.
DELETE ADJACENT DUPLICATES FROM lt_marc_tmp COMPARING steuc.

LOOP AT lt_marc_tmp INTO DATA(lwa_marc_tmp).

READ TABLE lt_marc WITH KEY steuc = lwa_marc_tmp-steuc TRANSPORTIN
IF sy-subrc NE 0.
CONTINUE.
ENDIF.
lv_tabix3 = sy-tabix.

* Add HSN Header entry
APPEND INITIAL LINE TO ex_hsn_summary ASSIGNING FIELD-SYMBOL(<lfs_
APPEND INITIAL LINE TO ex_hsn_summary ASSIGNING FIELD-SYMBOL(<lfs_
<lfs_hsn_header_2>-hsn_code = <lfs_hsn_header>-hsn_code = lwa_marc
IF lwa_marc_tmp-steuc(2) EQ '99'.
<lfs_hsn_header_2>-item_type = <lfs_hsn_header>-item_type = 'Ser
ELSE.
<lfs_hsn_header_2>-item_type = <lfs_hsn_header>-item_type = 'Goo
ENDIF.

LOOP AT lt_marc INTO DATA(lwa_marc) FROM lv_tabix3.
IF lwa_marc_tmp-steuc NE lwa_marc-steuc.
EXIT.
ENDIF.

*  Add HSN summary details for each material
APPEND INITIAL LINE TO <lfs_hsn_header>-materials   ASSIGNING FI
APPEND INITIAL LINE TO <lfs_hsn_header_2>-materials ASSIGNING FI
<lfs_hsn_summary_2>-material = <lfs_hsn_summary>-material = lwa_

* Read material description
READ TABLE lt_makt INTO DATA(lwa_makt) WITH KEY matnr = lwa_marc
IF sy-subrc EQ 0.
<lfs_hsn_summary_2>-mat_desc = <lfs_hsn_summary>-mat_desc = lw
ENDIF.

* Read material number
READ TABLE lt_vbrp WITH KEY matnr = lwa_marc-matnr TRANSPORTING
IF sy-subrc NE 0.
CONTINUE.
ENDIF.
lv_tabix1 = sy-tabix.

* Loop for each billing document based on the material number
LOOP AT lt_vbrp INTO DATA(lwa_vbrp) FROM lv_tabix1.

IF lwa_vbrp-matnr NE lwa_marc-matnr.
EXIT.
ENDIF.

***          <lfs_hsn_summary>-bill_doc = lwa_vbrp-vbeln.
* Header details
READ TABLE lt_vbrk INTO DATA(lwa_vbrk) WITH KEY vbeln = lwa_vb
IF sy-subrc EQ 0.
IF lwa_vbrk-vbtyp EQ 'O'.  "Credit memo
lwa_vbrp-netwr = lwa_vbrp-netwr * -1.
ENDIF.

CASE lwa_vbrp-vrkme.
WHEN 'BOX'.
* Calculate the summary totals
<lfs_hsn_summary_2>-net_amt   = <lfs_hsn_summary_2>-net_
<lfs_hsn_summary_2>-total_amt = <lfs_hsn_summary_2>-tota
<lfs_hsn_summary_2>-total_qty = <lfs_hsn_summary_2>-tota
<lfs_hsn_summary_2>-uom = 'BOX'.
* Calculate the header totals
<lfs_hsn_header_2>-total_amt  = <lfs_hsn_header_2>-total
<lfs_hsn_header_2>-net_amt    = <lfs_hsn_header_2>-net_a
<lfs_hsn_header_2>-total_qty  = <lfs_hsn_header_2>-total
<lfs_hsn_header_2>-uom = 'BOX'.

WHEN OTHERS.
* Calculate the summary totals
<lfs_hsn_summary>-net_amt   = <lfs_hsn_summary>-net_amt
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-total_am
<lfs_hsn_summary>-total_qty = <lfs_hsn_summary>-total_qt
<lfs_hsn_summary>-uom = 'PCS'.
* Calculate the header totals
<lfs_hsn_header>-total_amt  = <lfs_hsn_header>-total_amt
<lfs_hsn_header>-net_amt    = <lfs_hsn_header>-net_amt
<lfs_hsn_header>-total_qty  = <lfs_hsn_header>-total_qty
<lfs_hsn_header>-uom = 'PCS'.

*              WHEN OTHERS.
ENDCASE.

*        Condition tax details
READ TABLE lt_konv WITH KEY knumv = lwa_vbrk-knumv kposn = l
IF sy-subrc NE 0.
CONTINUE.
ENDIF.

lv_tabix2 = sy-tabix.

* Read the condition tax records to calculate the Overall totals and tax
LOOP AT lt_konv INTO DATA(lwa_konv) FROM lv_tabix2.
IF lwa_konv-knumv NE lwa_vbrk-knumv OR lwa_konv-kposn NE l
EXIT.
ENDIF.
IF lwa_vbrk-vbtyp EQ 'O'.  "Credit memo
lwa_konv-kwert = lwa_konv-kwert * -1.
ENDIF.

CASE lwa_vbrp-vrkme.
WHEN 'BOX'.
CASE lwa_konv-kschl.
WHEN 'JOIG'. "IGST
*                Item wise summary totals
<lfs_hsn_summary_2>-total_amt = <lfs_hsn_summary_2
<lfs_hsn_summary_2>-igst_amt  = <lfs_hsn_summary_2

*                 Header wise summary totals
<lfs_hsn_header_2>-total_amt = <lfs_hsn_header_2>-
<lfs_hsn_header_2>-igst_amt  = <lfs_hsn_header_2>-

WHEN 'JOCG'.  "CGST
*                 Item wise summary totals
<lfs_hsn_summary_2>-total_amt = <lfs_hsn_summary_2
<lfs_hsn_summary_2>-cgst_amt  = <lfs_hsn_summary_2

*                 Header wise summary totals
<lfs_hsn_header_2>-total_amt = <lfs_hsn_header_2>-
<lfs_hsn_header_2>-cgst_amt  = <lfs_hsn_header_2>-

WHEN 'JOSG'.  "SGST
*                 Item wise summary totals
<lfs_hsn_summary_2>-total_amt = <lfs_hsn_summary_2
<lfs_hsn_summary_2>-sgst_amt  = <lfs_hsn_summary_2

*                 Header wise summary totals
<lfs_hsn_header_2>-total_amt = <lfs_hsn_header_2>-
<lfs_hsn_header_2>-sgst_amt  = <lfs_hsn_header_2>-
WHEN OTHERS.
ENDCASE.
WHEN OTHERS.
CASE lwa_konv-kschl.
WHEN 'JOIG'. "IGST
*                Item wise summary totals
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-to
<lfs_hsn_summary>-igst_amt  = <lfs_hsn_summary>-ig

*                 Header wise summary totals
<lfs_hsn_header>-total_amt = <lfs_hsn_header>-tota
<lfs_hsn_header>-igst_amt  = <lfs_hsn_header>-igst

WHEN 'JOCG'.  "CGST
*                 Item wise summary totals
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-to
<lfs_hsn_summary>-cgst_amt  = <lfs_hsn_summary>-cg

*                 Header wise summary totals
<lfs_hsn_header>-total_amt = <lfs_hsn_header>-tota
<lfs_hsn_header>-cgst_amt  = <lfs_hsn_header>-cgst

WHEN 'JOSG'.  "SGST
*                 Item wise summary totals
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-to
<lfs_hsn_summary>-sgst_amt  = <lfs_hsn_summary>-sg

*                 Header wise summary totals
<lfs_hsn_header>-total_amt = <lfs_hsn_header>-tota
<lfs_hsn_header>-sgst_amt  = <lfs_hsn_header>-sgst
WHEN OTHERS.
ENDCASE.
*                WHEN OTHERS.
ENDCASE.

ENDLOOP.
ENDIF.
ENDLOOP.
ENDLOOP.
SORT <lfs_hsn_header>-materials BY material.
ENDLOOP.
SORT ex_hsn_summary BY hsn_code.
DELETE ex_hsn_summary WHERE uom EQ space.
ENDMETHOD.
GET_NIL_SUMMARY
item
METHOD get_nil_summary.
TYPES: BEGIN OF lty_vbrk,
vbeln TYPE vbeln_vf,
vbtyp TYPE vbtyp,
vkorg TYPE vkorg,
knumv TYPE knumv,
fkdat TYPE fkdat,
netwr TYPE netwr,
END OF lty_vbrk,

BEGIN OF lty_vbrp,
vbeln TYPE vbeln_vf,
posnr TYPE posnr_vf,
fkimg TYPE fkimg,
netwr TYPE netwr,
matnr TYPE matnr,
werks TYPE werks_d,
taxm4 TYPE taxm4, " JOCG
taxm5 TYPE taxm5, " JOSG
taxm8 TYPE taxm8, " JOIG
taxm9 TYPE taxm9, " JOUG
END OF lty_vbrp,

BEGIN OF lty_marc,
matnr TYPE matnr,
werks TYPE werks_d,
steuc TYPE steuc,
END OF lty_marc,

BEGIN OF lty_konv,
knumv TYPE	knumv,
kposn TYPE kposn,
stunr TYPE stunr,
zaehk TYPE dzaehk,
kappl TYPE kappl,
kschl TYPE kscha,
kawrt TYPE kawrt,
kbetr TYPE kbetr,
kwert TYPE kwert,
koaid TYPE koaid,
END OF lty_konv,

lty_r_taxm TYPE RANGE OF taxm4.


DATA : lt_vbrk     TYPE STANDARD TABLE OF lty_vbrk,
lt_vbrp     TYPE STANDARD TABLE OF lty_vbrp,
lt_marc     TYPE STANDARD TABLE OF lty_marc,
lt_marc_tmp TYPE STANDARD TABLE OF lty_marc,
lt_konv     TYPE STANDARD TABLE OF lty_konv,
lt_makt     TYPE STANDARD TABLE OF makt,
lr_taxm     TYPE lty_r_taxm,
ls_taxm     TYPE LINE OF lty_r_taxm,
lv_tabix1   TYPE i,
lv_tabix2   TYPE i,
lv_tabix3   TYPE i.


*    ls_fkdat-sign   = yss_cl_type_pool=>yss_c_i.
*    ls_fkdat-option = yss_cl_type_pool=>yss_c_opt_bt.
*    ls_fkdat-low    = sy-datum - 30.
*    ls_fkdat-high   = sy-datum.
*    APPEND ls_fkdat TO lr_fkdat.

ls_taxm-sign = yss_cl_type_pool=>yss_c_i.
ls_taxm-option = yss_cl_type_pool=>yss_c_opt_bt.
ls_taxm-low = '1'.
ls_taxm-high = '3'.
APPEND ls_taxm TO lr_taxm. CLEAR ls_taxm.


* Fetch billing header details (last 30 days)
SELECT vbeln vbtyp vkorg knumv fkdat netwr FROM vbrk
INTO TABLE lt_vbrk
WHERE fkdat IN im_date_range
AND vbtyp IN ('M','O','P')   "Invoice(M), Credit memo(O) and Deb
AND bukrs EQ 'RMSS'
AND fkart IN ('ZFKS', 'ZRKS')
AND fksto EQ space
AND bupla EQ im_req_params-bupla.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_nil_summary_details_found.
ENDIF.
SORT lt_vbrk BY vbeln.
*   Fetch the billing item details
SELECT vbeln posnr fkimg netwr matnr werks taxm4 taxm5 taxm8 taxm9 F
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln EQ lt_vbrk-vbeln
AND ( taxm4 IN lr_taxm    " JOCG - CGST
OR   taxm5 IN lr_taxm    " JOSG - SGST
OR   taxm8 IN lr_taxm    " JOIG - IGST
OR   taxm9 IN lr_taxm ). " JOUG - UGST
IF sy-subrc EQ 0.
SORT lt_vbrp BY matnr.
*   Fetch the HSN code
SELECT matnr werks steuc FROM marc
INTO TABLE lt_marc
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr EQ lt_vbrp-matnr
AND werks EQ lt_vbrp-werks.
IF sy-subrc EQ 0.
*       Fetch the material descriptions for all the materials
SELECT * FROM makt INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_marc
WHERE matnr EQ lt_marc-matnr
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.
ENDIF.
ENDIF.
* Fetch the conditon records( IGST, SGST, CGST)
SELECT knumv kposn stunr zaehk kappl kschl kawrt kbetr kwert koaid
FROM konv INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv EQ lt_vbrk-knumv
AND kschl EQ 'ZPRO'.    "Base Price.
IF sy-subrc EQ 0.
SORT lt_konv BY knumv kposn.
ENDIF.

SORT lt_marc BY steuc.
lt_marc_tmp = lt_marc.

DELETE ADJACENT DUPLICATES FROM lt_marc_tmp COMPARING steuc.

LOOP AT lt_marc_tmp INTO DATA(lwa_marc_tmp).

READ TABLE lt_marc WITH KEY steuc = lwa_marc_tmp-steuc TRANSPORTIN
IF sy-subrc NE 0.
CONTINUE.
ENDIF.
lv_tabix3 = sy-tabix.

* Add HSN Header entry
APPEND INITIAL LINE TO ex_nil_summary ASSIGNING FIELD-SYMBOL(<lfs_
<lfs_nil_header>-hsn_code = lwa_marc_tmp-steuc.
IF lwa_marc_tmp-steuc(2) EQ '99'.
<lfs_nil_header>-item_type = 'Service'.
ELSE.
<lfs_nil_header>-item_type = 'Goods'.
ENDIF.

LOOP AT lt_marc INTO DATA(lwa_marc) FROM lv_tabix3.
IF lwa_marc_tmp-steuc NE lwa_marc-steuc.
EXIT.
ENDIF.

*  Add HSN summary details for each material
APPEND INITIAL LINE TO <lfs_nil_header>-materials ASSIGNING FIEL
<lfs_nil_summary>-material = lwa_marc-matnr.

* Read material description
READ TABLE lt_makt INTO DATA(lwa_makt) WITH KEY matnr = lwa_marc
IF sy-subrc EQ 0.
<lfs_nil_summary>-mat_desc = lwa_makt-maktx.
ENDIF.

* Read material number
READ TABLE lt_vbrp WITH KEY matnr = lwa_marc-matnr TRANSPORTING
IF sy-subrc NE 0.
CONTINUE.
ENDIF.
lv_tabix1 = sy-tabix.

* Loop for each billing document based on the material number
LOOP AT lt_vbrp INTO DATA(lwa_vbrp) FROM lv_tabix1.

IF lwa_vbrp-matnr NE lwa_marc-matnr.
EXIT.
ENDIF.

* Header details
READ TABLE lt_vbrk INTO DATA(lwa_vbrk) WITH KEY vbeln = lwa_vb
IF sy-subrc EQ 0.
IF lwa_vbrk-vbtyp EQ 'O'.  "Credit memo
lwa_vbrp-netwr = lwa_vbrp-netwr * -1.
ENDIF.

IF lwa_vbrp-taxm4 EQ '1' OR lwa_vbrp-taxm5 EQ '1' OR lwa_vbr
* Calculate the Nil summary totals(Material wise - GST-Exempted)
<lfs_nil_summary>-gst_exemp_amt = <lfs_nil_summary>-gst_ex
* Calculate the header totals(HSN wise - GST-Exempted)
<lfs_nil_header>-gst_exemp_amt  = <lfs_nil_header>-gst_exe
ENDIF.

IF lwa_vbrp-taxm4 EQ '2' OR lwa_vbrp-taxm5 EQ '2' OR lwa_vbr
* Calculate the Nil summary totals(Material wise - Non Taxable GST)
<lfs_nil_summary>-non_gst_amt   = <lfs_nil_summary>-non_gs
* Calculate the header totals(HSN wise - Non Taxable GST)
<lfs_nil_header>-non_gst_amt    = <lfs_nil_header>-non_gst
ENDIF.

IF lwa_vbrp-taxm4 EQ '3' OR lwa_vbrp-taxm5 EQ '3' OR lwa_vbr
* Calculate the Nil summary totals(Material wise - Excisable with GST)
<lfs_nil_summary>-excis_gst_amt = <lfs_nil_summary>-excis_
* Calculate the header totals(HSN wise - Excisable with GST)
<lfs_nil_header>-excis_gst_amt  = <lfs_nil_header>-excis_g
ENDIF.

* Calculate the summary totals(Material wise)
<lfs_nil_summary>-net_amt   = <lfs_nil_summary>-net_amt    +
<lfs_nil_summary>-total_amt = <lfs_nil_summary>-total_amt  +
* Calculate the header totals(HSN wise)
<lfs_nil_header>-total_amt  = <lfs_nil_header>-total_amt + l
<lfs_nil_header>-net_amt    = <lfs_nil_header>-net_amt   + l

****        Condition tax details
***            READ TABLE lt_konv WITH KEY knumv = lwa_vbrk-knumv kposn
***            IF sy-subrc NE 0.
***              CONTINUE.
***            ENDIF.
***
***            lv_tabix2 = sy-tabix.
***
**** Read the condition tax records to calculate the Overall totals and
***            LOOP AT lt_konv INTO DATA(lwa_konv) FROM lv_tabix2.
***              IF lwa_konv-knumv NE lwa_vbrk-knumv OR lwa_konv-kposn N
***                EXIT.
***              ENDIF.
***
***              CASE lwa_konv-kschl.
***                WHEN 'JOIG'. "IGST
****                 Item wise summary totals
***                  <lfs_nil_summary>-total_amt = <lfs_nil_summary>-tot
***                  <lfs_nil_summary>-igst_amt  = <lfs_nil_summary>-igs
***
****                 Header wise summary totals
***                  <lfs_hsn_header>-total_amt = <lfs_hsn_header>-total
***                  <lfs_hsn_header>-igst_amt  = <lfs_hsn_header>-igst_
***
***                WHEN 'JOCG'.  "CGST
****                 Item wise summary totals
***                  <lfs_nil_summary>-total_amt = <lfs_nil_summary>-tot
***                  <lfs_nil_summary>-cgst_amt  = <lfs_nil_summary>-cgs
***
****                 Header wise summary totals
***                  <lfs_hsn_header>-total_amt = <lfs_hsn_header>-total
***                  <lfs_hsn_header>-cgst_amt  = <lfs_hsn_header>-cgst_
***
***                WHEN 'JOSG'.  "SGST
****                 Item wise summary totals
***                  <lfs_nil_summary>-total_amt = <lfs_nil_summary>-tot
***                  <lfs_nil_summary>-sgst_amt  = <lfs_nil_summary>-sgs
***
****                 Header wise summary totals
***                  <lfs_hsn_header>-total_amt = <lfs_hsn_header>-total
***                  <lfs_hsn_header>-sgst_amt  = <lfs_hsn_header>-sgst_
***                WHEN OTHERS.
***              ENDCASE.
***            ENDLOOP.
ENDIF.
ENDLOOP.
ENDLOOP.
SORT <lfs_nil_header>-materials BY material.
ENDLOOP.
SORT ex_nil_summary BY hsn_code.
ENDMETHOD.
GET_MCTA_SALE_GROUP_WISE
item
METHOD get_mcta_sale_group_wise.
TYPES: BEGIN OF lty_vbak,
vbeln TYPE vbeln_va,
audat TYPE audat,  "Document Date (Date Received/Sent)
kunnr TYPE kunag,  "Sold to party
bstzd TYPE bstzd,
END OF lty_vbak,

BEGIN OF lty_vbap,
vbeln  TYPE vbeln_va,
posnr  TYPE posnr_va,
matnr  TYPE matnr,  " Material number
kwmeng TYPE kwmeng, " Quantity
vrkme  TYPE vrkme,  " Sale unit
werks  TYPE werks_d,
netwr  TYPE netwr_ap,
mvgr1  TYPE matkl,
END OF lty_vbap,
BEGIN OF lty_vbfa,
vbelv   TYPE vbfa-vbelv,
posnv   TYPE vbfa-posnv,
vbeln   TYPE vbfa-vbeln,
posnn   TYPE vbfa-posnn,
vbtyp_n TYPE vbfa-vbtyp_n,
rfmng   TYPE vbfa-rfmng,
rfwrt   TYPE vbfa-rfwrt,
END OF lty_vbfa,
BEGIN OF lty_vbrk,
vbeln TYPE vbeln_vf,
vbtyp TYPE vbtyp,
fksto TYPE fksto,
END OF lty_vbrk,
*** >>> START GANGADHAR20181227
BEGIN OF lty_vbpa,
vbeln TYPE vbeln,
kunnr TYPE kunnr,
adrnr TYPE adrnr,
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
END OF lty_adrc,
*** <<< END GANGADHAR20181227

BEGIN OF lty_kna1,
kunnr TYPE kunnr,
name1 TYPE name1_gp,
END OF lty_kna1,

BEGIN OF lty_makt,
matnr TYPE matnr,
maktx TYPE maktx,
END OF lty_makt,

BEGIN OF lty_t001w,
werks TYPE werks_d,
name1 TYPE name1,
END OF lty_t001w.
*** >>> START GANGADHAR20180628
TYPES : BEGIN OF lty_mvke,
matnr TYPE matnr,
vkorg TYPE vkorg,
vtweg TYPE vtweg,
mvgr1 TYPE mvgr1,
END OF lty_mvke.
DATA : lt_mvke  TYPE STANDARD TABLE OF lty_mvke.
*** <<< END GANGADHAR20180628

DATA : lt_vbak         TYPE STANDARD TABLE OF lty_vbak,
lt_vbap         TYPE STANDARD TABLE OF lty_vbap,
lt_vbap_tmp     TYPE STANDARD TABLE OF lty_vbap,
lt_sditem_sg    TYPE STANDARD TABLE OF yss_t_sditem_sg,
lt_vbfa         TYPE STANDARD TABLE OF lty_vbfa,
lt_vbrk         TYPE STANDARD TABLE OF lty_vbrk,
lt_kna1         TYPE STANDARD TABLE OF lty_kna1,
lt_makt         TYPE STANDARD TABLE OF lty_makt,
lt_tvm1t        TYPE STANDARD TABLE OF tvm1t,    "+++GANGADHA
lt_t001w        TYPE STANDARD TABLE OF lty_t001w,
lt_vbpa         TYPE STANDARD TABLE OF lty_vbpa,  "+++GANGADH
lt_adrc         TYPE STANDARD TABLE OF lty_adrc,  "+++GANGADH
lt_analysis     TYPE yss_tt_salesgroup_wise,
lt_analysis_tmp TYPE yss_tt_salesgroup_wise,
lt_tvgrt        TYPE STANDARD TABLE OF tvgrt,
lv_tabix        TYPE sy-tabix,
lv_vtweg        TYPE vtweg.

* Get sales order header details
SELECT vbeln audat kunnr bstzd FROM vbak INTO TABLE lt_vbak
WHERE vbtyp EQ yss_cl_type_pool=>yss_c_c
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
***        AND vtweg = lv_vtweg
AND spart = yss_cl_type_pool=>yss_c_md
AND kunnr IN im_kunnr
AND audat IN im_date_range.
*        AND bstzd = im_werks.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_sales_details_found.
ENDIF.

SORT lt_vbak BY vbeln.
*     Get customer name
SELECT kunnr name1 FROM kna1 INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_vbak
WHERE kunnr EQ lt_vbak-kunnr.
IF sy-subrc EQ 0.
SORT lt_kna1 BY kunnr.
ENDIF.

*** >>> START GANGADHAR20181227 Get Ship-to-party details
* Get the address number based on the Sales and Distribution Document Nu
SELECT vbeln kunnr adrnr FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND parvw EQ 'WE'.  "Ship-to-party
IF sy-subrc EQ 0.
SORT lt_vbpa BY vbeln.
*    Fetch Ship-to-party name
SELECT addrnumber name1 FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.

*** <<< END GANGADHAR20181227
*      Get sales order item details
SELECT vbeln posnr matnr kwmeng vrkme werks netwr mvgr1 FROM vbap  "
INTO TABLE lt_vbap
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND matnr IN im_matnr.
IF sy-subrc EQ 0.
SORT lt_vbap BY vbeln posnr.
******
*     Get the sales group details
SELECT * FROM yss_t_sditem_sg
INTO TABLE lt_sditem_sg
FOR ALL ENTRIES IN lt_vbap
WHERE vbeln EQ lt_vbap-vbeln
AND posnr EQ lt_vbap-posnr
AND zzsales_group IN im_sales_group.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_sales_grp_details_found.
ENDIF.

SORT lt_sditem_sg BY zzsales_group.
*****

* Get sales group description
SELECT * FROM tvgrt INTO TABLE lt_tvgrt
FOR ALL ENTRIES IN lt_sditem_sg
WHERE vkgrp EQ lt_sditem_sg-zzsales_group
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
SORT lt_tvgrt BY vkgrp.
ENDIF.

* Get linked documents and quantities & amounts
SELECT vbelv posnv vbeln posnn vbtyp_n rfmng rfwrt INTO TABLE lt_v
FROM vbfa
FOR ALL ENTRIES IN lt_sditem_sg
WHERE vbelv = lt_sditem_sg-vbeln AND
posnv = lt_sditem_sg-posnr AND
vbtyp_n = 'M'.
IF sy-subrc EQ 0.
SORT lt_vbfa BY vbelv posnv vbtyp_n.
* Get the Billing header details regarding the Order status
SELECT vbeln vbtyp fksto FROM vbrk INTO TABLE lt_vbrk
FOR ALL ENTRIES IN lt_vbfa
WHERE vbeln EQ lt_vbfa-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbrk BY vbeln fksto.
ENDIF.

ENDIF.

* Get the plant details
SELECT werks name1 FROM t001w INTO TABLE lt_t001w
FOR ALL ENTRIES IN lt_vbap
WHERE werks EQ lt_vbap-werks.
IF sy-subrc EQ 0.
SORT lt_t001w BY werks.
ENDIF.

*** >>> START GANGADHAR20180704
* For performance check
lt_vbap_tmp = lt_vbap.
SORT lt_vbap_tmp BY matnr.
DELETE ADJACENT DUPLICATES FROM lt_vbap_tmp COMPARING matnr.
*** <<< END GANGADHAR20180704
*  Get the material description
SELECT matnr maktx FROM makt INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_vbap_tmp
WHERE matnr EQ lt_vbap_tmp-matnr
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.

*** >>> START GANGADHAR20180627
SELECT matnr vkorg vtweg mvgr1  FROM mvke INTO TABLE lt_mvke
FOR ALL ENTRIES IN lt_vbap_tmp
WHERE matnr EQ lt_vbap_tmp-matnr
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg IN (yss_cl_type_pool=>yss_c_ds,yss_cl_type_pool=>yss
IF sy-subrc EQ 0.
SORT lt_mvke BY matnr vtweg.

*  Fetch material group description
SELECT * FROM tvm1t INTO TABLE lt_tvm1t
FOR ALL ENTRIES IN lt_mvke
WHERE spras EQ sy-langu
AND mvgr1 EQ lt_mvke-mvgr1.
IF sy-subrc EQ 0.
SORT lt_tvm1t BY mvgr1.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180627
ENDIF.
* VBRK-FKSTO = '' Invoice else cancel  "OCRB from VBFA

LOOP AT lt_sditem_sg INTO DATA(lwa_sditem_sg).

APPEND INITIAL LINE TO lt_analysis ASSIGNING FIELD-SYMBOL(<lfs_ana

<lfs_analysis>-sales_group = lwa_sditem_sg-zzsales_group.
READ TABLE lt_tvgrt INTO DATA(lwa_tvgrt) WITH KEY vkgrp = lwa_sdit
IF sy-subrc EQ 0.
<lfs_analysis>-sales_group_desc = lwa_tvgrt-bezei.
ENDIF.

* Read sales header details to read the dealer code and name.
READ TABLE lt_vbak INTO DATA(lwa_vbak) WITH KEY vbeln = lwa_sditem
IF sy-subrc EQ 0.
*       Read the dealer code and name
READ TABLE lt_kna1 INTO DATA(lwa_kna1) WITH KEY kunnr = lwa_vbak
IF sy-subrc EQ 0.
<lfs_analysis>-dealer_code = lwa_kna1-kunnr.
<lfs_analysis>-dealer_name = lwa_kna1-name1.
ENDIF.

*** >>> START GANGADHAR20181227
*      Read the Ship-to-party code and name
READ TABLE lt_vbpa INTO DATA(lwa_vbpa)
WITH KEY vbeln = lwa_vbak-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-ship_to_party = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO DATA(lwa_adrc)
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-ship_to_name  = lwa_adrc-name1.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20181227

*      Read the item details to get the total sales quantity
READ TABLE lt_vbap INTO DATA(lwa_vbap) WITH KEY vbeln = lwa_sdit
IF sy-subrc EQ 0.
<lfs_analysis>-incoming_qty   = lwa_vbap-kwmeng.
<lfs_analysis>-open_qty       = lwa_vbap-kwmeng.
<lfs_analysis>-incoming_price = lwa_vbap-netwr.
<lfs_analysis>-open_price     = lwa_vbap-netwr.
<lfs_analysis>-material_code  = lwa_vbap-matnr.
<lfs_analysis>-plant          = lwa_vbap-werks.

*         Read material description
READ TABLE lt_makt INTO DATA(lwa_makt) WITH KEY matnr = lwa_vb
IF sy-subrc EQ 0.
<lfs_analysis>-material_name = lwa_makt-maktx.
CLEAR lwa_makt.
ENDIF.

*         Read plant description
READ TABLE lt_t001w INTO DATA(lwa_t001w) WITH KEY werks = lwa_
IF sy-subrc EQ 0.
<lfs_analysis>-plant_name = lwa_t001w-name1.
CLEAR lwa_t001w.
ENDIF.
*** >>> START GANGADHAR20180627
* Based on plant decide the Distribution Channel
IF lwa_vbap-werks+0(1) = yss_cl_type_pool=>yss_c_s.
lv_vtweg = yss_cl_type_pool=>yss_c_ds.
ELSEIF lwa_vbap-werks+0(1) = yss_cl_type_pool=>yss_c_k.
lv_vtweg = yss_cl_type_pool=>yss_c_dh.
ENDIF.

*         Read material group description
READ TABLE lt_mvke INTO DATA(ls_mvke) WITH KEY matnr = lwa_vba
IF sy-subrc EQ 0.
READ TABLE lt_tvm1t INTO DATA(ls_tvm1t) WITH KEY mvgr1 = ls_
IF sy-subrc EQ 0.
<lfs_analysis>-mat_grp_desc = ls_tvm1t-bezei.
<lfs_analysis>-mat_grp      = ls_tvm1t-mvgr1.
ENDIF.
ENDIF.
*** <<< END GANGADHAR20180627

READ TABLE lt_vbfa WITH KEY vbelv = lwa_sditem_sg-vbeln posnv
IF sy-subrc EQ 0.
lv_tabix = sy-tabix.

LOOP AT lt_vbfa INTO DATA(lwa_vbfa) FROM lv_tabix.
IF lwa_vbfa-vbelv NE lwa_sditem_sg-vbeln OR lwa_vbfa-posnv
EXIT.
ENDIF.

*              Don't consider cancelled billing order.
READ TABLE lt_vbrk WITH KEY vbeln = lwa_vbfa-vbeln fksto =
IF sy-subrc EQ 0.
CONTINUE.
ENDIF.

<lfs_analysis>-open_qty  = <lfs_analysis>-open_qty - lwa_v
<lfs_analysis>-sales_qty = <lfs_analysis>-sales_qty + lwa_

<lfs_analysis>-open_price = <lfs_analysis>-open_price - lw
<lfs_analysis>-sales_price = <lfs_analysis>-sales_price +

CLEAR : lwa_vbfa.
ENDLOOP.
CLEAR lv_tabix.
ENDIF.
ENDIF.
ENDIF.
CLEAR : lwa_sditem_sg.
ENDLOOP.

SORT lt_analysis BY sales_group plant dealer_code ship_to_party mate

lt_analysis_tmp = lt_analysis.
DELETE ADJACENT DUPLICATES FROM lt_analysis_tmp COMPARING sales_grou

LOOP AT lt_analysis_tmp INTO DATA(lwa_analysis_tmp).

READ TABLE lt_analysis WITH KEY sales_group = lwa_analysis_tmp-sal
dealer_code = lwa_analysis_tmp-dea
material_code = lwa_analysis_tmp-m
TRANSPORTING NO FIELDS BINARY SEAR
IF sy-subrc NE 0.
CONTINUE.
ENDIF.

lv_tabix = sy-tabix.

LOOP AT lt_analysis INTO DATA(lwa_analysis_tp) FROM lv_tabix.
IF lwa_analysis_tp-sales_group NE lwa_analysis_tmp-sales_group O
lwa_analysis_tp-dealer_code NE lwa_analysis_tmp-dealer_code O
lwa_analysis_tp-material_code NE lwa_analysis_tmp-material_co
EXIT.
ENDIF.
DATA(lwa_analysis) = lwa_analysis_tp.

AT NEW material_code.
IF im_mat_grp IS NOT INITIAL AND im_mat_grp NE lwa_analysis-ma
CONTINUE.
ENDIF.

APPEND INITIAL LINE TO ex_analysis ASSIGNING <lfs_analysis>.
<lfs_analysis>-sales_group      = lwa_analysis-sales_group.
<lfs_analysis>-plant            = lwa_analysis-plant.
<lfs_analysis>-dealer_code      = lwa_analysis-dealer_code.
<lfs_analysis>-material_code    = lwa_analysis-material_code.
<lfs_analysis>-sales_group_desc = lwa_analysis-sales_group_des
<lfs_analysis>-plant_name       = lwa_analysis-plant_name.
<lfs_analysis>-dealer_name      = lwa_analysis-dealer_name.
<lfs_analysis>-material_name    = lwa_analysis-material_name.
<lfs_analysis>-mat_grp          = lwa_analysis-mat_grp.
<lfs_analysis>-mat_grp_desc     = lwa_analysis-mat_grp_desc.
<lfs_analysis>-ship_to_party    = lwa_analysis-ship_to_party.
<lfs_analysis>-ship_to_name     = lwa_analysis-ship_to_name.
ENDAT.
<lfs_analysis>-incoming_qty   = <lfs_analysis>-incoming_qty   +
<lfs_analysis>-sales_qty      = <lfs_analysis>-sales_qty      +
<lfs_analysis>-open_qty       = <lfs_analysis>-open_qty       +
<lfs_analysis>-incoming_price = <lfs_analysis>-incoming_price +
<lfs_analysis>-sales_price    = <lfs_analysis>-sales_price    +
<lfs_analysis>-open_price     = <lfs_analysis>-open_price     +
ENDLOOP.
ENDLOOP.
ENDMETHOD.
GET_SO_REPORT
item
METHOD get_so_report.
**Types Declaraton
TYPES : BEGIN OF lty_vbak,
vbeln TYPE vbeln_va,
audat TYPE audat,
vdatu TYPE edatu_vbak,
bstnk TYPE bstnk,
bstdk TYPE bstdk,
auart TYPE auart,
vbtyp TYPE vbtyp,
knumv TYPE knumv,
END OF lty_vbak,

BEGIN OF lty_vbpa,
vbeln TYPE vbeln_va,
parvw TYPE parvw,
kunnr TYPE kunnr,
adrnr TYPE adrnr,
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
name2      TYPE ad_name2,
END OF lty_adrc,

BEGIN OF lty_vbuk,
vbeln TYPE vbeln,
lfgsk TYPE lkgsk,
*              gbstk TYPE gbstk,
END OF lty_vbuk,

BEGIN OF lty_vbap,
vbeln  TYPE vbeln,
posnr  TYPE posnr_va,
matnr  TYPE matnr,
charg  TYPE charg_d,
matkl  TYPE matkl,
arktx  TYPE arktx,
netwr  TYPE netwr_ap,
kwmeng TYPE kwmeng,
vrkme  TYPE vrkme,
netpr  TYPE netpr,
mwsbp  TYPE mwsbp,
END OF lty_vbap,

BEGIN OF lty_vbfa,
vbelv   TYPE vbeln_von,
posnv   TYPE posnr_von,
vbeln   TYPE vbeln_nach,
posnn   TYPE posnr_nach,
vbtyp_n TYPE vbtyp_n,
END OF lty_vbfa,
BEGIN OF lty_konv,
knumv TYPE konv-knumv,
kposn TYPE konv-kposn,
kschl TYPE konv-kschl,
kbetr TYPE konv-kbetr,
waers TYPE konv-waers,
kwert TYPE konv-kwert,
END OF lty_konv.
**Data declarations
DATA : lt_vbak       TYPE STANDARD TABLE OF lty_vbak,
lwa_vbak      TYPE lty_vbak,
lt_vbpa       TYPE STANDARD TABLE OF lty_vbpa,
lwa_vbpa      TYPE lty_vbpa,
lt_adrc       TYPE STANDARD TABLE OF lty_adrc,
lwa_adrc      TYPE lty_adrc,
lt_vbuk       TYPE STANDARD TABLE OF lty_vbuk,
lwa_vbuk      TYPE lty_vbuk,
lt_vbap       TYPE STANDARD TABLE OF lty_vbap,
lwa_vbap      TYPE lty_vbap,
lt_vbfa       TYPE STANDARD TABLE OF lty_vbfa,
lt_tvakt      TYPE STANDARD TABLE OF tvakt,
lwa_tvakt     TYPE tvakt,
lwa_vbfa      TYPE lty_vbfa,
lv_index      TYPE i,
lv_status     TYPE flag,
lt_tvarvc     TYPE rsdsselopt_t,
lwa_tvarvc    TYPE LINE OF rsdsselopt_t,
lv_from_date  TYPE sy-datum,
lwa_so_list   TYPE yss_s_so_report,
lt_r_date     TYPE yss_cl_type_pool=>yss_r_date,
lt_r_vbeln    TYPE RANGE OF vbeln,
lt_r_lfgsk    TYPE RANGE OF lkgsk,
lt_r_kunnr    TYPE yss_cl_type_pool=>yss_r_kunnr,
lt_r_vkorg    TYPE rsdsselopt_t,
lr_selopt     TYPE STANDARD TABLE OF rsdsselopt,
ls_selopt     TYPE rsdsselopt,
lo_exception  TYPE REF TO ycx_ss_exception,
lt_vbeln      TYPE yss_tt_vbeln,
ls_order_view TYPE order_view,
lv_zspe       TYPE kbetr,
lv_zper       TYPE kbetr,
lt_so_item    TYPE yss_tt_so_item,
ls_so_item    TYPE yss_s_so_item,
ls_konv       TYPE lty_konv,
lt_konv       TYPE TABLE OF lty_konv.

** Field-symbols
FIELD-SYMBOLS: <lfs_date>  TYPE LINE OF yss_cl_type_pool=>yss_r_date
<lfs_kunnr> TYPE LINE OF yss_cl_type_pool=>yss_r_kunn
**Refresh exporting parameters
CLEAR:ex_so_list.

* To fill lt_r_date
IF im_date IS INITIAL.
"*If im_date is initial, Get no. of days from TVARVC table
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_c_days
IMPORTING
ex_range       = lt_tvarvc.
READ TABLE lt_tvarvc INTO lwa_tvarvc INDEX 1.
IF sy-subrc EQ 0.
lv_from_date = sy-datum - lwa_tvarvc-low.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = lv_from_date.
<lfs_date>-high = sy-datum.
ENDIF.
ELSEIF im_date-low IS NOT INITIAL AND im_date-high IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'BT'.
<lfs_date>-low = im_date-low.
<lfs_date>-high = im_date-high.
ELSEIF im_date-low IS NOT INITIAL AND im_date-high IS INITIAL.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'EQ'.
<lfs_date>-low = im_date-low.
ELSEIF im_date-low IS INITIAL AND im_date-high IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_date ASSIGNING <lfs_date>.
<lfs_date>-sign = 'I'.
<lfs_date>-option = 'EQ'.
<lfs_date>-low = im_date-high.
ENDIF.

* Fill lt_r_kunnr if im_clientid is provided
IF im_clientid IS NOT INITIAL.
APPEND INITIAL LINE TO lt_r_kunnr ASSIGNING <lfs_kunnr>.
<lfs_kunnr>-sign = 'I'.
<lfs_kunnr>-option = 'EQ'.
<lfs_kunnr>-low = im_clientid.
ENDIF.

* Get the sales organizations from tvarvc entries
CALL METHOD yss_cl_util=>get_tvarvc_entries
EXPORTING
im_tvarvc_name = yss_cl_type_pool=>yss_sales_org
IMPORTING
ex_range       = lt_r_vkorg.

* To get the sales orders from VBAK
SELECT vbeln
audat
vdatu
bstnk
bstdk
auart
vbtyp
knumv FROM vbak
INTO TABLE lt_vbak
WHERE erdat IN lt_r_date
AND kunnr IN lt_r_kunnr
AND bstzd EQ im_werks
AND vkorg IN lt_r_vkorg
ORDER BY erdat DESCENDING erzet DESCENDING
%_HINTS ORACLE 'INDEX("VBAK" "VBAK~YSS")' .
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

IF lt_vbak[] IS NOT INITIAL.

**Condition Taxes and Amounts
SELECT knumv
kposn
kschl
kbetr
waers
kwert
FROM konv
INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbak
WHERE knumv = lt_vbak-knumv
AND   kschl IN (yss_cl_type_pool=>yss_c_zpro,yss_cl_type_po
yss_cl_type_pool=>yss_c_zper,yss_cl_type_po
yss_cl_type_pool=>yss_c_sgst,yss_cl_type_po
IF sy-subrc = 0.
SORT lt_konv BY knumv kposn kschl.
ENDIF.
* Get SalesOrder status from vbuk
IF im_status IS NOT INITIAL.                                "IM_ST
APPEND INITIAL LINE TO lt_r_lfgsk ASSIGNING FIELD-SYMBOL(<lfs_lf
<lfs_lfgsk>-sign = 'I'.
<lfs_lfgsk>-option = 'EQ'.
<lfs_lfgsk>-low = im_status.
ENDIF.
SELECT vbeln lfgsk FROM vbuk
INTO TABLE lt_vbuk
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln AND
lfgsk IN lt_r_lfgsk.
IF sy-subrc EQ 0.
SORT lt_vbuk BY vbeln.
*  If im_status is given, Delete vbeln which are not in vbuk, inorder to
IF im_status IS NOT INITIAL.
LOOP AT lt_vbak INTO lwa_vbak.
READ TABLE lt_vbuk TRANSPORTING NO FIELDS WITH KEY vbeln = l
IF sy-subrc NE 0.
DELETE TABLE lt_vbak FROM lwa_vbak.
ENDIF.
ENDLOOP.
ENDIF.
ELSEIF im_status IS NOT INITIAL.
LOOP AT lt_vbak INTO lwa_vbak .
DELETE lt_vbak.
ENDLOOP.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_data_with_the_given_status.
ENDIF.

*    Fetch the customer partner details
ls_selopt-sign = 'I'.
ls_selopt-option = 'EQ'.
ls_selopt-low = yss_cl_type_pool=>yss_c_ag. APPEND ls_selopt TO lr
ls_selopt-low = yss_cl_type_pool=>yss_c_we. APPEND ls_selopt TO lr
ls_selopt-low = yss_cl_type_pool=>yss_c_z1. APPEND ls_selopt TO lr
ls_selopt-low = yss_cl_type_pool=>yss_c_z2. APPEND ls_selopt TO lr
SELECT vbeln parvw kunnr adrnr FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND parvw IN lr_selopt.
IF sy-subrc EQ 0.
SORT lt_vbpa BY vbeln parvw.
*  Fetch the partner names
SELECT addrnumber name1 name2 FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.

* Get sales order item price details.
SELECT vbeln posnr matnr charg matkl
arktx netwr kwmeng vrkme netpr mwsbp
FROM vbap
INTO TABLE lt_vbap
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbap BY vbeln.
ENDIF.

*Get Delivery order and billing order for the corresponding SO
SELECT vbelv
posnv
vbeln
posnn
vbtyp_n FROM vbfa
INTO TABLE lt_vbfa
FOR ALL ENTRIES IN lt_vbak
WHERE vbelv EQ lt_vbak-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbfa BY vbelv.
ENDIF.

*  Fetch the sales document type text
SELECT * FROM tvakt
INTO TABLE lt_tvakt
FOR ALL ENTRIES IN lt_vbak
WHERE auart = lt_vbak-auart AND
spras = sy-langu.
IF sy-subrc EQ 0.
SORT lt_tvakt BY auart.
ENDIF.
ENDIF.

*To populate ex_so_list
LOOP AT lt_vbak INTO lwa_vbak.
lwa_so_list-sales_doc = lwa_vbak-vbeln.
lwa_so_list-doc_date = lwa_vbak-audat.
lwa_so_list-req_del_date = lwa_vbak-vdatu.
lwa_so_list-po_num = lwa_vbak-bstnk.
lwa_so_list-po_date = lwa_vbak-bstdk.
lwa_so_list-doc_type = lwa_vbak-auart.
IF lwa_vbak-vbtyp = yss_cl_type_pool=>yss_c_c.     " C - Order
lwa_so_list-doc_category = 'Order'(030).
ELSEIF lwa_vbak-vbtyp = yss_cl_type_pool=>yss_c_h.    " H - Return
lwa_so_list-doc_category =  'Returns'(031).
ENDIF.

*Read sales document type text
READ TABLE lt_tvakt INTO lwa_tvakt WITH KEY auart = lwa_vbak-auart
IF sy-subrc EQ 0.
lwa_so_list-doc_type_desc = lwa_tvakt-bezei.
ENDIF.
* Read Sold to party details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss
IF sy-subrc EQ 0.
lwa_so_list-sold_to_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE lwa_adrc-name1 lwa_adrc-name2 INTO
lwa_so_list-sold_to_name.
ENDIF.
ENDIF.

* Read ship to party details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss
IF sy-subrc EQ 0.
lwa_so_list-ship_to_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE lwa_adrc-name1 lwa_adrc-name2 INTO
lwa_so_list-ship_to_name SEPARATED
ENDIF.
ENDIF.

* Read Sales person1 details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss_
IF sy-subrc EQ 0.
lwa_so_list-sales_pers_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
lwa_so_list-sales_pers_name = lwa_adrc-name1 .
ENDIF.
ENDIF.

* Read Sales person2 details
READ TABLE lt_vbpa INTO lwa_vbpa WITH KEY vbeln = lwa_vbak-vbeln
parvw = yss_cl_type_pool=>yss_
IF sy-subrc EQ 0.
lwa_so_list-sales_pers_num = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO lwa_adrc
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CONCATENATE lwa_so_list-sales_pers_name '/' lwa_adrc-name1 INT
lwa_so_list-sales_pers_name.
SHIFT lwa_so_list-sales_pers_name LEFT DELETING LEADING '/'.
ENDIF.
ENDIF.

* Get the total amount from item table
READ TABLE lt_vbap WITH KEY vbeln = lwa_vbak-vbeln TRANSPORTING
NO FIELDS BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR lv_index.
lv_index = sy-tabix.
LOOP AT lt_vbap INTO lwa_vbap FROM lv_index.
IF lwa_vbap-vbeln NE lwa_vbak-vbeln.
EXIT.
ENDIF.
lwa_so_list-total_amt = lwa_so_list-total_amt + lwa_vbap-netwr
lwa_vbap-mwsbp.
lwa_so_list-net_amount = lwa_so_list-net_amount + lwa_vbap-net

ls_so_item-sales_doc   = lwa_vbak-vbeln.
ls_so_item-so_item     = lwa_vbap-posnr.
ls_so_item-material    = lwa_vbap-matnr.
ls_so_item-description = lwa_vbap-arktx.
ls_so_item-qty         = lwa_vbap-kwmeng.
ls_so_item-uom         = lwa_vbap-vrkme.
ls_so_item-net_val     = lwa_vbap-netwr.

*Discounts & Values
LOOP AT lt_konv INTO ls_konv WHERE knumv = lwa_vbak-knumv
AND   kposn = lwa_vbap-posnr.
CASE ls_konv-kschl.
*Price
WHEN yss_cl_type_pool=>yss_c_zpro.
ls_so_item-unit_price  = ls_konv-kbetr.
ls_so_item-base_price  = ls_so_item-base_price + ls_konv
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zspe.
lv_zspe = lv_zspe + ls_konv-kbetr.
ls_so_item-sch_val = ls_so_item-sch_val + ls_konv-kwert.
*                ls_so_item-sch_type = 'A'.  " Percentage
*Sch Val & Fix Sch
WHEN yss_cl_type_pool=>yss_c_zsvl.
ls_so_item-fix_sch = ls_so_item-fix_sch + ls_konv-kbetr.
ls_so_item-sch_val = ls_so_item-sch_val + ls_konv-kwert.
*                ls_so_item-sch_type = 'B'.  " Amount
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zper.
lv_zper = lv_zper + ls_konv-kbetr.
ls_so_item-dis_amt = ls_so_item-dis_amt + ls_konv-kwert.
*                ls_so_item-dis_type = 'A'.  " Percentage
*Dis Amt & Dis Val
WHEN yss_cl_type_pool=>yss_c_zval.
ls_so_item-dis_val = ls_so_item-dis_val + ls_konv-kbetr.
ls_so_item-dis_amt = ls_so_item-dis_amt + ls_konv-kwert.
*                ls_so_item-dis_type = 'B'.  " Amount
*CGST Rate & CGST Amt
WHEN yss_cl_type_pool=>yss_c_cgst.
ls_so_item-cgst_rate = ls_so_item-cgst_rate + ls_konv-kb
ls_so_item-cgst_amt  = ls_so_item-cgst_amt  + ls_konv-kw
*SGST/UTGST Rate & SGST/UTGST Amt
WHEN yss_cl_type_pool=>yss_c_sgst OR yss_cl_type_pool=>yss
ls_so_item-sgst_rate = ls_so_item-sgst_rate + ls_konv-kb
ls_so_item-sgst_amt  = ls_so_item-sgst_amt  + ls_konv-kw
*IGST Rate & IGST Amt
WHEN yss_cl_type_pool=>yss_c_igst.
ls_so_item-igst_rate = ls_so_item-igst_rate + ls_konv-kb
ls_so_item-igst_amt  = ls_so_item-igst_amt  + ls_konv-kw
ENDCASE.
CLEAR : ls_konv.
ENDLOOP.
*Fix Sch
IF lv_zspe IS NOT INITIAL.
ls_so_item-fix_sch = lv_zspe / 10.
ENDIF.
*Dis Val
IF lv_zper IS NOT INITIAL.
ls_so_item-dis_val = lv_zper / 10.
ENDIF.
*CGST Rate
ls_so_item-cgst_rate = ls_so_item-cgst_rate / 10.
*SGST/UGST Rate
ls_so_item-sgst_rate = ls_so_item-sgst_rate / 10.
*IGST Rate
ls_so_item-igst_rate = ls_so_item-igst_rate / 10.
*Total Amount
ls_so_item-total_amt = lwa_vbap-netwr + lwa_vbap-mwsbp.
APPEND ls_so_item TO lt_so_item.
CLEAR:ls_so_item,lv_zper,lv_zspe,lwa_vbap.
ENDLOOP.
ENDIF.
* Get Del. order and Bill. Order for the corresponding SO number
READ TABLE lt_vbfa INTO lwa_vbfa WITH KEY vbelv = lwa_vbak-vbeln B
IF sy-subrc EQ 0.
IF lwa_vbfa-vbtyp_n = yss_cl_type_pool=>yss_c_j.
lwa_so_list-del_order = lwa_vbfa-vbeln.
ELSEIF lwa_vbfa-vbtyp_n = yss_cl_type_pool=>yss_c_m.
lwa_so_list-bill_order = lwa_vbfa-vbeln.
ENDIF.
ENDIF.
* Get the salesorder status details.
READ TABLE lt_vbuk INTO lwa_vbuk WITH KEY vbeln = lwa_vbak-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
IF lwa_vbuk-lfgsk = yss_cl_type_pool=>yss_c_c.                 "
lwa_so_list-status = 'Delivery Initiated'(006).
lwa_so_list-status_key = yss_cl_type_pool=>yss_c_c.
ELSEIF lwa_vbuk-lfgsk = yss_cl_type_pool=>yss_c_b.             "
lwa_so_list-status = 'Partial delivery Initiated'(007).
lwa_so_list-status_key = yss_cl_type_pool=>yss_c_b.
ELSEIF lwa_vbuk-lfgsk = yss_cl_type_pool=>yss_c_a.             "
lwa_so_list-status = 'Pending'(008).
lwa_so_list-status_key = yss_cl_type_pool=>yss_c_a.
ENDIF.
ENDIF.
lwa_so_list-items = lt_so_item.
APPEND lwa_so_list TO ex_so_list.
CLEAR: lwa_so_list,lv_index,lt_so_item.
ENDLOOP.
ENDMETHOD.
GET_HSN_SUMMARY_2
item
METHOD get_hsn_summary_2.
TYPES: BEGIN OF lty_vbrk,
vbeln TYPE vbeln_vf,
vbtyp TYPE vbtyp,
vkorg TYPE vkorg,
knumv TYPE knumv,
fkdat TYPE fkdat,
END OF lty_vbrk,

BEGIN OF lty_vbrp,
vbeln TYPE vbeln_vf,
posnr TYPE posnr_vf,
fkimg TYPE fkimg,
vrkme TYPE vrkme,
netwr TYPE netwr,
matnr TYPE matnr,
werks TYPE werks_d,
END OF lty_vbrp,

BEGIN OF lty_marc,
matnr TYPE matnr,
werks TYPE werks_d,
steuc TYPE steuc,
END OF lty_marc,

BEGIN OF lty_konv,
knumv TYPE	knumv,
kposn TYPE kposn,
stunr TYPE stunr,
zaehk TYPE dzaehk,
kappl TYPE kappl,
kschl TYPE kscha,
kawrt TYPE kawrt,
kbetr TYPE kbetr,
kwert TYPE kwert,
koaid TYPE koaid,
END OF lty_konv,

BEGIN OF lty_final,
steuc TYPE steuc,     "HSN code
vrkme TYPE vrkme,     "Units
matnr TYPE matnr,
vbeln TYPE vbeln_vf,
posnr TYPE posnr_vf,
fkimg TYPE fkimg,
netwr TYPE netwr,
werks TYPE werks_d,
knumv TYPE knumv,
vbtyp TYPE vbtyp,
END OF lty_final,

lty_r_fkdat TYPE RANGE OF fkdat.

DATA : lt_vbrk     TYPE STANDARD TABLE OF lty_vbrk,
lt_vbrp     TYPE STANDARD TABLE OF lty_vbrp,
lt_marc     TYPE STANDARD TABLE OF lty_marc,
lt_marc_tmp TYPE STANDARD TABLE OF lty_marc,
lt_konv     TYPE STANDARD TABLE OF lty_konv,
lt_makt     TYPE STANDARD TABLE OF makt,
lt_final    TYPE STANDARD TABLE OF lty_final,
lwa_final   TYPE lty_final,
lr_fkdat    TYPE lty_r_fkdat,
ls_fkdat    TYPE LINE OF lty_r_fkdat,
lv_tabix    TYPE i,
lv_tabix2   TYPE i,
lv_tabix3   TYPE i.

* Fetch billing header details (last 30 days)
SELECT vbeln vbtyp vkorg knumv fkdat FROM vbrk
INTO TABLE lt_vbrk
WHERE fkdat IN im_date_range "lr_fkdat
AND vbtyp IN ('M','O','P')   "Invoice(M), Credit memo(O) and Deb
AND bukrs EQ 'RMSS'
AND fkart IN ('ZFKS', 'ZRKS')
AND fksto EQ space
AND bupla EQ im_req_params-bupla.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_hsn_summary_details_found.
ENDIF.
SORT lt_vbrk BY vbeln.

*   Fetch the billing item details
SELECT vbeln posnr fkimg vrkme netwr matnr werks FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln EQ lt_vbrk-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbrp BY matnr vrkme.
*   Fetch the HSN code
SELECT  matnr werks steuc FROM marc
INTO TABLE lt_marc
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr EQ lt_vbrp-matnr
AND werks EQ lt_vbrp-werks.
IF sy-subrc EQ 0.
SORT lt_marc BY matnr.
*       Fetch the material descriptions for all the materials
SELECT * FROM makt INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_marc
WHERE matnr EQ lt_marc-matnr
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr. "+++hana
ENDIF.
ENDIF.
ENDIF.
* Fetch the conditon records( IGST, SGST, CGST)
SELECT knumv kposn stunr zaehk kappl kschl kawrt kbetr kwert koaid
FROM konv INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv EQ lt_vbrk-knumv
AND koaid EQ yss_cl_type_pool=>yss_c_d. "Taxes
IF sy-subrc EQ 0.
SORT lt_konv BY knumv kposn.
ENDIF.

LOOP AT lt_vbrp INTO DATA(lwa_vbrp).
READ TABLE lt_marc INTO DATA(lwa_marc) WITH KEY matnr = lwa_vbrp-m
IF sy-subrc NE 0.
CONTINUE.
ENDIF.
READ TABLE lt_vbrk INTO DATA(lwa_vbrk) WITH KEY vbeln = lwa_vbrp-v
IF sy-subrc NE 0.
CONTINUE.
ENDIF.

APPEND INITIAL LINE TO lt_final ASSIGNING FIELD-SYMBOL(<lfs_final>
MOVE-CORRESPONDING lwa_vbrp TO <lfs_final>.
MOVE-CORRESPONDING lwa_vbrk TO <lfs_final>.
<lfs_final>-steuc = lwa_marc-steuc.
ENDLOOP.

SORT lt_final BY steuc vrkme matnr.
LOOP AT lt_final ASSIGNING <lfs_final>.
lwa_final = <lfs_final>.

AT NEW vrkme.
APPEND INITIAL LINE TO ex_hsn_summary ASSIGNING FIELD-SYMBOL(<lf
<lfs_hsn_header>-hsn_code = lwa_final-steuc.

IF lwa_final-steuc(2) EQ '99'.
<lfs_hsn_header>-item_type = 'Service'.
ELSE.
<lfs_hsn_header>-item_type = 'Goods'.
ENDIF.

ENDAT.

AT NEW matnr.
APPEND INITIAL LINE TO <lfs_hsn_header>-materials ASSIGNING FIEL
READ TABLE lt_makt INTO DATA(lwa_makt) WITH KEY matnr = lwa_fina
IF sy-subrc EQ 0.
<lfs_hsn_summary>-material = lwa_makt-matnr.
<lfs_hsn_summary>-mat_desc = lwa_makt-maktx.
ENDIF.
ENDAT.

IF lwa_final-vbtyp EQ yss_cl_type_pool=>yss_c_o. "Credit memo
lwa_final-netwr = lwa_final-netwr * -1.
ENDIF.

* Calculate the summary totals
<lfs_hsn_summary>-net_amt   = <lfs_hsn_summary>-net_amt    + lwa_f
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-total_amt  + lwa_f
<lfs_hsn_summary>-total_qty = <lfs_hsn_summary>-total_qty  + lwa_f
<lfs_hsn_summary>-uom       = lwa_final-vrkme.
* Calculate the header totals
<lfs_hsn_header>-total_amt  = <lfs_hsn_header>-total_amt + lwa_fin
<lfs_hsn_header>-net_amt    = <lfs_hsn_header>-net_amt   + lwa_fin
<lfs_hsn_header>-total_qty  = <lfs_hsn_header>-total_qty + lwa_fin
<lfs_hsn_header>-uom        = lwa_final-vrkme.

* Condition tax details
READ TABLE lt_konv WITH KEY knumv = lwa_final-knumv kposn = lwa_fi
IF sy-subrc NE 0.
CONTINUE.
ENDIF.

lv_tabix = sy-tabix.

* Read the condition tax records to calculate the Overall totals and tax
LOOP AT lt_konv INTO DATA(lwa_konv) FROM lv_tabix.
IF lwa_konv-knumv NE lwa_final-knumv OR lwa_konv-kposn NE lwa_fi
EXIT.
ENDIF.
IF lwa_final-vbtyp EQ yss_cl_type_pool=>yss_c_o.  "Credit memo
lwa_konv-kwert = lwa_konv-kwert * -1.
ENDIF.

CASE lwa_konv-kschl.
WHEN 'JOIG'. "IGST
*        Item wise summary totals
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-total_amt +
<lfs_hsn_summary>-igst_amt  = <lfs_hsn_summary>-igst_amt  +

*        Header wise summary totals
<lfs_hsn_header>-total_amt = <lfs_hsn_header>-total_amt + lw
<lfs_hsn_header>-igst_amt  = <lfs_hsn_header>-igst_amt  + lw

WHEN 'JOCG'.  "CGST
*        Item wise summary totals
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-total_amt +
<lfs_hsn_summary>-cgst_amt  = <lfs_hsn_summary>-cgst_amt  +

*         Header wise summary totals
<lfs_hsn_header>-total_amt = <lfs_hsn_header>-total_amt + lw
<lfs_hsn_header>-cgst_amt  = <lfs_hsn_header>-cgst_amt  + lw

WHEN 'JOSG'.  "SGST
*        Item wise summary totals
<lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-total_amt +
<lfs_hsn_summary>-sgst_amt  = <lfs_hsn_summary>-sgst_amt  +

*         Header wise summary totals
<lfs_hsn_header>-total_amt = <lfs_hsn_header>-total_amt + lw
<lfs_hsn_header>-sgst_amt  = <lfs_hsn_header>-sgst_amt  + lw
WHEN OTHERS.
ENDCASE.
ENDLOOP.
ENDLOOP.



***    lt_marc_tmp = lt_marc.
***    DELETE ADJACENT DUPLICATES FROM lt_marc_tmp COMPARING steuc.
***
***    LOOP AT lt_marc_tmp INTO DATA(lwa_marc_tmp).
***
***      READ TABLE lt_marc WITH KEY steuc = lwa_marc_tmp-steuc TRANSPOR
***      IF sy-subrc NE 0.
***        CONTINUE.
***      ENDIF.
***      lv_tabix3 = sy-tabix.
***
***
***      LOOP AT lt_marc INTO DATA(lwa_marc) FROM lv_tabix3.
***        IF lwa_marc_tmp-steuc NE lwa_marc-steuc.
***          EXIT.
***        ENDIF.
***
***        AT NEW steuc.
**** Add HSN Header entry
***          APPEND INITIAL LINE TO ex_hsn_summary ASSIGNING FIELD-SYMBO
***          <lfs_hsn_header>-hsn_code = lwa_marc_tmp-steuc.
***          IF lwa_marc_tmp-steuc(2) EQ '99'.
***            <lfs_hsn_header>-item_type = 'Service'.
***          ELSE.
***            <lfs_hsn_header>-item_type = 'Goods'.
***          ENDIF.
***        ENDAT.
**** Read material number
***        READ TABLE lt_vbrp WITH KEY matnr = lwa_marc-matnr TRANSPORTI
***        IF sy-subrc NE 0.
***          CONTINUE.
***        ENDIF.
***        lv_tabix1 = sy-tabix.
***
**** Loop for each billing document based on the material number
***        LOOP AT lt_vbrp INTO DATA(lwa_vbrp_tmp) FROM lv_tabix1.
***          DATA(lwa_vbrp) = lwa_vbrp_tmp.
***
***          IF lwa_vbrp-matnr NE lwa_marc-matnr.
***            EXIT.
***          ENDIF.
***
***          AT NEW vrkme.
****  Add HSN summary details for each material
***            APPEND INITIAL LINE TO <lfs_hsn_header>-materials   ASSIG
***            <lfs_hsn_summary>-material = lwa_marc-matnr.
***
**** Read material description
***            READ TABLE lt_makt INTO DATA(lwa_makt) WITH KEY matnr = l
***            IF sy-subrc EQ 0.
***              <lfs_hsn_summary>-mat_desc = lwa_makt-maktx.
***            ENDIF.
***          ENDAT.
******          <lfs_hsn_summary>-bill_doc = lwa_vbrp-vbeln.
**** Header details
***          READ TABLE lt_vbrk INTO DATA(lwa_vbrk) WITH KEY vbeln = lwa
***          IF sy-subrc EQ 0.
***            IF lwa_vbrk-vbtyp EQ 'O'.  "Credit memo
***              lwa_vbrp-netwr = lwa_vbrp-netwr * -1.
***            ENDIF.
***
**** Calculate the summary totals
***            <lfs_hsn_summary>-net_amt   = <lfs_hsn_summary>-net_amt
***            <lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-total_amt
***            <lfs_hsn_summary>-total_qty = <lfs_hsn_summary>-total_qty
***            <lfs_hsn_summary>-uom = lwa_vbrp-vrkme.
**** Calculate the header totals
***            <lfs_hsn_header>-total_amt  = <lfs_hsn_header>-total_amt
***            <lfs_hsn_header>-net_amt    = <lfs_hsn_header>-net_amt
***            <lfs_hsn_header>-total_qty  = <lfs_hsn_header>-total_qty
***            <lfs_hsn_header>-uom = lwa_vbrp-vrkme.
***
****        Condition tax details
***            READ TABLE lt_konv WITH KEY knumv = lwa_vbrk-knumv kposn
***            IF sy-subrc NE 0.
***              CONTINUE.
***            ENDIF.
***
***            lv_tabix2 = sy-tabix.
***
**** Read the condition tax records to calculate the Overall totals and
***            LOOP AT lt_konv INTO DATA(lwa_konv) FROM lv_tabix2.
***              IF lwa_konv-knumv NE lwa_vbrk-knumv OR lwa_konv-kposn N
***                EXIT.
***              ENDIF.
***              IF lwa_vbrk-vbtyp EQ 'O'.  "Credit memo
***                lwa_konv-kwert = lwa_konv-kwert * -1.
***              ENDIF.
***
***              CASE lwa_konv-kschl.
***                WHEN 'JOIG'. "IGST
****                Item wise summary totals
***                  <lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-tot
***                  <lfs_hsn_summary>-igst_amt  = <lfs_hsn_summary>-igs
***
****                 Header wise summary totals
***                  <lfs_hsn_header>-total_amt = <lfs_hsn_header>-total
***                  <lfs_hsn_header>-igst_amt  = <lfs_hsn_header>-igst_
***
***                WHEN 'JOCG'.  "CGST
****                 Item wise summary totals
***                  <lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-tot
***                  <lfs_hsn_summary>-cgst_amt  = <lfs_hsn_summary>-cgs
***
****                 Header wise summary totals
***                  <lfs_hsn_header>-total_amt = <lfs_hsn_header>-total
***                  <lfs_hsn_header>-cgst_amt  = <lfs_hsn_header>-cgst_
***
***                WHEN 'JOSG'.  "SGST
****                 Item wise summary totals
***                  <lfs_hsn_summary>-total_amt = <lfs_hsn_summary>-tot
***                  <lfs_hsn_summary>-sgst_amt  = <lfs_hsn_summary>-sgs
***
****                 Header wise summary totals
***                  <lfs_hsn_header>-total_amt = <lfs_hsn_header>-total
***                  <lfs_hsn_header>-sgst_amt  = <lfs_hsn_header>-sgst_
***                WHEN OTHERS.
***              ENDCASE.
***            ENDLOOP.
***          ENDIF.
***        ENDLOOP.
***      ENDLOOP.
***      SORT <lfs_hsn_header>-materials BY material.
***    ENDLOOP.
***    SORT ex_hsn_summary BY hsn_code.
***    DELETE ex_hsn_summary WHERE uom EQ space.
ENDMETHOD.
SO_DASHBOARD_DETAILS
item
METHOD so_dashboard_details.

** TYPES Declaration
TYPES: lty_r_date   TYPE RANGE OF audat,
lty_r_period TYPE RANGE OF mcs0-spmon.

TYPES : lty_r_vrsio TYPE RANGE OF mcs0-vrsio,
lty_r_spmon TYPE RANGE OF mcs0-spmon,
lty_r_sptag TYPE RANGE OF mcs0-sptag,
lty_r_spwoc TYPE RANGE OF mcs0-spwoc.
TYPES : BEGIN OF lty_s001,
ssour   TYPE s001-ssour,
vrsio   TYPE s001-vrsio,
spmon   TYPE s001-spmon,
sptag   TYPE s001-sptag,
spwoc   TYPE s001-spwoc,
spbup   TYPE s001-spbup,
kunnr   TYPE s001-kunnr,
vkorg   TYPE s001-vkorg,
vtweg   TYPE s001-vtweg,
spart   TYPE s001-spart,
matnr   TYPE s001-matnr,
stwae   TYPE s001-stwae,
aenetwr TYPE s001-aenetwr,
umnetwr TYPE s001-umnetwr,
oauwe   TYPE s001-oauwe,
END OF lty_s001,
BEGIN OF lty_lips,
vbeln TYPE vbeln_vl,
posnr TYPE posnr_vl,
pstyv TYPE pstyv_vl,
lfimg TYPE lfimg,
vgbel TYPE vgbel,
vgpos TYPE vgpos,
END OF lty_lips,
BEGIN OF lty_vbeln,
vbeln TYPE vbeln_vl,
END OF lty_vbeln,
BEGIN OF lty_vbap,
vbeln  TYPE vbeln_va,
posnr  TYPE posnr_va,
netwr  TYPE netwr_ap,
kwmeng TYPE kwmeng,
END OF lty_vbap,
** TYPES for VBUP
BEGIN OF lty_vbup,
vbeln TYPE vbeln,
posnr TYPE posnr,
lfgsa TYPE lfgsa,
END OF lty_vbup,
BEGIN OF lty_vbfa,
vbelv TYPE vbeln_von,
posnv TYPE posnr_von,
rfmng TYPE rfmng,
END OF lty_vbfa.
** DATA declarations
DATA:           ls_date         TYPE yss_cl_type_pool=>yss_s_date,
ls_date1        TYPE yss_cl_type_pool=>yss_s_date,
lv_date         TYPE sy-datum,
lv_date1        TYPE sy-datum,
lt_so_list      TYPE yss_tt_so_list,
lo_exception    TYPE REF TO ycx_ss_exception,
lt_delry_list   TYPE yss_tt_del_header,
lt_open_bill    TYPE yss_tt_bill_list,
lv_count        TYPE i,
lt_cust_list    TYPE yss_tt_cust_list_details,
lv_period       TYPE spmon,
lr_period       TYPE lty_r_period,
ls_period       TYPE LINE OF lty_r_period,
lv_date_year    TYPE sy-datum,
lr_vrsio        TYPE lty_r_vrsio,
ls_vrsio        TYPE LINE OF lty_r_vrsio,
lr_spmon        TYPE lty_r_spmon,
ls_spmon        TYPE LINE OF lty_r_spmon,
lr_sptag        TYPE lty_r_sptag,
ls_sptag        TYPE LINE OF lty_r_sptag,
lr_spwoc        TYPE lty_r_spwoc,
ls_spwoc        TYPE LINE OF lty_r_spwoc,
lt_s001         TYPE STANDARD TABLE OF lty_s001,
lv_sum          TYPE mc_umnetwr,
lt_lips         TYPE STANDARD TABLE OF lty_lips,
lt_delry_no     TYPE STANDARD TABLE OF lty_vbeln,
ls_delry_no     TYPE lty_vbeln,
lt_vbap         TYPE STANDARD TABLE OF lty_vbap,
lv_netwr        TYPE netwr_ap,
lv_netwr_a      TYPE netwr_ap,
lv_fiscal_month TYPE monat,
lv_fiscal_year  TYPE gjahr,
lv_period_start TYPE dats,
lv_period_end   TYPE dats,
lv_year_prev    TYPE char4,
lv_year_next    TYPE char4,
lt_vbup         TYPE STANDARD TABLE OF lty_vbup,
lt_vbup1        TYPE STANDARD TABLE OF lty_vbup,
lt_vbap1        TYPE STANDARD TABLE OF lty_vbap,
lv_kwmeng       TYPE kwmeng,
lt_vbfa         TYPE STANDARD TABLE OF lty_vbfa.
** Local Constants
CONSTANTS:    lc_bill_type TYPE fkart VALUE 'ZFKS'.
** Field Symboldeclarations
FIELD-SYMBOLS: <lfs_delvry_list> TYPE yss_s_del_header,
<lfs_month_sales> TYPE yss_s_details_per_month,
<lfs_vbap1>       TYPE lty_vbap.
IF sy-datum+4(2) LE 03.
lv_period_start =  lv_year_prev  && '04' && '01'.
lv_period_end   = sy-datum+0(4) && '03' && '31'.
ELSE.
lv_period_start =  sy-datum+0(4)  && '04' && '01'.
lv_period_end   = lv_year_next && '03' && '31'.
ENDIF.

** Get the SO details for last 90 days from today
lv_date = sy-datum - '90'.
** Prepare date for one month
lv_date1 = sy-datum - '30'.
*<<<<<<Added by Abhishek 21/06/2018 start
IF lv_date LE lv_period_start.
lv_date = lv_period_start.
ENDIF.

IF lv_date1 LE lv_period_start.
lv_date1 = lv_period_start.
ENDIF.
*>>>>>>> End
** Prepare range for date and pass to below class method
ls_date-low    = lv_date.
ls_date-high   = sy-datum.
** Call method to get the open SO details
TRY.
CALL METHOD yss_cl_sd_process=>fetch_so_list
EXPORTING
*           im_clientid = im_clientid
im_date    = ls_date
*           im_status  = im_status
im_werks   = im_req_params-werks
IMPORTING
ex_so_list = lt_so_list.
CATCH ycx_ss_exception INTO lo_exception .
* Log the exception
lo_exception->log_exception( ).
* Prepare Return Message
ex_return = lo_exception->prepare_bapi_return( ).
ENDTRY.
IF lt_so_list[] IS NOT INITIAL.
** Total SO count
DELETE lt_so_list WHERE doc_category EQ text-031.
IF lt_so_list[] IS NOT INITIAL.
DELETE lt_so_list WHERE status_key EQ 'C'.
IF lt_so_list[] IS NOT INITIAL.
DESCRIBE TABLE lt_so_list LINES ex_open_so.
ENDIF.
ENDIF.
ENDIF.
CLEAR: lt_so_list,
ls_date.
** Prepare range for date and pass to below class method
ls_date-low    = lv_date1.
ls_date-high   = sy-datum.
** Call method to get the open SO details
TRY.
CALL METHOD yss_cl_sd_process=>fetch_so_list
EXPORTING
*           im_clientid = im_clientid
im_date    = ls_date
*           im_status  = im_status
im_werks   = im_req_params-werks
IMPORTING
ex_so_list = lt_so_list.
CATCH ycx_ss_exception INTO lo_exception .
* Log the exception
lo_exception->log_exception( ).
* Prepare Return Message
ex_return = lo_exception->prepare_bapi_return( ).
ENDTRY.
DELETE lt_so_list WHERE doc_category EQ text-031.
IF lt_so_list[] IS NOT INITIAL.
DELETE lt_so_list WHERE status_key EQ 'C'.
IF lt_so_list[] IS NOT INITIAL.
LOOP AT lt_so_list ASSIGNING FIELD-SYMBOL(<lfs_so_list>)
WHERE status_key EQ 'A'.
** Net value for SO where header status = A.
ex_open_order_value = ex_open_order_value +
<lfs_so_list>-net_amount.
ENDLOOP.
DELETE lt_so_list WHERE status_key EQ 'A'.
** Fetch sum of partialy SO
** Fetch the data from VBUP
IF lt_so_list IS NOT INITIAL.
SELECT vbeln
posnr
lfgsa
FROM vbup
INTO TABLE lt_vbup
FOR ALL ENTRIES IN lt_so_list
WHERE vbeln EQ lt_so_list-sales_doc.
IF sy-subrc = 0.
SORT lt_vbup BY vbeln.
DELETE lt_vbup WHERE lfgsa EQ 'C'.
IF lt_vbup[] IS NOT INITIAL.
lt_vbup1 = lt_vbup.
DELETE lt_vbup WHERE lfgsa EQ 'B'.
ENDIF.
ENDIF.
ENDIF.
** Fetch data from VBAP to get Net value
IF lt_vbup[] IS NOT INITIAL.
SELECT vbeln
posnr
netwr
kwmeng
FROM vbap
INTO TABLE lt_vbap1
FOR ALL ENTRIES IN lt_vbup
WHERE vbeln EQ lt_vbup-vbeln
AND posnr EQ lt_vbup-posnr.
IF sy-subrc = 0.
SORT lt_vbap1.
** Sum the NETWR
LOOP AT lt_vbap1 ASSIGNING <lfs_vbap1>.
lv_netwr_a = lv_netwr_a + <lfs_vbap1>-netwr.
ENDLOOP.
ENDIF.
ENDIF.
* Delete the table lt_vbup where status =  B.
DELETE lt_vbup1 WHERE lfgsa EQ 'A'.
IF lt_vbup1[] IS NOT INITIAL.
** Fetch the data from VBFA
SELECT vbelv
posnv
rfmng
FROM vbfa
INTO TABLE lt_vbfa
FOR ALL ENTRIES IN lt_vbup1
WHERE vbelv EQ lt_vbup1-vbeln
AND posnv EQ lt_vbup1-posnr
AND vbtyp_n EQ 'J'.
IF sy-subrc = 0.
SORT lt_vbfa BY vbelv posnv.
DELETE lt_vbfa WHERE rfmng IS INITIAL.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
IF lt_vbfa[] IS NOT INITIAL.
SELECT vbeln
posnr
netwr
kwmeng
FROM vbap
INTO TABLE lt_vbap
FOR ALL ENTRIES IN lt_vbfa
WHERE vbeln EQ lt_vbfa-vbelv
AND posnr EQ lt_vbfa-posnv.
IF sy-subrc = 0.
CLEAR lv_netwr.
LOOP AT lt_vbap ASSIGNING <lfs_vbap1>.
READ TABLE lt_vbfa ASSIGNING FIELD-SYMBOL(<lfs_vbfa>)
WITH KEY vbelv = <lfs_vbap1>-vbeln
posnv = <lfs_vbap1>-posnr
BINARY SEARCH.
IF sy-subrc = 0.
lv_kwmeng = <lfs_vbap1>-kwmeng - <lfs_vbfa>-rfmng.
lv_netwr = ( ( <lfs_vbap1>-netwr * lv_kwmeng ) / <lfs_vbap1>
ENDIF.
CLEAR: lv_kwmeng.
ENDLOOP.
ENDIF.
ENDIF.
**Formula: VBAP-KWMENG-VBFA-RFMNG = Pending Qty.
**Formula1: VBAP-NETWR*Pending Qty/VBAP-KWMENG = NET Amount
** Send total open value
ex_open_order_value = ex_open_order_value +
lv_netwr +
lv_netwr_a.
** Get Open Delivery Count (3 months), Billing Count(3 months)
** and billed volume (one month)
TRY.
CALL METHOD yss_cl_sd_process=>get_delivery_list
EXPORTING
im_req_params    = im_req_params
im_from_date     = lv_date
im_to_date       = sy-datum
*           im_ship_to       =
IMPORTING
ex_delivery_list = lt_delry_list.
CATCH ycx_ss_exception INTO lo_exception.
* Log the exception
lo_exception->log_exception( ).
* Prepare Return Message
ex_return = lo_exception->prepare_bapi_return( ).
ENDTRY.
IF lt_delry_list[] IS NOT INITIAL.
lv_count = 0.
** Count for Open Delivery TEXT is Goods to be issued
LOOP AT lt_delry_list ASSIGNING <lfs_delvry_list>
WHERE status EQ text-014
AND  doc_category EQ text-044.
lv_count = lv_count + 1.
ENDLOOP.
ex_open_dery_count = lv_count.
** Count for Open Billing and text is To be billed
CLEAR lv_count.
LOOP AT lt_delry_list ASSIGNING <lfs_delvry_list>
WHERE status EQ text-029
AND  doc_category EQ text-044.
lv_count = lv_count + 1.
ls_delry_no-vbeln = <lfs_delvry_list>-del_num.
ENDLOOP.
ex_open_billing_count = lv_count.
ENDIF.
CLEAR lt_delry_list.
** Call above class methos to get the open delivery count
TRY.
CALL METHOD yss_cl_sd_process=>get_delivery_list
EXPORTING
im_req_params    = im_req_params
im_from_date     = lv_date1
im_to_date       = sy-datum
*           im_ship_to       =
IMPORTING
ex_delivery_list = lt_delry_list.
CATCH ycx_ss_exception INTO lo_exception.
* Log the exception
lo_exception->log_exception( ).
* Prepare Return Message
ex_return = lo_exception->prepare_bapi_return( ).
ENDTRY.
LOOP AT lt_delry_list ASSIGNING <lfs_delvry_list>
WHERE status EQ text-029
AND  doc_category EQ text-044.
*        lv_count = lv_count + 1.
ls_delry_no-vbeln = <lfs_delvry_list>-del_num.
APPEND ls_delry_no TO lt_delry_no.
CLEAR ls_delry_no.
ENDLOOP.
** Total open Deliery amount which are hold
IF lt_delry_no IS NOT INITIAL.
SORT lt_delry_no.
** Fetch VGBEL and VGPOS from LIPS based on delivery number
SELECT vbeln
posnr
pstyv
lfimg
vgbel
vgpos
FROM lips
INTO TABLE lt_lips
FOR ALL ENTRIES IN lt_delry_no
WHERE vbeln EQ lt_delry_no-vbeln.
IF sy-subrc EQ 0 AND lt_lips[] IS NOT INITIAL.
SORT lt_lips BY vgbel vgpos.
DELETE lt_lips WHERE lfimg IS INITIAL.
IF lt_lips[] IS NOT INITIAL.
** Fetch NETWR from VBAP based on VGBEL and VGPOS
SELECT vbeln
posnr
netwr
kwmeng
FROM vbap
INTO TABLE lt_vbap
FOR ALL ENTRIES IN lt_lips
WHERE vbeln EQ lt_lips-vgbel
AND posnr EQ lt_lips-vgpos.
IF sy-subrc = 0.
SORT lt_vbap BY vbeln.
CLEAR lv_netwr.
LOOP AT lt_lips ASSIGNING FIELD-SYMBOL(<lfs_lips>).
READ TABLE lt_vbap ASSIGNING FIELD-SYMBOL(<lfs_vbap>)
WITH KEY vbeln = <lfs_lips>-vgbel
posnr = <lfs_lips>-vgpos
BINARY SEARCH.
IF sy-subrc = 0.
lv_netwr = ( ( <lfs_vbap>-netwr * <lfs_lips>-lfimg ) / <
ENDIF.
ENDLOOP.
ex_delivery_hold = lv_netwr.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
* From & To Date to be passed in method
ls_date1-low    = lv_date1.
ls_date1-high   = sy-datum.
** Get billed amount for one month
TRY.
CALL METHOD yss_cl_sd_process=>get_billing_list
EXPORTING
*           im_clientid  = im_clientid
im_date      = ls_date1
im_bupla     = im_req_params-bupla
IMPORTING
ex_bill_list = lt_open_bill.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ENDTRY.
IF lt_open_bill[] IS NOT INITIAL.
LOOP AT lt_open_bill ASSIGNING FIELD-SYMBOL(<lfs_open_bill>)
WHERE bill_type EQ lc_bill_type.
ex_billed = ex_billed + <lfs_open_bill>-net_value.
ENDLOOP.
ENDIF.
** Fetch total sales value per month
** Firstly get customer list based on plant
*Get customer list
TRY.
CALL METHOD yss_cl_sd_process=>get_customer_list
EXPORTING
im_req_params    = im_req_params
IMPORTING
ex_customer_list = lt_cust_list
ex_return        = ex_return.
CATCH ycx_ss_exception INTO lo_exception.
lo_exception->log_exception( ).
ex_return = lo_exception->prepare_bapi_return( ).
ENDTRY.

CALL FUNCTION 'GET_CURRENT_YEAR'
EXPORTING
bukrs = 'RMSS'
date  = sy-datum
IMPORTING
currm = lv_fiscal_month
curry = lv_fiscal_year.
*       PREVM =
*       PREVY =
IF sy-subrc = 0.
** Current fiscal year month
CONCATENATE lv_fiscal_year lv_fiscal_month INTO lv_period.
ls_period-sign   = 'I'.
ls_period-option = 'BT'.
ls_period-high    = lv_period.
CLEAR lv_period.
** First month of Fiscal year
CONCATENATE lv_fiscal_year '01' INTO lv_period.
ls_period-sign   = 'I'.
ls_period-option = 'BT'.
ls_period-low   = lv_period.
APPEND ls_period TO lr_period.
ENDIF.
** From above customer list fetch sales from table S001
** Input is for Plant starts with S then
IF lt_cust_list[] IS NOT INITIAL.
ls_vrsio-sign   = 'I'.
ls_vrsio-option = 'EQ'.
ls_vrsio-low    = '000'.
ls_vrsio-high   = '000'.
APPEND ls_vrsio TO lr_vrsio.

ls_spmon-sign   = 'I'.
ls_spmon-option = 'EQ'.
ls_spmon-low    = '000000'.
ls_spmon-high   = '000000'.
APPEND ls_spmon TO lr_spmon.

ls_sptag-sign   = 'I'.
ls_sptag-option = 'EQ'.
ls_sptag-low    = '00000000'.
ls_sptag-high   = '00000000'.
APPEND ls_sptag TO lr_sptag.

ls_spwoc-sign   = 'I'.
ls_spwoc-option = 'EQ'.
ls_spwoc-low    = '000000'.
ls_spwoc-high   = '000000'.
APPEND ls_spwoc TO lr_spwoc.

IF im_req_params-werks+0(1) = yss_cl_type_pool=>yss_c_s.
*Customer Statistics
SELECT ssour
vrsio
spmon
sptag
spwoc
spbup
kunnr
vkorg
vtweg
spart
matnr
stwae
aenetwr
umnetwr
oauwe
FROM s001
INTO TABLE lt_s001
FOR ALL ENTRIES IN lt_cust_list
WHERE ssour = space
AND   vrsio IN lr_vrsio
AND   spmon IN lr_spmon
AND   sptag IN lr_sptag
AND   spwoc IN lr_spwoc
AND   spbup IN lr_period
AND   kunnr = lt_cust_list-cust_id
AND   vkorg = yss_cl_type_pool=>yss_c_rmss
AND   vtweg = yss_cl_type_pool=>yss_c_ds
AND   spart = yss_cl_type_pool=>yss_c_md.
IF sy-subrc = 0.
SORT lt_s001 BY spbup DESCENDING.
LOOP AT lt_s001 ASSIGNING FIELD-SYMBOL(<lfs_s001>).
AT NEW spbup.
APPEND INITIAL LINE TO ex_month_sales
ASSIGNING <lfs_month_sales>.
<lfs_month_sales>-spbup = <lfs_s001>-spbup.
ENDAT.
lv_sum = lv_sum + <lfs_s001>-umnetwr.
AT END OF spbup.
<lfs_month_sales>-sales = lv_sum.
CLEAR lv_sum.
ENDAT.
ENDLOOP.
** plant code
ex_plant_code = im_req_params-werks.
ENDIF.
ELSE.
ENDIF.
ENDIF.

ENDMETHOD.
GET_TALLY_DOWNLOAD
item
METHOD get_tally_download.
TYPES: BEGIN OF lty_vbrk,
vbeln TYPE vbeln_vf,
fkdat TYPE fkdat,
knumv TYPE knumv,
END OF lty_vbrk,

BEGIN OF lty_vbrp,
vbeln TYPE vbeln_vf,
posnr TYPE posnr_vf,
fkimg TYPE fkimg,
vrkme TYPE vrkme,
netwr TYPE netwr_fp,
vgbel TYPE vgbel,
vgpos TYPE vgpos,
aubel TYPE vbeln_va,
matnr TYPE matnr,
charg TYPE charg_d,
werks TYPE werks_d,
mwsbp TYPE mwsbp,
END OF lty_vbrp,

BEGIN OF lty_vbpa,
vbeln TYPE vbeln,
posnr TYPE posnr,
parvw TYPE parvw,
kunnr TYPE kunnr,
adrnr TYPE adrnr,
xcpdk TYPE xcpdk,
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,
name1      TYPE ad_name1,
home_city  TYPE ad_city3,
region     TYPE regio,
END OF lty_adrc,

BEGIN OF lty_kna1,
kunnr TYPE kunnr,
stcd3 TYPE stcd3,
END OF lty_kna1,

BEGIN OF lty_makt,
matnr TYPE matnr,
maktx TYPE maktx,
END OF lty_makt,

BEGIN OF lty_t001w,
werks TYPE werks_d,
name1 TYPE name1,
END OF lty_t001w,

BEGIN OF lty_marc,
matnr TYPE matnr,
werks TYPE werks_d,
steuc TYPE steuc,
END OF lty_marc,

BEGIN OF lty_konv,
knumv TYPE knumv,
kposn TYPE kposn,
kschl TYPE kscha,
kbetr TYPE kbetr,
kwert TYPE kwert,
koaid TYPE koaid,
END OF lty_konv,

BEGIN OF lty_lips,
vbeln TYPE vbeln_vl,
posnr TYPE posnr_vl,
hsdat TYPE hsdat,
vfdat TYPE vfdat,
END OF lty_lips,

BEGIN OF lty_likp,
vbeln TYPE vbeln_vl,
lfdat TYPE lfdat,
END OF lty_likp,

BEGIN OF lty_vbak,
vbeln TYPE vbeln_va,
audat TYPE audat,
END OF lty_vbak.


DATA : lt_vbrk  TYPE STANDARD TABLE OF lty_vbrk,
lt_vbrp  TYPE STANDARD TABLE OF lty_vbrp,
lt_vbpa  TYPE STANDARD TABLE OF lty_vbpa,
lt_adrc  TYPE STANDARD TABLE OF lty_adrc,
lt_kna1  TYPE STANDARD TABLE OF lty_kna1,
lt_makt  TYPE STANDARD TABLE OF lty_makt,
lt_marc  TYPE STANDARD TABLE OF lty_marc,
lt_konv  TYPE STANDARD TABLE OF lty_konv,
lt_lips  TYPE STANDARD TABLE OF lty_lips,
lt_likp  TYPE STANDARD TABLE OF lty_likp,
lt_vbak  TYPE STANDARD TABLE OF lty_vbak,
lt_t005u TYPE STANDARD TABLE OF t005u,
lt_t001w TYPE STANDARD TABLE OF lty_t001w. "t001w.

CLEAR:ex_tally_dwnld.
* Fetch the Billing header details
SELECT vbeln fkdat knumv FROM vbrk
INTO TABLE lt_vbrk
WHERE fkdat IN im_date_range".
AND bupla EQ im_req_params-werks
AND fksto EQ abap_false
AND vbtyp NOT IN ('N','S')
ORDER BY fkdat ASCENDING.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.

* Get the condition types
SELECT knumv kposn kschl kbetr kwert koaid FROM konv
INTO TABLE lt_konv
FOR ALL ENTRIES IN lt_vbrk
WHERE knumv EQ lt_vbrk-knumv.
IF sy-subrc EQ 0.
SORT lt_konv BY knumv kposn.
ENDIF.

* Fetch the billing item details
SELECT vbeln posnr fkimg vrkme netwr vgbel vgpos aubel
matnr charg werks mwsbp FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln EQ lt_vbrk-vbeln.
IF sy-subrc EQ 0.

*     Get material description details
SELECT matnr maktx FROM makt
INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr EQ lt_vbrp-matnr.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.

*   Get the plant name details
SELECT werks name1 FROM t001w
INTO TABLE lt_t001w
FOR ALL ENTRIES IN lt_vbrp
WHERE werks EQ lt_vbrp-werks.
IF sy-subrc EQ 0.
SORT lt_t001w BY werks.
ENDIF.

*   Get the HSN code details
SELECT matnr werks steuc FROM marc
INTO TABLE lt_marc
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr = lt_vbrp-matnr
AND werks = lt_vbrp-werks.
IF sy-subrc EQ 0.
SORT lt_marc BY matnr werks.
ENDIF.

*   Get the Delivery order Mfg.date and Date of expiry
SELECT vbeln posnr hsdat vfdat FROM lips
INTO TABLE lt_lips
FOR ALL ENTRIES IN lt_vbrp
WHERE vbeln EQ lt_vbrp-vgbel
AND posnr EQ lt_vbrp-vgpos.
IF sy-subrc EQ 0.
SORT lt_lips BY vbeln posnr.
ENDIF.

*  Get the packing slip date
SELECT vbeln lfdat FROM likp INTO TABLE lt_likp
FOR ALL ENTRIES IN lt_vbrp
WHERE vbeln EQ lt_vbrp-vgbel.
IF sy-subrc EQ 0.
SORT lt_likp BY vbeln.
ENDIF.

* Get Order date.
SELECT vbeln audat FROM vbak INTO TABLE lt_vbak
FOR ALL ENTRIES IN lt_vbrp
WHERE vbeln EQ lt_vbrp-aubel.
IF sy-subrc EQ 0.
SORT lt_vbak BY vbeln.
ENDIF.
ENDIF.

* Get the address number based on the Sales and Distribution Document Nu
SELECT vbeln posnr parvw kunnr adrnr xcpdk FROM vbpa INTO TABLE lt_v
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln EQ lt_vbrk-vbeln
AND parvw EQ 'WE'.
IF sy-subrc EQ 0 .
SORT lt_vbpa BY vbeln.
*  For OTC customer get GSTIN from home_city
SELECT addrnumber name1 home_city region
FROM adrc INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.

*    Get the State name based on the REGION(E.g. 36 - Telangana)
SELECT * FROM t005u INTO TABLE lt_t005u
FOR ALL ENTRIES IN lt_adrc
WHERE spras EQ sy-langu
AND land1 EQ 'IN'
AND bland EQ lt_adrc-region.
IF sy-subrc EQ 0.
SORT lt_t005u BY bland.
ENDIF.

ENDIF.

* For normal customer get GSTIN from STCD3
SELECT kunnr stcd3 FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_vbpa
WHERE kunnr EQ lt_vbpa-kunnr.
IF sy-subrc EQ 0.
SORT lt_kna1 BY kunnr.
ENDIF.
ENDIF.

LOOP AT lt_vbrp INTO DATA(ls_vbrp).
APPEND INITIAL LINE TO ex_tally_dwnld ASSIGNING FIELD-SYMBOL(<lfs_

READ TABLE lt_vbrk INTO DATA(ls_vbrk) WITH KEY vbeln = ls_vbrp-vbe
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-invoice_num  = ls_vbrk-vbeln.
<lfs_tally_dwnld>-invoice_date = ls_vbrk-fkdat.
ENDIF.

<lfs_tally_dwnld>-so_num    = ls_vbrp-aubel.
<lfs_tally_dwnld>-batch_num = ls_vbrp-charg.
<lfs_tally_dwnld>-quantity  = ls_vbrp-fkimg.
<lfs_tally_dwnld>-uom       = ls_vbrp-vrkme.
<lfs_tally_dwnld>-total_amt = ls_vbrp-netwr + ls_vbrp-mwsbp.
<lfs_tally_dwnld>-pack_num  = ls_vbrp-vgbel.

READ TABLE lt_makt INTO DATA(ls_makt) WITH KEY matnr = ls_vbrp-mat
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-mat_desc = ls_makt-maktx.
ENDIF.

READ TABLE lt_vbpa INTO DATA(ls_vbpa) WITH KEY vbeln = ls_vbrk-vbe
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-sold_to_party = ls_vbpa-kunnr.
ENDIF.

READ TABLE lt_t001w INTO DATA(ls_t001w) WITH KEY werks = ls_vbrp-w
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-plant_name = ls_t001w-name1.
ENDIF.

READ TABLE lt_marc INTO DATA(ls_marc) WITH KEY matnr = ls_vbrp-mat
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-hsn_code = ls_marc-steuc.
ENDIF.

READ TABLE lt_adrc INTO DATA(ls_adrc) WITH KEY addrnumber = ls_vbp
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-sold_to_name = ls_adrc-name1.
READ TABLE lt_t005u INTO DATA(ls_t005u) WITH KEY bland = ls_adrc
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-state_code = ls_t005u-bland.
<lfs_tally_dwnld>-state_name = ls_t005u-bezei.
ENDIF.
ENDIF.

*     If it is one time customer
IF ls_vbpa-xcpdk IS NOT INITIAL.
<lfs_tally_dwnld>-gstin = ls_adrc-home_city.
ELSE.
READ TABLE lt_kna1 INTO DATA(ls_kna1) WITH KEY kunnr = ls_vbpa-k
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-gstin = ls_kna1-stcd3.
ENDIF.
ENDIF.

READ TABLE lt_lips INTO DATA(ls_lips) WITH KEY vbeln = ls_vbrp-vgb
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-mfg_date = ls_lips-hsdat.
<lfs_tally_dwnld>-exp_date = ls_lips-vfdat.
ENDIF.

READ TABLE lt_likp INTO DATA(ls_likp) WITH KEY vbeln = ls_vbrp-vgb
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-pack_date = ls_likp-lfdat.
ENDIF.

READ TABLE lt_vbak INTO DATA(ls_vbak) WITH KEY vbeln = ls_vbrp-aub
IF sy-subrc EQ 0.
<lfs_tally_dwnld>-so_date = ls_vbak-audat.
ENDIF.

* Populate tax values
READ TABLE lt_konv WITH KEY knumv = ls_vbrk-knumv kposn = ls_vbrp-
TRANSPORTING NO FIELDS BINARY SEARCH.
IF sy-subrc EQ 0.
DATA(lv_index) = sy-tabix.

LOOP AT lt_konv INTO DATA(ls_konv) FROM lv_index.
IF ls_konv-knumv NE ls_vbrk-knumv OR ls_konv-kposn NE ls_vbrp-
EXIT.
ENDIF.
CASE ls_konv-kschl.
WHEN 'ZPRO'.
<lfs_tally_dwnld>-rate      = ls_konv-kbetr.
<lfs_tally_dwnld>-net_price = ls_konv-kwert.
WHEN 'ZPER' OR 'ZVAL' OR 'ZSVL' OR 'ZSPE'.
<lfs_tally_dwnld>-discount = <lfs_tally_dwnld>-discount +
WHEN 'JOSG'.
CASE ls_konv-kbetr.
WHEN 25.
<lfs_tally_dwnld>-sgst_2  = ls_konv-kwert.
WHEN 60.
<lfs_tally_dwnld>-sgst_6  = ls_konv-kwert.
WHEN 90.
<lfs_tally_dwnld>-sgst_9  = ls_konv-kwert.
WHEN 140.
<lfs_tally_dwnld>-sgst_14 = ls_konv-kwert.
WHEN OTHERS.
ENDCASE.
<lfs_tally_dwnld>-gst_tax = <lfs_tally_dwnld>-gst_tax + ls
WHEN 'JOCG'.
CASE ls_konv-kbetr.
WHEN 25.
<lfs_tally_dwnld>-cgst_2  = ls_konv-kwert.
WHEN 60.
<lfs_tally_dwnld>-cgst_6  = ls_konv-kwert.
WHEN 90.
<lfs_tally_dwnld>-cgst_9  = ls_konv-kwert.
WHEN 140.
<lfs_tally_dwnld>-cgst_14 = ls_konv-kwert.
WHEN OTHERS.
ENDCASE.
<lfs_tally_dwnld>-gst_tax = <lfs_tally_dwnld>-gst_tax + ls
WHEN 'JOIG'.
CASE ls_konv-kbetr.
WHEN 50.
<lfs_tally_dwnld>-igst_5  = ls_konv-kwert.
WHEN 120.
<lfs_tally_dwnld>-igst_12 = ls_konv-kwert.
WHEN 180.
<lfs_tally_dwnld>-igst_18 = ls_konv-kwert.
WHEN 280.
<lfs_tally_dwnld>-igst_28 = ls_konv-kwert.
WHEN OTHERS.
ENDCASE.
<lfs_tally_dwnld>-gst_tax = <lfs_tally_dwnld>-gst_tax + ls
WHEN OTHERS.
ENDCASE.
ENDLOOP.
<lfs_tally_dwnld>-gst_tax = <lfs_tally_dwnld>-gst_tax / 10.
ENDIF.

ENDLOOP.

IF ex_tally_dwnld IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>not_found.
ENDIF.




ENDMETHOD.
FIND_CUSTOMERS_SHIPTOPARTY
item
METHOD find_customers_shiptoparty.
*-----------------------------------------------------------------------
*                    A D M I N I S T R A T I O N
*-----------------------------------------------------------------------
* Organization: Incresol Software Services Private Limited
* Created by  :
* Created on  :
* Description : Generic method to
*-----------------------------------------------------------------------
*                       C H A N G E    L O G
*-----------------------------------------------------------------------
* <Changed by> | <Changed on> | <Change ID> like USERNAME.DDMMYY
* <Description of change>
*-----------------------------------------------------------------------
DATA : lt_cust_lst  TYPE yss_tt_cust,
lt_knvp      TYPE TABLE OF knvp,
lv_vtweg     TYPE vtweg,
lo_exception TYPE REF TO ycx_ss_exception.

TRY.
CALL METHOD yss_cl_sd_process=>find_customers
EXPORTING
im_req_params = im_req_params
im_customer   = im_customer
IMPORTING
ex_cust_list  = lt_cust_lst.
CATCH ycx_ss_exception INTO lo_exception.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>customer_details_not_found.
ENDTRY.

CALL METHOD get_dist_channel
EXPORTING
im_werks = im_req_params-werks
IMPORTING
ex_vtweg = lv_vtweg.
*    DELETE lt_cust_lst WHERE cust_id NE im_soldtoparty.
CHECK lt_cust_lst IS NOT INITIAL.
SELECT * FROM knvp
INTO TABLE lt_knvp
FOR ALL ENTRIES IN lt_cust_lst
WHERE kunnr = im_soldtoparty  AND
vkorg = yss_cl_type_pool=>yss_c_rmss AND
vtweg = lv_vtweg AND
spart = yss_cl_type_pool=>yss_c_md AND
parvw = 'WE' AND
kunn2 = lt_cust_lst-cust_id .

DELETE lt_knvp WHERE kunnr NE im_soldtoparty.
IF lt_knvp IS NOT INITIAL.
**Get name for customers
SELECT kunnr name1
FROM kna1
INTO TABLE ex_cust_list
FOR ALL ENTRIES IN lt_knvp
WHERE kunnr = lt_knvp-kunn2.
IF sy-subrc EQ 0.
**Do nothing
ENDIF.
ENDIF.
IF ex_cust_list IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>customer_details_not_found.
ENDIF.
ENDMETHOD.
GET_SALES_ANALYSIS
item
METHOD get_sales_analysis.
TYPES:
BEGIN OF lty_vbak,
vbeln TYPE vbeln_va,           "Sales Document
audat TYPE audat,              "Document Date (Date Received/Sen
kunnr TYPE kunag,              "Sold to party
bstzd TYPE bstzd,              "Purchase order number supplement
END OF lty_vbak,

BEGIN OF lty_vbap,
vbeln    TYPE vbeln_va,        "Sales Document
posnr    TYPE posnr_va,        "Item Details
matnr    TYPE matnr,           "Material number
matkl    TYPE matkl,           "Material Group
kwmeng   TYPE kwmeng,          "Quantity
vrkme    TYPE vrkme,           "Sale unit
werks    TYPE werks_d,         "plant
netwr    TYPE netwr_ap,        "Net value of the order item
mvgr1    TYPE mvgr1,           "Material group
oid_ship TYPE kunwe,           "Ship-to party
END OF lty_vbap,

BEGIN OF lty_vbpa,
vbeln TYPE vbeln,              "Sales Document
kunnr TYPE kunnr,              "Sold to party
adrnr TYPE adrnr,              "Address number
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum,    "Address number
name1      TYPE ad_name1,      "customer name
END OF lty_adrc,

BEGIN OF lty_vbfa,
vbelv   TYPE vbfa-vbelv,       "Preceding sales and distribution
posnv   TYPE vbfa-posnv,       "Preceding item of an SD document
vbeln   TYPE vbfa-vbeln,       "Subsequent sales and distributio
posnn   TYPE vbfa-posnn,       "Subsequent item of an SD documen
vbtyp_n TYPE vbfa-vbtyp_n,     "Document category of subsequent
rfmng   TYPE vbfa-rfmng,       "Referenced quantity in base unit
rfwrt   TYPE vbfa-rfwrt,       "Reference value
matnr   TYPE  matnr,           "Material Number
END OF lty_vbfa,

BEGIN OF lty_vbrk,
vbeln TYPE vbeln_vf,           "Billing Document
vbtyp TYPE vbtyp,              "Billing Type
fkdat	TYPE fkdat,	             "Billing date
kunag	TYPE kunag,	             "Sold-to party
fksto TYPE fksto,              "Billing document is cancelled
bupla TYPE bupla,	             "Business Place
END OF lty_vbrk,

BEGIN OF lty_makt,
matnr TYPE  matnr,             "Material Number
maktg TYPE  maktg,             "Material description in upper ca
END OF lty_makt,

BEGIN OF lty_t023t,
matkl TYPE  matkl,             "Material Group
wgbez TYPE wgbez,              "Material Group Description
END OF lty_t023t,

BEGIN OF lty_vbrp,
vbeln      TYPE vbeln_vf,      "Billing Document
posnr      TYPE posnr_vf,      "Billing item
fkimg      TYPE fkimg,         "Actual Invoiced Quantity
netwr      TYPE netwr_fp,      "Net value of the billing item
matnr      TYPE matnr,         "Material
matkl	     TYPE matkl,         "Material Group
werks      TYPE werks_d,       "Plant
mvgr1      TYPE mvgr1,         "Material group 1
vtweg_auft TYPE	vtweg_auft,	   "Distribution channel of sales or
END OF lty_vbrp,

BEGIN OF lty_vbrp1,
vbeln      TYPE vbeln_vf,      "Billing Document
posnr      TYPE posnr_vf,      "Billing item
matnr      TYPE matnr,         "Material
mvgr1      TYPE mvgr1,         "Material group 1
fkimg      TYPE fkimg,         "Actual Invoiced Quantity
netwr      TYPE netwr_fp,      "Net value of the billing item
matkl	     TYPE matkl,         "Material Group
vtweg_auft TYPE  vtweg_auft,   "Distribution channel of sales or
END OF lty_vbrp1,

BEGIN OF lty_mvke,
matnr TYPE matnr,              "Material number
vkorg TYPE vkorg,              "Sales Organization
vtweg TYPE vtweg,              "Distribution Channel
mvgr1 TYPE mvgr1,              "material group
END OF lty_mvke,

BEGIN OF lty_plant,
dealer_code	   TYPE	kunag,
mat_grp        TYPE matkl,
material_code	 TYPE	matnr,
dealer_name	   TYPE	name1_gp,
material_name	 TYPE	maktg,
incoming_qty   TYPE mc_aemenge,
sales_qty	     TYPE	mc_ummenge,
open_qty       TYPE mc_oaume,
mat_grp_desc   TYPE bezei40,
incoming_price TYPE mc_aenetwr,
sales_price	   TYPE	mc_umnetwr,
open_price     TYPE mc_oauwe,
plant          TYPE  werks_d,
vbeln          TYPE vbeln_vf,  "Billing Document
posnr          TYPE posnr_vf,  "Billing item
END OF lty_plant.


DATA:
lt_vbak     TYPE STANDARD TABLE OF lty_vbak,
lt_vbap     TYPE STANDARD TABLE OF lty_vbap,
lt_vbpa     TYPE STANDARD TABLE OF lty_vbpa,
lt_vbpa1    TYPE STANDARD TABLE OF lty_vbpa,
lt_vbrk     TYPE STANDARD TABLE OF lty_vbrk,
lt_vbrk1    TYPE STANDARD TABLE OF lty_vbrk,
lt_vbfa     TYPE STANDARD TABLE OF lty_vbfa,
lt_adrc     TYPE STANDARD TABLE OF lty_adrc,
lt_adrc1    TYPE STANDARD TABLE OF lty_adrc,
lt_mvke     TYPE STANDARD TABLE OF lty_mvke,
lt_mvke1    TYPE STANDARD TABLE OF lty_mvke,
lt_makt     TYPE STANDARD TABLE OF lty_makt,
lt_makt1    TYPE STANDARD TABLE OF lty_makt,
lt_tvm1t    TYPE STANDARD TABLE OF tvm1t,
lt_tvm1t1   TYPE STANDARD TABLE OF tvm1t,
lt_vbrp     TYPE STANDARD TABLE OF lty_vbrp,
lt_vbrp1    TYPE STANDARD TABLE OF lty_vbrp1,
lt_plant    TYPE TABLE OF lty_plant,
lt_plant3   TYPE TABLE OF lty_plant,
lt_plant1   TYPE STANDARD TABLE OF lty_plant,
lt_mat_grp  TYPE STANDARD TABLE OF selopt,
lwa_plant   TYPE  lty_plant,
lv_vtweg    TYPE vtweg,
lv_quantity TYPE rfmng,
lv_index    TYPE sy-tabix,
lv_quan     TYPE kwmeng,
lv_price    TYPE netwr.


IF im_werks+0(1) = yss_cl_type_pool=>yss_c_s.
lv_vtweg = yss_cl_type_pool=>yss_c_ds.
ELSEIF im_werks+0(1) = yss_cl_type_pool=>yss_c_k.
lv_vtweg = yss_cl_type_pool=>yss_c_dh.
ENDIF.

IF im_mat_grp IS NOT INITIAL.
APPEND INITIAL LINE TO lt_mat_grp ASSIGNING FIELD-SYMBOL(<lfs_mat>
<lfs_mat>-sign   = 'I'.
<lfs_mat>-option = 'EQ'.
<lfs_mat>-low    = im_mat_grp.
ENDIF.

* Get sales order header details
SELECT
vbeln
audat
kunnr
bstzd
FROM vbak
INTO TABLE lt_vbak
WHERE vbtyp EQ yss_cl_type_pool=>yss_c_c
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg EQ lv_vtweg
AND spart EQ yss_cl_type_pool=>yss_c_md
AND kunnr IN im_kunnr
AND audat IN im_date
AND bstzd EQ im_werks.
IF sy-subrc NE 0.
CLEAR:lt_vbak.
ENDIF.
SORT:
lt_vbak BY vbeln.

IF lt_vbak IS NOT INITIAL.
* Fetch sales order item details
SELECT
vbeln
posnr
matnr
matkl
kwmeng
vrkme
werks
netwr
mvgr1                           "MVGR1 - Material group
FROM vbap
INTO TABLE lt_vbap
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND werks EQ im_werks
AND matnr IN im_matnr
AND mvgr1 IN lt_mat_grp.
IF sy-subrc EQ 0.
SORT:
lt_vbap BY vbeln
posnr
matnr.
*   Get linked documents and quantities & amounts
SELECT
vbelv
posnv
vbeln
posnn
vbtyp_n
rfmng
rfwrt
matnr
INTO TABLE lt_vbfa
FROM vbfa
FOR ALL ENTRIES IN lt_vbap
WHERE vbelv = lt_vbap-vbeln
AND  posnv = lt_vbap-posnr
AND  vbtyp_n = yss_cl_type_pool=>yss_c_m.
IF sy-subrc EQ 0.
SORT: lt_vbfa BY vbelv posnv vbeln posnn.
*   Get the Billing header details regarding the Order status
SELECT
vbeln
vbtyp
fkdat
kunag
fksto
bupla
FROM vbrk
INTO TABLE lt_vbrk1
FOR ALL ENTRIES IN lt_vbfa
WHERE ( vbeln EQ lt_vbfa-vbeln )
AND kunag IN im_kunnr
AND bupla EQ im_werks
AND fksto EQ space
AND vbtyp EQ yss_cl_type_pool=>yss_c_m.
IF sy-subrc EQ 0.
SORT:
lt_vbrk1 BY vbeln
kunag
fksto.
ENDIF.
ENDIF.
*  Fetch material group
SELECT *
FROM tvm1t
INTO TABLE lt_tvm1t
FOR ALL ENTRIES IN lt_vbap
WHERE mvgr1 EQ lt_vbap-mvgr1.
IF sy-subrc EQ 0.
SORT: lt_tvm1t BY mvgr1.
ENDIF.
*    Fetch Material description
SELECT
matnr
maktg
FROM makt
INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_vbap
WHERE matnr = lt_vbap-matnr.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.
* Fetch Sold-to-party details
SELECT
vbeln
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND parvw EQ yss_cl_type_pool=>yss_c_ag. "AG - Sold-to-party
IF sy-subrc EQ 0.
SORT lt_vbpa BY vbeln.
*    Fetch Sold-to-party name
SELECT
addrnumber
name1
FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.
ENDIF.
ENDIF.
ENDIF.

*   Get the Billing header details regarding the Order status
SELECT
vbeln
vbtyp
fkdat
kunag
fksto
bupla
FROM vbrk
INTO TABLE lt_vbrk
WHERE fkdat IN im_date
AND kunag IN im_kunnr
AND bupla EQ im_werks
AND fksto EQ space
AND vbtyp EQ yss_cl_type_pool=>yss_c_m.
IF sy-subrc EQ 0.
SORT:
lt_vbrk BY vbeln
kunag
fksto.
ENDIF.

IF lt_vbrk IS NOT INITIAL.
*  Fetch Sold-to-party details
SELECT
vbeln
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa1
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln EQ lt_vbrk-vbeln
AND parvw EQ yss_cl_type_pool=>yss_c_ag. "AG - Sold-to-party
IF sy-subrc EQ 0.
SORT lt_vbpa BY vbeln.
*     Fetch Sold-to-party name
SELECT
addrnumber
name1
FROM adrc
INTO TABLE lt_adrc1
FOR ALL ENTRIES IN lt_vbpa1
WHERE addrnumber EQ lt_vbpa1-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc1 BY addrnumber.
ENDIF.
ENDIF.
* Get the Billing item details regarding the Order status
SELECT
vbeln
posnr
fkimg
netwr
matnr
matkl
werks
mvgr1
vtweg_auft
FROM vbrp
INTO TABLE lt_vbrp
FOR ALL ENTRIES IN lt_vbrk
WHERE vbeln = lt_vbrk-vbeln
AND werks EQ im_werks
AND matnr IN im_matnr
AND mvgr1 IN lt_mat_grp.
IF sy-subrc EQ 0.
SORT:
lt_vbrp BY vbeln
posnr
matnr.
MOVE-CORRESPONDING lt_vbrp TO lt_vbrp1.
SORT:
lt_vbrp1 BY vbeln
posnr
matnr
mvgr1.
*   Fetch material group description
SELECT *
FROM tvm1t
INTO TABLE lt_tvm1t1
FOR ALL ENTRIES IN lt_vbrp
WHERE mvgr1 EQ lt_vbrp-mvgr1.
IF sy-subrc EQ 0.
SORT: lt_tvm1t1 BY mvgr1.
ENDIF.
*    Fetch Material description
SELECT
matnr
maktg
FROM makt
INTO TABLE lt_makt1
FOR ALL ENTRIES IN lt_vbrp
WHERE matnr = lt_vbrp-matnr.
IF sy-subrc EQ 0.
SORT lt_makt1 BY matnr.
ENDIF.
ENDIF.
ENDIF.

IF lt_vbrk IS INITIAL AND lt_vbak IS INITIAL
AND lt_vbap IS INITIAL AND lt_vbrp IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_sales_details_found.
ENDIF.

* loop to get incoming qty,incoming price & open qty,open price
LOOP AT lt_vbap INTO DATA(lwa_vbap).
APPEND INITIAL LINE TO lt_plant ASSIGNING FIELD-SYMBOL(<lfs_plant>
<lfs_plant>-material_code  = lwa_vbap-matnr.
<lfs_plant>-incoming_qty   = lwa_vbap-kwmeng.
<lfs_plant>-incoming_price = lwa_vbap-netwr.
<lfs_plant>-plant          = lwa_vbap-werks.
<lfs_plant>-mat_grp        = lwa_vbap-mvgr1.

*    Reading table to get material Description
READ TABLE lt_makt ASSIGNING FIELD-SYMBOL(<lfs_makt>)
WITH KEY matnr = lwa_vbap-matnr
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_plant>-material_name = <lfs_makt>-maktg.
ENDIF.

*     Reading table to get Dealer code
READ TABLE lt_vbpa ASSIGNING FIELD-SYMBOL(<lfs_vbpa>)
WITH KEY vbeln = lwa_vbap-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_plant>-dealer_code = <lfs_vbpa>-kunnr.
ENDIF.

*     Reading table to get Dealer name
READ TABLE lt_adrc ASSIGNING FIELD-SYMBOL(<lfs_adrc>)
WITH KEY addrnumber = <lfs_vbpa>-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_plant>-dealer_name = <lfs_adrc>-name1.
ENDIF.

READ TABLE lt_tvm1t ASSIGNING FIELD-SYMBOL(<lfs_tvmlt>)
WITH KEY mvgr1 = lwa_vbap-mvgr1
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_plant>-mat_grp_desc = <lfs_tvmlt>-bezei.
ENDIF.

CLEAR lv_index.
*    Reading Table to get Open Quantity & Open Price.
READ TABLE lt_vbfa INTO DATA(lwa_vbfa_tmp)
WITH KEY vbelv = lwa_vbap-vbeln
posnv = lwa_vbap-posnr
vbtyp_n = yss_cl_type_pool=>yss_c_m
BINARY SEARCH.
IF sy-subrc EQ 0.
lv_index = sy-tabix.
<lfs_plant>-vbeln          = lwa_vbfa_tmp-vbeln.
<lfs_plant>-posnr          = lwa_vbfa_tmp-posnn.
LOOP AT lt_vbfa INTO DATA(lwa_vbfa) FROM lv_index.
IF lwa_vbfa_tmp-vbelv NE lwa_vbfa-vbelv
OR lwa_vbfa_tmp-posnv NE lwa_vbfa-posnv.
EXIT.
ENDIF.
*       Reading table to check invoice is not cancelled .
READ TABLE lt_vbrk1 ASSIGNING FIELD-SYMBOL(<lfs_vbrk>)
WITH KEY vbeln = lwa_vbfa-vbeln
fksto = space
BINARY SEARCH.
IF sy-subrc EQ 0.
lv_price = lv_price + lwa_vbfa-rfwrt.
lv_quan = lv_quan +  lwa_vbfa-rfmng .
AT END OF posnv.
<lfs_plant>-open_qty   =  lwa_vbap-kwmeng - lv_quan.
<lfs_plant>-open_price =  lwa_vbap-netwr  - lv_price.
CLEAR:lv_price,lv_quan.
ENDAT.
ENDIF.
ENDLOOP.
ELSE.
<lfs_plant>-open_qty   =  lwa_vbap-kwmeng.
<lfs_plant>-open_price =  lwa_vbap-netwr.
ENDIF.

CLEAR:
lwa_vbap,
lwa_vbfa.
ENDLOOP.
CLEAR:lv_index.
SORT: lt_vbpa1 BY vbeln,
lt_vbrp1 BY vbeln
posnr
matnr
mvgr1.

*  loop to get sales qty and sales price.
LOOP AT lt_vbrk INTO DATA(lwa_vbrk).
IF lwa_vbrk-fksto = space.
*       Reading table for Billing item details regarding the Order statu
READ TABLE lt_vbrp1 WITH KEY vbeln = lwa_vbrk-vbeln
TRANSPORTING NO FIELDS BINARY SEARCH .
IF sy-subrc EQ 0.
lv_index = sy-tabix.
LOOP AT lt_vbrp1 INTO  DATA(lwa_vbrp) FROM lv_index .
IF lwa_vbrp-vbeln <> lwa_vbrk-vbeln.
EXIT.
ENDIF.
lv_price =  lwa_vbrp-netwr + lv_price.
lv_quan  =   lwa_vbrp-fkimg  +  lv_quan.
AT END OF mvgr1.
lwa_plant-vbeln         = lwa_vbrp-vbeln.
lwa_plant-posnr         = lwa_vbrp-posnr.
lwa_plant-dealer_code   = lwa_vbrk-kunag.
lwa_plant-plant         = lwa_vbrk-bupla.
lwa_plant-material_code = lwa_vbrp-matnr.
lwa_plant-mat_grp       = lwa_vbrp-mvgr1.
lwa_plant-sales_qty     = lv_quan.
lwa_plant-sales_price   = lv_price.
*             Reading table to get material Description
READ TABLE lt_makt1 ASSIGNING <lfs_makt>
WITH KEY matnr = lwa_vbrp-matnr
BINARY SEARCH.
IF sy-subrc EQ 0.
lwa_plant-material_name = <lfs_makt>-maktg.
ENDIF.
*             Reading table to get Dealer code
READ TABLE lt_vbpa1 ASSIGNING <lfs_vbpa>
WITH KEY vbeln = lwa_vbrp-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
lwa_plant-dealer_code = <lfs_vbpa>-kunnr.
ENDIF.
*             Reading table to get Dealer name
READ TABLE lt_adrc1 ASSIGNING <lfs_adrc>
WITH KEY addrnumber = <lfs_vbpa>-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
lwa_plant-dealer_name = <lfs_adrc>-name1.
ENDIF.
*             Reading table to get material Group Description
READ TABLE lt_tvm1t1 ASSIGNING <lfs_tvmlt>
WITH KEY mvgr1 = lwa_vbrp-mvgr1
BINARY SEARCH.
IF sy-subrc EQ 0.
lwa_plant-mat_grp_desc = <lfs_tvmlt>-bezei.
ENDIF.
APPEND:
lwa_plant TO lt_plant1.
CLEAR:
lv_price,
lv_quan,
lwa_plant.
ENDAT.
ENDLOOP.
ENDIF.
ENDIF.
ENDLOOP.

*   Loop to combine imcoming qty ,sales qty ,open qty .
LOOP AT lt_plant1 INTO DATA(lwa_plant1).
READ TABLE lt_plant INTO lwa_plant
WITH KEY vbeln = lwa_plant1-vbeln
posnr = lwa_plant1-posnr.
IF sy-subrc EQ 0.
MODIFY  lt_plant  FROM lwa_plant1
TRANSPORTING  sales_qty sales_price
WHERE dealer_code = lwa_plant1-dealer_code
AND material_code = lwa_plant1-material_code
AND vbeln = lwa_plant1-vbeln
AND posnr = lwa_plant1-posnr.
ELSE.
APPEND:
lwa_plant1 TO lt_plant.
CLEAR:
lwa_plant1.
ENDIF.
ENDLOOP.

SORT:
lt_plant BY dealer_code
material_code
mat_grp.

*   loop to sum incoming qty,open qty,sales qty based on material group
LOOP AT lt_plant INTO lwa_plant.
DATA(lwa_plant_temp) = lwa_plant.
AT NEW material_code.
APPEND INITIAL LINE TO ex_analysis ASSIGNING FIELD-SYMBOL(<lfs_a
ENDAT.
AT END OF material_code.
<lfs_analysis>-plant         = lwa_plant_temp-plant.
<lfs_analysis>-dealer_code   = lwa_plant_temp-dealer_code.
<lfs_analysis>-dealer_name   = lwa_plant_temp-dealer_name.
<lfs_analysis>-material_code = lwa_plant_temp-material_code.
<lfs_analysis>-material_name = lwa_plant_temp-material_name.
<lfs_analysis>-mat_grp       = lwa_plant_temp-mat_grp.
<lfs_analysis>-mat_grp_desc  = lwa_plant_temp-mat_grp_desc.
ENDAT.
<lfs_analysis>-incoming_qty   = <lfs_analysis>-incoming_qty + lwa_
<lfs_analysis>-sales_qty      = <lfs_analysis>-sales_qty   + lwa_p
<lfs_analysis>-open_qty       = <lfs_analysis>-open_qty     + lwa_
<lfs_analysis>-incoming_price = <lfs_analysis>-incoming_price + lw
<lfs_analysis>-sales_price    = <lfs_analysis>-sales_price  + lwa_
<lfs_analysis>-open_price     = <lfs_analysis>-open_price   + lwa_
ENDLOOP.
SORT:
ex_analysis BY dealer_code
material_code
mat_grp.
ENDMETHOD.
GET_CUST_REGION_VALIDATION
item
METHOD get_cust_region_validation.
TYPES:
BEGIN OF lty_werks,
werks TYPE werks_d,         "Plant
land1 TYPE land1,           "Country Key
regio TYPE regio,           "Region
END OF lty_werks,

BEGIN OF lty_cust,
werks TYPE werks_d,         "Plant
kunnr TYPE kunnr,           "Customer Number
END OF lty_cust,

BEGIN OF lty_customer1,
kunnr TYPE kunnr,           "Customer Number
vwerk TYPE dwerk_ext,       "Plant
END OF lty_customer1.

DATA: ls_t001w     TYPE lty_werks,
lv_region    TYPE regio,
lv_werks     TYPE werks_d,
lv_active    TYPE xfeld,
lt_cust_act  TYPE STANDARD TABLE OF lty_cust,
ls_cust_act  TYPE lty_cust,
lt_customer1 TYPE STANDARD TABLE OF lty_customer1,
ls_customer  TYPE lty_customer1,
lv_vtweg     TYPE vtweg.

*  To identify division with plant name.
IF im_werks+0(1) = 'K'.
lv_vtweg = 'DH'.
ELSEIF im_werks+0(1) = 'S'.
lv_vtweg = 'DS'.
ENDIF.

* Conversion of customer number
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
input  = im_kunnr
IMPORTING
output = im_kunnr.

*   Fetch Plant details
SELECT SINGLE werks      "Plant
land1      "Country Key
regio      "Region
FROM t001w
INTO ls_t001w
WHERE werks = im_werks.
IF sy-subrc NE 0.
CLEAR: ls_t001w.
ENDIF.

*   Fetch customer details
SELECT SINGLE
regio         "Region
FROM kna1
INTO lv_region
WHERE kunnr = im_kunnr.
IF sy-subrc NE 0.
CLEAR lv_region.
ENDIF.

*   Fetching data to include the plant region data.
SELECT SINGLE werks                "Plant
active               "Mark as Active
FROM yss_cust_region
INTO (lv_werks , lv_active)
WHERE werks = im_werks.
IF sy-subrc NE 0.
CLEAR: lv_werks,
lv_active.
ENDIF.

*   Fetching data to avoid from output.
SELECT werks                       "Plant
kunnr                       "Customer
FROM yss_cust_act
INTO TABLE lt_cust_act
WHERE werks = im_werks.
IF sy-subrc EQ 0.
SORT lt_cust_act BY werks
kunnr.
ENDIF.

*   Fetching customers based on plant value
SELECT DISTINCT kunnr
vwerk
FROM knvv
INTO TABLE lt_customer1
WHERE vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg EQ lv_vtweg
AND spart EQ yss_cl_type_pool=>yss_c_md
AND kunnr EQ im_kunnr
AND vwerk  NE ''.
IF sy-subrc EQ 0.
SORT lt_customer1 BY kunnr
vwerk.
ENDIF.

*  If Plant(lv_werks) is not active in yss_cust_region,
*  below code will not execute
IF lv_werks EQ im_werks
AND lv_active = abap_true
AND ls_t001w-land1 = 'IN'.

*     Reading Blocked Customers
READ TABLE lt_cust_act INTO ls_cust_act
WITH KEY kunnr = im_kunnr
BINARY SEARCH.
IF sy-subrc EQ 0.
CLEAR ex_werks.
ELSE.
*       Validating Customer Region(lv_region) &
*        Plant Region(ls_t001w-regio).
IF lv_region EQ ls_t001w-regio.
*         Reading Customer Plant Value
READ TABLE lt_customer1 INTO ls_customer INDEX 1.
IF sy-subrc EQ 0.
ex_werks = ls_customer-vwerk.
ELSE.
CLEAR ex_werks.
ENDIF.
ENDIF.
ENDIF.
ENDIF.



























ENDMETHOD.
GET_MCTA_SALE_GROUP_WISE1
item
*&---------------------------------------------------------------------*
*& Method Name  : GET_MCTA_SALE_GROUP_WISE1                            *
*& Description  : Get MCTA report sales group wise                     *
*& Creation Date: 26.04.2019                                           *
*& Developer    : Prashanth                                            *
*& User ID      : Sapabap                                              *
*& Transport Num: SNDK902692                                           *
*&---------------------Change Log--------------------------------------*
*& Date      Programmer       UserID      Transportation Number        *
*& Ticket Num      Tag     Description                                 *
*&---------------------------------------------------------------------*
*& 19.08.2019 Purna         Incrsol1      RSDK900247        MOD-001    *
*& Description: Issue in Sales Analysis report - P series - Added Group*
*& 2& 3 for channal DH                                                 *
*&---------------------------------------------------------------------*
METHOD get_mcta_sale_group_wise1.
TYPES: BEGIN OF lty_vbak,
vbeln TYPE vbeln_va,      "sales order
audat TYPE audat,         "Document Date (Date Received/Sen
vtweg TYPE vtweg,         "Division
kunnr TYPE kunag,         "Sold to party
bstzd TYPE bstzd,         "Supplementary
END OF lty_vbak,

BEGIN OF lty_vbap,
vbeln  TYPE vbeln_va,     "sales order
posnr  TYPE posnr_va,     "item Number
matnr  TYPE matnr,        "Material number
kwmeng TYPE kwmeng,       "Quantity
vrkme  TYPE vrkme,        "Sale unit
werks  TYPE werks_d,      "Plant
netwr  TYPE netwr_ap,     "Amount
mvgr1  TYPE matkl,        "Material Group
END OF lty_vbap,

BEGIN OF lty_vbfa,
vbelv   TYPE vbfa-vbelv,
posnv   TYPE vbfa-posnv,
vbeln   TYPE vbfa-vbeln,
posnn   TYPE vbfa-posnn,
vbtyp_n TYPE vbfa-vbtyp_n,
rfmng   TYPE vbfa-rfmng,
rfwrt   TYPE vbfa-rfwrt,
END OF lty_vbfa,

BEGIN OF lty_vbrk,
vbeln TYPE vbeln_vf,      "Billing Number
vbtyp TYPE vbtyp,         "Billing Type
fksto TYPE fksto,         "Indicater for cancel
END OF lty_vbrk,

BEGIN OF lty_vbpa,
vbeln TYPE vbeln,         "Sales order No
kunnr TYPE kunnr,         "Customer number
adrnr TYPE adrnr,         "Address Number
END OF lty_vbpa,

BEGIN OF lty_adrc,
addrnumber TYPE ad_addrnum, "Address Number
name1      TYPE ad_name1,   "Name1
END OF lty_adrc,

BEGIN OF lty_kna1,
kunnr TYPE kunnr,         "Customer Number
name1 TYPE name1_gp,      "Name1
END OF lty_kna1,

BEGIN OF lty_makt,
matnr TYPE matnr,         "Material
maktx TYPE maktx,         "Material Description
END OF lty_makt,

BEGIN OF lty_t001w,
werks TYPE werks_d,       "Plant
name1 TYPE name1,         "Name1
END OF lty_t001w,

BEGIN OF lty_mvke,
matnr TYPE matnr,        "Material
vkorg TYPE vkorg,        "Organisation
vtweg TYPE vtweg,        "Distribution Channel
mvgr1 TYPE mvgr1,        "Material Group1
mvgr2 TYPE mvgr2,        "Material group2
END OF lty_mvke,

BEGIN OF lty_cust_sg,
kunnr          TYPE  kunnr,    "Customer Number
vkorg          TYPE  vkorg,    "Sales Organization
vtweg          TYPE  vtweg,    "Distribution Channel
spart          TYPE  spart,    "Division
vkbur          TYPE  vkbur,    "Sales Office
zzsales_group1 TYPE zsg1_de_vkgrp, "MDD Sales Group
zzsales_group2 TYPE zsg2_de_vkgrp, "PCD Sales Group
zzsales_group3 TYPE zsg3_de_vkgrp, "CSD Sales Group
zzsales_group4 TYPE  zsg_de_vkgrp,
END OF  lty_cust_sg,

BEGIN OF lty_knvv,
kunnr TYPE kunnr,        "Customer Number
vkorg TYPE vkorg,        "Sales Organization
vtweg TYPE vtweg,        "Distribution Channel
spart TYPE spart,        "Division
vkgrp TYPE vkgrp,        "Sales Group
END OF lty_knvv.

DATA : lt_mvke         TYPE STANDARD TABLE OF lty_mvke,
lt_cust_sg      TYPE STANDARD TABLE OF lty_cust_sg,
lt_cust_sg_temp TYPE STANDARD TABLE OF lty_cust_sg,
lt_vbak         TYPE STANDARD TABLE OF lty_vbak,
lt_vbap         TYPE STANDARD TABLE OF lty_vbap,
lt_vbap_tmp     TYPE STANDARD TABLE OF lty_vbap,
lt_sditem_sg    TYPE STANDARD TABLE OF yss_t_sditem_sg,
lt_sg1          TYPE STANDARD TABLE OF tvkgr,
lt_vbfa         TYPE STANDARD TABLE OF lty_vbfa,
lt_vbrk         TYPE STANDARD TABLE OF lty_vbrk,
lt_kna1         TYPE STANDARD TABLE OF lty_kna1,
lt_makt         TYPE STANDARD TABLE OF lty_makt,
lt_tvm1t        TYPE STANDARD TABLE OF tvm1t,
lt_t001w        TYPE STANDARD TABLE OF lty_t001w,
lt_vbpa         TYPE STANDARD TABLE OF lty_vbpa,
lt_adrc         TYPE STANDARD TABLE OF lty_adrc,
lt_analysis     TYPE yss_tt_salesgroup_wise,
lt_analysis_tmp TYPE yss_tt_salesgroup_wise,
lt_tvgrt        TYPE STANDARD TABLE OF tvgrt,
lwa_sditem_sg   TYPE yss_t_sditem_sg,
lv_tabix        TYPE sy-tabix,
lv_vtweg        TYPE vtweg.

* Get sales order header details
SELECT
vbeln
audat
vtweg
kunnr
bstzd
FROM vbak INTO TABLE lt_vbak
WHERE vbtyp EQ yss_cl_type_pool=>yss_c_c
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND spart = yss_cl_type_pool=>yss_c_md
AND vtweg IN ( yss_cl_type_pool=>yss_c_ds,yss_cl_type_pool=>yss_c_
AND kunnr IN im_kunnr
AND audat IN im_date_range.
*      AND bstzd IN im_werks.
IF sy-subrc NE 0.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_sales_details_found.
ENDIF.

SORT lt_vbak BY vbeln.

*   Get customer name
SELECT
kunnr
name1
FROM kna1
INTO TABLE lt_kna1
FOR ALL ENTRIES IN lt_vbak
WHERE kunnr EQ lt_vbak-kunnr.
IF sy-subrc EQ 0.
SORT lt_kna1 BY kunnr.
ENDIF.

***  Get Ship-to-party details
* Get the address number based on the Sales and Distribution Document Nu
SELECT
vbeln
kunnr
adrnr
FROM vbpa
INTO TABLE lt_vbpa
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND parvw EQ 'WE'.  "Ship-to-party
IF sy-subrc EQ 0.
SORT lt_vbpa BY vbeln.

*    Fetch Ship-to-party name
SELECT
addrnumber
name1
FROM adrc
INTO TABLE lt_adrc
FOR ALL ENTRIES IN lt_vbpa
WHERE addrnumber EQ lt_vbpa-adrnr.
IF sy-subrc EQ 0.
SORT lt_adrc BY addrnumber.
ENDIF.

*     Fetching sales group from master table
SELECT kunnr
vkorg
vtweg
spart
vkbur
zzsales_group1
zzsales_group2
zzsales_group3
zzsales_group4
FROM  yss_t_cust_sg
INTO TABLE lt_cust_sg
FOR ALL ENTRIES IN lt_vbpa
WHERE kunnr EQ lt_vbpa-kunnr
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg IN ( yss_cl_type_pool=>yss_c_ds,yss_cl_type_pool=>ys
AND spart EQ yss_cl_type_pool=>yss_c_md.
IF sy-subrc EQ 0.
SORT lt_cust_sg BY kunnr
vkorg
vtweg
spart.
ENDIF.
ENDIF.

*   Get sales order item details
SELECT
vbeln
posnr
matnr
kwmeng
vrkme
werks
netwr
mvgr1
FROM vbap  " MVGR1 - Material group
INTO TABLE lt_vbap
FOR ALL ENTRIES IN lt_vbak
WHERE vbeln EQ lt_vbak-vbeln
AND matnr IN im_matnr.
IF sy-subrc EQ 0.
SORT lt_vbap BY vbeln posnr.
* for performance check
lt_vbap_tmp = lt_vbap.
SORT lt_vbap_tmp BY matnr.
DELETE ADJACENT DUPLICATES FROM lt_vbap_tmp COMPARING matnr.
*     Get the sales group details
*      SELECT * FROM yss_t_sditem_sg
*        INTO TABLE lt_sg1
*        FOR ALL ENTRIES IN lt_vbap
*        WHERE vbeln EQ lt_vbap-vbeln
*          AND posnr EQ lt_vbap-posnr
*          AND zzsales_group IN im_sales_group.
*      IF sy-subrc EQ 0.
*        SORT lt_sg1 BY zzsales_group.
*      ENDIF.
*      SELECT *
*      FROM tvkgr
*      INTO TABLE lt_sg1
*      WHERE  vkgrp IN im_sales_group.
*  Get the material description
SELECT
matnr
maktx
FROM makt
INTO TABLE lt_makt
FOR ALL ENTRIES IN lt_vbap_tmp
WHERE matnr EQ lt_vbap_tmp-matnr
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
SORT lt_makt BY matnr.
ENDIF.
*     Fetching Data for material group and sales group type
SELECT
matnr
vkorg
vtweg
mvgr1
mvgr2
FROM mvke INTO TABLE lt_mvke
FOR ALL ENTRIES IN lt_vbap_tmp
WHERE matnr EQ lt_vbap_tmp-matnr
AND vkorg EQ yss_cl_type_pool=>yss_c_rmss
AND vtweg IN (yss_cl_type_pool=>yss_c_ds,yss_cl_type_pool=>yss_c
IF sy-subrc EQ 0.
SORT lt_mvke BY matnr vtweg.

*  Fetch material group description
SELECT *
FROM tvm1t INTO TABLE lt_tvm1t
FOR ALL ENTRIES IN lt_mvke
WHERE spras EQ sy-langu
AND mvgr1 EQ lt_mvke-mvgr1.
IF sy-subrc EQ 0.
SORT lt_tvm1t BY mvgr1.
ENDIF.
ENDIF.

*   loop to map the data according to sales group
LOOP AT lt_vbap INTO DATA(lwa_vbap1).
lwa_sditem_sg-posnr = lwa_vbap1-posnr.
*       Reading table to get sales order number
READ TABLE lt_vbak INTO DATA(lwa_vbak1)
WITH KEY vbeln = lwa_vbap1-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
lwa_sditem_sg-vbeln = lwa_vbak1-vbeln.
ENDIF.
*       If division is 'DS'.
IF lwa_vbap1-werks+0(1) = yss_cl_type_pool=>yss_c_s.
lwa_vbak1-vtweg = yss_cl_type_pool=>yss_c_ds.
*         Reading table to Get Ship to party
READ TABLE lt_vbpa INTO DATA(lwa_vbpa1)
WITH KEY vbeln = lwa_vbap1-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
*           Reading table to get sales group from custom table
READ TABLE lt_cust_sg INTO DATA(lwa_cust_sg)
WITH KEY kunnr = lwa_vbpa1-kunnr
vkorg = yss_cl_type_pool=>yss
vtweg = lwa_vbak1-vtweg
spart = yss_cl_type_pool=>yss
BINARY SEARCH.
IF sy-subrc EQ 0 .
*             Reading Table to get sales group type
READ TABLE lt_mvke INTO DATA(lwa_mvke1)
WITH KEY matnr = lwa_vbap1-matnr
vkorg = yss_cl_type_pool=>yss_c_rmss
vtweg = lwa_vbak1-vtweg
BINARY SEARCH.
IF sy-subrc EQ 0.
IF lwa_mvke1-mvgr2 = 'MDD'.
lwa_sditem_sg-zzsales_group = lwa_cust_sg-zzsales_grou
ELSEIF lwa_mvke1-mvgr2 = 'PCD'.
lwa_sditem_sg-zzsales_group = lwa_cust_sg-zzsales_grou
ELSE.
lwa_sditem_sg-zzsales_group = lwa_cust_sg-zzsales_grou
ENDIF.
ENDIF.
*             Reading table to get sales group according to input creter
READ TABLE im_sales_group INTO DATA(ls_temp) WITH KEY low
IF sy-subrc NE  0.
CONTINUE.
ELSE.
APPEND:
lwa_sditem_sg TO lt_sditem_sg.
CLEAR: lwa_sditem_sg.
ENDIF.
ENDIF.
ENDIF.
*      if channel is 'DH'
ELSEIF lwa_vbap1-werks+0(1) = yss_cl_type_pool=>yss_c_k.
lwa_vbak1-vtweg = yss_cl_type_pool=>yss_c_dh.
*         Reading table to Get Ship to party
READ TABLE lt_vbpa INTO lwa_vbpa1
WITH KEY vbeln = lwa_vbap1-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
*           Reading table to get sales group from custom table
READ TABLE lt_cust_sg INTO lwa_cust_sg
WITH KEY kunnr = lwa_vbpa1-kunnr
vkorg = yss_cl_type_pool=>yss_c_rmss
vtweg = lwa_vbak1-vtweg
spart = yss_cl_type_pool=>yss_c_md
BINARY SEARCH.
** SOC Purna MOd-001
*            IF sy-subrc EQ 0 .
*              lwa_sditem_sg-zzsales_group = lwa_cust_sg-zzsales_group1.
*            ENDIF.
IF sy-subrc EQ 0 .
*             Reading Table to get sales group type
READ TABLE lt_mvke INTO DATA(lwa_mvke1_1)
WITH KEY matnr = lwa_vbap1-matnr
vkorg = yss_cl_type_pool=>yss_c_rmss
vtweg = lwa_vbak1-vtweg
BINARY SEARCH.
IF sy-subrc EQ 0.
IF lwa_mvke1_1-mvgr2 = 'MDD'.
lwa_sditem_sg-zzsales_group = lwa_cust_sg-zzsales_grou
ELSEIF lwa_mvke1_1-mvgr2 = 'PCD'.
lwa_sditem_sg-zzsales_group = lwa_cust_sg-zzsales_grou
ELSE.
lwa_sditem_sg-zzsales_group = lwa_cust_sg-zzsales_grou
ENDIF.
ENDIF.
*             Reading table to get sales group according to input creter
READ TABLE im_sales_group INTO DATA(ls_temp1) WITH KEY low
IF sy-subrc NE  0.
CONTINUE.
ELSE.
APPEND:
lwa_sditem_sg TO lt_sditem_sg.
CLEAR: lwa_sditem_sg.
ENDIF.
ENDIF.
*8 EOC Purna MOD-001
ENDIF.
*         reading table to get sales group of selection creteria.
READ TABLE im_sales_group INTO ls_temp WITH KEY low = lwa_sdit
IF sy-subrc NE 0.
CONTINUE.
ELSE.
APPEND:
lwa_sditem_sg TO lt_sditem_sg.
CLEAR:lwa_sditem_sg.
ENDIF.
ENDIF.
ENDLOOP.
SORT lt_sditem_sg BY zzsales_group.
DATA(lt_sditem_sg_temp) = lt_sditem_sg.
DELETE lt_sditem_sg_temp WHERE zzsales_group = ''.
*     if Sales Group is initial
IF lt_sditem_sg_temp IS INITIAL.
RAISE EXCEPTION TYPE ycx_ss_exception
EXPORTING
textid = ycx_ss_exception=>no_sales_grp_details_found.
ENDIF.

* Pefermance check
IF lt_sditem_sg IS NOT INITIAL.
* Get sales group description
SELECT *
FROM tvgrt
INTO TABLE lt_tvgrt
FOR ALL ENTRIES IN lt_sditem_sg
WHERE vkgrp EQ lt_sditem_sg-zzsales_group
AND spras EQ sy-langu.
IF sy-subrc EQ 0.
SORT lt_tvgrt BY vkgrp.
ENDIF.
* Get linked documents and quantities & amounts
SELECT
vbelv
posnv
vbeln
posnn
vbtyp_n
rfmng
rfwrt
INTO TABLE lt_vbfa
FROM vbfa
FOR ALL ENTRIES IN lt_sditem_sg
WHERE vbelv = lt_sditem_sg-vbeln AND
posnv = lt_sditem_sg-posnr AND
vbtyp_n = 'M'.
IF sy-subrc EQ 0.
SORT lt_vbfa BY vbelv
posnv
vbtyp_n.
* Get the Billing header details regarding the Order status
SELECT
vbeln
vbtyp
fksto
FROM vbrk
INTO TABLE lt_vbrk
FOR ALL ENTRIES IN lt_vbfa
WHERE vbeln EQ lt_vbfa-vbeln.
IF sy-subrc EQ 0.
SORT lt_vbrk BY vbeln fksto.
ENDIF.
ENDIF.
ENDIF.

* Get the plant details
SELECT
werks
name1
FROM t001w
INTO TABLE lt_t001w
FOR ALL ENTRIES IN lt_vbap
WHERE werks EQ lt_vbap-werks.
IF sy-subrc EQ 0.
SORT lt_t001w BY werks.
ENDIF.
ENDIF.
* VBRK-FKSTO = '' Invoice else cancel  "OCRB from VBFA
CLEAR:lwa_sditem_sg.
SORT lt_sditem_sg BY vbeln
posnr.
LOOP AT lt_sditem_sg INTO lwa_sditem_sg.

APPEND INITIAL LINE TO lt_analysis ASSIGNING FIELD-SYMBOL(<lfs_ana

<lfs_analysis>-sales_group = lwa_sditem_sg-zzsales_group.
READ TABLE lt_tvgrt INTO DATA(lwa_tvgrt)
WITH KEY vkgrp = lwa_sditem_sg-zzsales_group
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-sales_group_desc = lwa_tvgrt-bezei.
ENDIF.

* Read sales header details to read the dealer code and name.
READ TABLE lt_vbak INTO DATA(lwa_vbak)
WITH KEY vbeln = lwa_sditem_sg-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
*       Read the dealer code and name
READ TABLE lt_kna1 INTO DATA(lwa_kna1)
WITH KEY kunnr = lwa_vbak-kunnr
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-dealer_code = lwa_kna1-kunnr.
<lfs_analysis>-dealer_name = lwa_kna1-name1.
ENDIF.


*      Read the Ship-to-party code and name
READ TABLE lt_vbpa INTO DATA(lwa_vbpa)
WITH KEY vbeln = lwa_vbak-vbeln
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-ship_to_party = lwa_vbpa-kunnr.
READ TABLE lt_adrc INTO DATA(lwa_adrc)
WITH KEY addrnumber = lwa_vbpa-adrnr
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-ship_to_name  = lwa_adrc-name1.
ENDIF.
ENDIF.

*       Read the item details to get the total sales quantity
READ TABLE lt_vbap INTO DATA(lwa_vbap)
WITH KEY vbeln = lwa_sditem_sg-vbeln
posnr = lwa_sditem_sg-posnr
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-incoming_qty   = lwa_vbap-kwmeng.
<lfs_analysis>-open_qty       = lwa_vbap-kwmeng.
<lfs_analysis>-incoming_price = lwa_vbap-netwr.
<lfs_analysis>-open_price     = lwa_vbap-netwr.
<lfs_analysis>-material_code  = lwa_vbap-matnr.
<lfs_analysis>-plant          = lwa_vbap-werks.

*         Read material description
READ TABLE lt_makt INTO DATA(lwa_makt)
WITH KEY matnr = lwa_vbap-matnr
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-material_name = lwa_makt-maktx.
CLEAR lwa_makt.
ENDIF.

*         Read plant description
READ TABLE lt_t001w INTO DATA(lwa_t001w)
WITH KEY werks = lwa_vbap-werks
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-plant_name = lwa_t001w-name1.
CLEAR lwa_t001w.
ENDIF.
*         Based on plant decide the Distribution Channel
IF lwa_vbap-werks+0(1) = yss_cl_type_pool=>yss_c_s.
lv_vtweg = yss_cl_type_pool=>yss_c_ds.
ELSEIF lwa_vbap-werks+0(1) = yss_cl_type_pool=>yss_c_k.
lv_vtweg = yss_cl_type_pool=>yss_c_dh.
ENDIF.

*         Read material group description
READ TABLE lt_mvke INTO DATA(ls_mvke)
WITH KEY matnr = lwa_vbap-matnr
vtweg = lv_vtweg
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-division = ls_mvke-mvgr2.
READ TABLE lt_tvm1t INTO DATA(ls_tvm1t)
WITH KEY mvgr1 = ls_mvke-mvgr1
BINARY SEARCH.
IF sy-subrc EQ 0.
<lfs_analysis>-mat_grp_desc = ls_tvm1t-bezei.
<lfs_analysis>-mat_grp      = ls_tvm1t-mvgr1.
ENDIF.
ENDIF.

READ TABLE lt_vbfa WITH KEY vbelv = lwa_sditem_sg-vbeln
posnv = lwa_sditem_sg-posnr
TRANSPORTING NO FIELDS BINARY SEAR
IF sy-subrc EQ 0.
lv_tabix = sy-tabix.

LOOP AT lt_vbfa INTO DATA(lwa_vbfa) FROM lv_tabix.
IF lwa_vbfa-vbelv NE lwa_sditem_sg-vbeln
OR lwa_vbfa-posnv NE lwa_sditem_sg-posnr.
EXIT.
ENDIF.

*             Don't consider cancelled billing order.
READ TABLE lt_vbrk WITH KEY vbeln = lwa_vbfa-vbeln
fksto = abap_true
TRANSPORTING NO FIELDS BINARY
IF sy-subrc EQ 0.
CONTINUE.
ENDIF.

<lfs_analysis>-open_qty  = <lfs_analysis>-open_qty - lwa_v
<lfs_analysis>-sales_qty = <lfs_analysis>-sales_qty + lwa_

<lfs_analysis>-open_price = <lfs_analysis>-open_price - lw
<lfs_analysis>-sales_price = <lfs_analysis>-sales_price +
CLEAR : lwa_vbfa.
ENDLOOP.
CLEAR lv_tabix.
ENDIF.
ENDIF.
ENDIF.
CLEAR : lwa_sditem_sg.
ENDLOOP.

SORT lt_analysis BY sales_group plant dealer_code ship_to_party mate

lt_analysis_tmp = lt_analysis.
DELETE ADJACENT DUPLICATES FROM lt_analysis_tmp COMPARING sales_grou
plant
dealer_cod
ship_to_pa
material_c

LOOP AT lt_analysis_tmp INTO DATA(lwa_analysis_tmp).

READ TABLE lt_analysis WITH KEY sales_group = lwa_analysis_tmp-sal
plant = lwa_analysis_tmp-plant
dealer_code = lwa_analysis_tmp-dea
ship_to_party = lwa_analysis_tmp-s
material_code = lwa_analysis_tmp-m
TRANSPORTING NO FIELDS BINARY SEAR
IF sy-subrc NE 0.
CONTINUE.
ENDIF.

lv_tabix = sy-tabix.

LOOP AT lt_analysis INTO DATA(lwa_analysis_tp) FROM lv_tabix.
IF lwa_analysis_tp-sales_group NE lwa_analysis_tmp-sales_group
OR lwa_analysis_tp-plant NE lwa_analysis_tmp-plant
OR lwa_analysis_tp-dealer_code NE lwa_analysis_tmp-dealer_code
OR lwa_analysis_tp-ship_to_party NE lwa_analysis_tmp-ship_to_par
OR lwa_analysis_tp-material_code NE lwa_analysis_tmp-material_co
EXIT.
ENDIF.
DATA(lwa_analysis) = lwa_analysis_tp.

AT NEW material_code.
IF im_mat_grp IS NOT INITIAL AND im_mat_grp NE lwa_analysis-ma
CONTINUE.
ENDIF.

APPEND INITIAL LINE TO ex_analysis ASSIGNING <lfs_analysis>.
<lfs_analysis>-sales_group      = lwa_analysis-sales_group.
<lfs_analysis>-division         = lwa_analysis-division.
<lfs_analysis>-plant            = lwa_analysis-plant.
<lfs_analysis>-dealer_code      = lwa_analysis-dealer_code.
<lfs_analysis>-material_code    = lwa_analysis-material_code.
<lfs_analysis>-sales_group_desc = lwa_analysis-sales_group_des
<lfs_analysis>-plant_name       = lwa_analysis-plant_name.
<lfs_analysis>-dealer_name      = lwa_analysis-dealer_name.
<lfs_analysis>-material_name    = lwa_analysis-material_name.
<lfs_analysis>-mat_grp          = lwa_analysis-mat_grp.
<lfs_analysis>-mat_grp_desc     = lwa_analysis-mat_grp_desc.
<lfs_analysis>-ship_to_party    = lwa_analysis-ship_to_party.
<lfs_analysis>-ship_to_name     = lwa_analysis-ship_to_name.
ENDAT.
<lfs_analysis>-incoming_qty   = <lfs_analysis>-incoming_qty   +
<lfs_analysis>-sales_qty      = <lfs_analysis>-sales_qty      +
<lfs_analysis>-open_qty       = <lfs_analysis>-open_qty       +
<lfs_analysis>-incoming_price = <lfs_analysis>-incoming_price +
<lfs_analysis>-sales_price    = <lfs_analysis>-sales_price    +
<lfs_analysis>-open_price     = <lfs_analysis>-open_price     +
ENDLOOP.
ENDLOOP.
CLEAR:lt_sditem_sg.
ENDMETHOD.
